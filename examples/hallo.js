// Generated by CoffeeScript 1.6.3
(function() {
  var root, _Citehandler,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(jQuery) {
    return jQuery.widget('IKS.halloactionbutton', {
      button: null,
      isChecked: false,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        queryState: true,
        cssClass: null
      },
      _create: function() {
        var hoverclass, id,
          _this = this;
        this.options.text = false;
        this.options.icons = {
          "primary": "ui-icon-" + this.options.command + "-p"
        };
        id = "" + this.options.uuid + "-" + this.options.label;
        this.button = this._createButton(id, this.options.command, this.options.label, this.options.icon);
        this.element.append(this.button);
        this.button.button({
          "icons": this.options.icons,
          "text": false
        });
        if (this.options.cssClass) {
          this.button.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          this.button.addClass('btn-large');
        }
        this.button.data('hallo-command', this.options.command);
        hoverclass = 'ui-state-hover';
        this.button.bind('mouseenter', function(event) {
          if (_this.isEnabled()) {
            return _this.button.addClass(hoverclass);
          }
        });
        return this.button.bind('mouseleave', function(event) {
          return _this.button.removeClass(hoverclass);
        });
      },
      _init: function() {
        var editableElement, queryState,
          _this = this;
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.element.append(this.button);
        queryState = function(event) {
          var e;
          if (!_this.options.command) {
            return;
          }
          try {
            if (_this.options.command === 'spellcheck') {
              return _this.checked(_this.options.editable.element[0].spellcheck);
            } else {
              return _this.checked(document.queryCommandState(_this.options.command));
            }
          } catch (_error) {
            e = _error;
          }
        };
        if (this.options.action) {
          this.button.bind('click', function(event) {
            jQuery('.misspelled').remove();
            _this.options.action(event);
            queryState;
            return false;
          });
        }
        if (!this.options.queryState) {
          return;
        }
        editableElement = this.options.editable.element;
        editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        editableElement.bind('halloenabled', function() {
          return editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        });
        return editableElement.bind('hallodisabled', function() {
          return editableElement.unbind('keyup paste change mouseup hallomodified', queryState);
        });
      },
      enable: function() {
        return this.button.removeAttr('disabled');
      },
      disable: function() {
        return this.button.attr('disabled', 'true');
      },
      isEnabled: function() {
        return this.button.attr('disabled') !== 'true';
      },
      refresh: function() {
        if (this.isChecked) {
          return this.button.addClass('ui-state-active_');
        } else {
          return this.button.removeClass('ui-state-active_');
        }
      },
      checked: function(checked) {
        this.isChecked = checked;
        return this.refresh();
      },
      _createButton: function(id, command, label, icon) {
        var button_str;
        button_str = "<button for=\"" + id + "\"";
        button_str += " class=\"" + command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " title=\"" + label + "\"";
        button_str += " rel=\"" + command + "\"";
        button_str += ">" + label + "</button>";
        return jQuery(button_str);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallodropdownform', {
      button: null,
      debug: false,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        target: '',
        setup: null,
        cssClass: null
      },
      _create: function() {
        var _base;
        return (_base = this.options).icon != null ? (_base = this.options).icon : _base.icon = "icon-" + (this.options.label.toLowerCase());
      },
      _init: function() {
        var target,
          _this = this;
        target = jQuery(this.options.target);
        target.css('position', 'absolute');
        target.addClass('dropdown-menu');
        target.addClass('dropdown-form');
        target.addClass('dropdown-form-' + this.options.command);
        target.hide();
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.button.bind('click', function() {
          if (target.hasClass('open')) {
            _this._hideTarget();
            return;
          }
          return _this._showTarget();
        });
        target.bind('bindShowTrigger', function(event) {
          var toolbar;
          toolbar = jQuery('.hallotoolbar').eq(0);
          if (!toolbar.length) {
            return;
          }
          _this.options.target = toolbar.find('.dropdown-form-' + _this.options.command);
          if (!_this.options.target.length) {
            return;
          }
          _this.button = toolbar.find('.' + _this.options.command + '_button');
          return _this._showTarget(_this.options.target);
        });
        return this.element.append(this.button);
      },
      bindShowHandler: function(event) {
        return this._showTarget(event.target);
      },
      bindShow: function(selector) {
        var event_name,
          _this = this;
        event_name = 'click';
        if (this.debug) {
          console.log('bindShow:', selector, event_name);
        }
        jQuery(document).undelegate(selector, event_name);
        return jQuery(document).delegate(selector, event_name, function(event) {
          var target, toolbar;
          if (_this.debug) {
            console.log(event.target);
          }
          if ((jQuery(event.target).closest('.dropdown-form-' + _this.options.command).length)) {
            return;
          }
          toolbar = jQuery('.hallotoolbar').eq(0);
          if (!toolbar.length) {
            return;
          }
          target = toolbar.find('.dropdown-form-' + _this.options.command);
          window.live_target = event.target;
          return target.trigger('bindShowTrigger');
        });
      },
      _showTarget: function(select_target) {
        var setup_success, target, target_id,
          _this = this;
        if (this.debug) {
          console.log('dropdownform target show', select_target);
        }
        jQuery(".dropdown-form:visible, .dropdown-menu:visible").each(function(index, item) {
          return jQuery(item).trigger('hide');
        });
        target_id = jQuery(this.options.target).attr('id');
        target = jQuery('#' + target_id);
        this.options.editable.storeContentPosition();
        if (this.options.setup) {
          setup_success = this.options.setup(select_target, target_id);
        }
        if (this.debug) {
          console.log('setup success:', setup_success);
        }
        if (!setup_success) {
          this._hideTarget();
          return;
        }
        target.addClass('open');
        target.show();
        this._updateTargetPosition();
        if ((target.find('textarea').length)) {
          target.find('textarea:first').focus();
        } else {
          target.find('input:first').focus();
        }
        return target.bind('hide', function() {
          return _this._hideTarget();
        });
      },
      _hideTarget: function() {
        var target;
        if (this.debug) {
          console.log('target remove');
        }
        target = jQuery(this.options.target);
        if (target.hasClass('open')) {
          target.removeClass('open');
          jQuery("select", target).selectBox('destroy');
          target.trigger('hide');
          target.hide();
          return this.options.editable.restoreContentPosition();
        }
      },
      hideForm: function() {
        jQuery(".dropdown-form:visible, .dropdown-menu:visible").each(function(index, item) {
          if (this.debug) {
            console.log('index', index);
          }
          return jQuery(item).trigger('hide');
        });
        return this.options.editable.restoreContentPosition();
      },
      _updateTargetPosition: function() {
        var button, button_id, button_position, last_button, last_button_pos, left, target, target_id, top;
        target_id = jQuery(this.options.target).attr('id');
        target = jQuery('#' + target_id);
        button_id = jQuery(this.button).attr('id');
        button = jQuery('#' + button_id);
        button_position = button.position();
        top = button_position.top;
        left = button_position.left;
        top += button.outerHeight();
        target.css('top', top);
        last_button = target.closest('.hallotoolbar').find('button:last');
        if (last_button.length) {
          last_button_pos = last_button.position().left;
          last_button_pos += last_button.width();
        }
        if (last_button.length && left + target.width() > last_button_pos) {
          left = left - target.width() + last_button.width();
        }
        if (left < 0) {
          left = 0;
        }
        target.css('left', left);
        if (this.debug) {
          console.log('target position:', target.position(), top, left, last_button);
        }
        if (this.debug) {
          return console.log(target.width(), last_button.width());
        }
      },
      _prepareButton: function() {
        var button, buttonEl, button_str, id;
        id = "" + this.options.uuid + "-" + this.options.command;
        button_str = "<button id=\"" + id + "\" data-toggle=\"dropdown\"";
        button_str += " class=\"" + this.options.command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " data-target=\"#" + (this.options.target.attr('id')) + "\"";
        button_str += " title=\"" + this.options.label + "\" rel=\"" + this.options.command + "\"";
        button_str += "></button>";
        buttonEl = jQuery(button_str);
        if (this.options.cssClass) {
          buttonEl.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          buttonEl.addClass('btn-large');
        }
        button = buttonEl.button({
          "icons": {
            "primary": "ui-icon-" + this.options.command + "-p"
          },
          "text": false
        });
        if (this.options.cssClass) {
          button.addClass(this.options.cssClass);
        }
        return button;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallodropdownbutton', {
      button: null,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        target: '',
        setup: null,
        cssClass: null
      },
      _create: function() {
        var _base;
        return (_base = this.options).icon != null ? (_base = this.options).icon : _base.icon = "icon-" + (this.options.command.toLowerCase());
      },
      _init: function() {
        var target,
          _this = this;
        target = jQuery(this.options.target);
        target.css('position', 'absolute');
        target.addClass('dropdown-menu');
        target.hide();
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.button.bind('click', function() {
          jQuery('.misspelled').remove();
          if (target.hasClass('open')) {
            _this._hideTarget();
            return;
          }
          return _this._showTarget();
        });
        target.bind('click', function() {
          return _this._hideTarget();
        });
        return this.element.append(this.button);
      },
      bindShowHandler: function(event) {
        return this._showTarget(event.target);
      },
      bindShow: function(selector) {
        var event_name,
          _this = this;
        event_name = 'click';
        return jQuery(selector).live(event_name, function() {
          return _this.bindShowHandler();
        });
      },
      _showTarget: function(select_target) {
        var target;
        jQuery(".dropdown-form:visible, .dropdown-menu:visible").each(function(index, item) {
          return jQuery(item).trigger('hide');
        });
        target = jQuery(this.options.target);
        this.options.editable.storeContentPosition();
        if (this.options.setup) {
          this.options.setup(select_target);
        }
        this._updateTargetPosition();
        target.addClass('open');
        return target.show();
      },
      _hideTarget: function() {
        var target;
        target = jQuery(this.options.target);
        if (target.hasClass('open')) {
          target.removeClass('open');
          target.hide();
          return this.options.editable.restoreContentPosition();
        }
      },
      _updateTargetPosition: function() {
        var last_button, last_button_pos, left, target, top, _ref;
        target = jQuery(this.options.target);
        _ref = this.button.position(), top = _ref.top, left = _ref.left;
        top += this.button.outerHeight();
        target.css('top', top);
        last_button = target.closest('.hallotoolbar').find('button:last');
        last_button_pos = last_button.position().left;
        last_button_pos += last_button.width();
        if (left + target.width() > last_button_pos) {
          return target.css('left', left - target.width() + last_button.width());
        } else {
          return target.css('left', left);
        }
      },
      _prepareButton: function() {
        var button, buttonEl, button_str, id;
        id = "" + this.options.uuid + "-" + this.options.command;
        button_str = "<button id=\"" + id + "\" data-toggle=\"dropdown\"";
        button_str += " class=\"" + this.options.command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " data-target=\"#" + (this.options.target.attr('id')) + "\"";
        button_str += " title=\"" + this.options.label + "\" rel=\"" + this.options.command + "\"";
        button_str += "></button>";
        buttonEl = jQuery(button_str);
        if (this.options.cssClass) {
          buttonEl.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          buttonEl.addClass('btn-large');
        }
        button = buttonEl.button({
          "icons": {
            "primary": "ui-icon-" + this.options.command + "-p"
          },
          "text": false
        });
        if (this.options.cssClass) {
          button.addClass(this.options.cssClass);
        }
        return button;
      }
    });
  })(jQuery);

  (function(jQuery) {
    jQuery.widget('IKS.hallobutton', {
      button: null,
      isChecked: false,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        queryState: true,
        cssClass: null
      },
      _create: function() {
        var hoverclass, id,
          _this = this;
        this.options.text = false;
        this.options.icons = {
          "primary": "ui-icon-" + this.options.command + "-p"
        };
        id = "" + this.options.uuid + "-" + this.options.label;
        this.button = this._createButton(id, this.options.command, this.options.label, this.options.icon);
        this.element.append(this.button);
        this.button.button({
          "icons": this.options.icons,
          "text": false
        });
        if (this.options.cssClass) {
          this.button.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          this.button.addClass('btn-large');
        }
        this.button.data('hallo-command', this.options.command);
        hoverclass = 'ui-state-hover';
        this.button.bind('mouseenter', function(event) {
          if (_this.isEnabled()) {
            return _this.button.addClass(hoverclass);
          }
        });
        return this.button.bind('mouseleave', function(event) {
          return _this.button.removeClass(hoverclass);
        });
      },
      _init: function() {
        var editableElement, queryState,
          _this = this;
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.element.append(this.button);
        queryState = function(event) {
          var attribute, e, node, parent, range, selection, state, style, _i, _len, _ref;
          if (!_this.options.command) {
            return;
          }
          if (!((event.keyCode >= 33 && event.keyCode <= 40) || event.type === 'mouseup' || event.type === 'hallomodified')) {
            return;
          }
          if (rangy.getSelection().anchorNode === null) {
            return;
          }
          try {
            state = false;
            if (_this.options.command === 'subscript' || _this.options.command === 'superscript') {
              selection = rangy.getSelection();
              if (selection.rangeCount > 0) {
                range = selection.getRangeAt(0);
                parent = range.startContainer.parentNode;
                if (parent.nodeName === 'SUB' && _this.options.command === 'subscript') {
                  state = true;
                }
                if (parent.nodeName === 'SUP' && _this.options.command === 'superscript') {
                  state = true;
                }
              }
              return _this.checked(state);
            } else if (_this.options.command.indexOf('justify') === 0) {
              selection = rangy.getSelection();
              if (selection.rangeCount > 0) {
                range = selection.getRangeAt(0);
                node = range.startContainer;
                while (node) {
                  if (node.contentEditable === 'true') {
                    break;
                  }
                  if (typeof node.attributes === 'object' && node.attributes !== null) {
                    _ref = node.attributes;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      attribute = _ref[_i];
                      if (attribute.nodeName === 'style' && attribute.nodeValue.indexOf('text-align') >= 0) {
                        style = attribute.nodeValue;
                        style = style.replace(/.*text-align:([^;]*).*/, '$1').trim();
                        if (_this.options.command.toLowerCase() === 'justify' + style) {
                          state = true;
                        }
                        break;
                      }
                    }
                    if (state) {
                      break;
                    }
                  }
                  node = node.parentNode;
                }
              }
              return _this.checked(state);
            } else {
              return _this.checked(document.queryCommandState(_this.options.command));
            }
          } catch (_error) {
            e = _error;
            console.error(e);
          }
        };
        if (typeof this.options.command_function === 'function') {
          this.button.bind('click', this.options.command_function);
        } else if (typeof this.options.command === 'string') {
          this.button.bind('click', function(event) {
            var node, range, state;
            jQuery('.misspelled').remove();
            if (_this.options.command === 'subscript' || _this.options.command === 'superscript') {
              range = rangy.getSelection().getRangeAt(0);
              node = jQuery(range.startContainer);
              state = false;
              if (node.closest('SUB').length && _this.options.command === 'subscript') {
                state = true;
              }
              if (node.closest('SUP').length && _this.options.command === 'superscript') {
                state = true;
              }
              if (!state) {
                _this.options.editable.execute(_this.options.command);
              } else {
                _this.options.editable.execute('removeformat');
              }
            } else {
              _this.options.editable.execute(_this.options.command);
            }
            queryState;
            return false;
          });
        }
        if (!this.options.queryState) {
          return;
        }
        editableElement = this.options.editable.element;
        editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        editableElement.bind('halloenabled', function() {
          return editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        });
        return editableElement.bind('hallodisabled', function() {
          return editableElement.unbind('keyup paste change mouseup hallomodified', queryState);
        });
      },
      enable: function() {
        return this.button.removeClass('disabled');
      },
      disable: function() {
        return this.button.addClass('disabled');
      },
      isEnabled: function() {
        return this.button.hasClass('disabled') !== 'true';
      },
      refresh: function() {
        if (this.isChecked) {
          return this.button.addClass('ui-state-active');
        } else {
          return this.button.removeClass('ui-state-active');
        }
      },
      checked: function(checked) {
        this.isChecked = checked;
        return this.refresh();
      },
      _createButton: function(id, command, label, icon) {
        var button_str;
        button_str = "<button for=\"" + id + "\"";
        button_str += " class=\"" + command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " title=\"" + label + "\"";
        button_str += " rel=\"" + command + "\"";
        button_str += ">" + label + "</button>";
        return jQuery(button_str);
      }
    });
    return jQuery.widget('IKS.hallobuttonset', {
      buttons: null,
      _create: function() {
        return this.element.addClass('ui-buttonset');
      },
      _init: function() {
        return this.refresh();
      },
      refresh: function() {
        var rtl;
        rtl = this.element.css('direction') === 'rtl';
        this.buttons = this.element.find('.ui-button');
        this.buttons.hallobutton('refresh');
        this.buttons.removeClass('ui-corner-all ui-corner-left ui-corner-right');
        this.buttons.filter(':first').addClass(rtl ? 'ui-corner-right' : 'ui-corner-left');
        return this.buttons.filter(':last').addClass(rtl ? 'ui-corner-left' : 'ui-corner-right');
      }
    });
  })(jQuery);

  /*
  Hallo 1.0.1dev - a rich text editing jQuery UI widget
  (c) 2011 Henri Bergius, IKS Consortium
  Hallo may be freely distributed under the MIT license
  http://hallojs.org
  */


  (function(jQuery) {
    return jQuery.widget('IKS.hallo', {
      toolbar: null,
      bound: false,
      originalContent: '',
      previousContent: '',
      uuid: '',
      selection: null,
      _keepActivated: false,
      _ignoreEvents: false,
      originalHref: null,
      _undo_stack: null,
      selection_marker: 'content_selection_marker',
      auto_store_timeout: 3000,
      debug: false,
      _key_handlers: [],
      _static_elements: [],
      options: {
        editable: true,
        plugins: {},
        toolbar: 'halloToolbarContextual',
        parentElement: 'body',
        buttonCssClass: null,
        toolbarCssClass: null,
        toolbarPositionAbove: false,
        toolbarOptions: {},
        placeholder: '',
        forceStructured: true,
        checkTouch: true,
        touchScreen: null,
        maxUndoEntries: 10
      },
      _create: function() {
        var options, plugin, _ref,
          _this = this;
        this.id = this._generateUUID();
        if (this.options.checkTouch && this.options.touchScreen === null) {
          this.checkTouch();
        }
        _ref = this.options.plugins;
        for (plugin in _ref) {
          options = _ref[plugin];
          if (!jQuery.isPlainObject(options)) {
            options = {};
          }
          jQuery.extend(options, {
            editable: this,
            uuid: this.id,
            buttonCssClass: this.options.buttonCssClass
          });
          jQuery(this.element)[plugin](options);
        }
        this.element.bind('halloactivated', function() {
          return _this._prepareToolbar();
        });
        return this.originalContent = this.getContents();
      },
      _init: function() {
        if (this.options.editable) {
          return this.enable();
        } else {
          return this.disable();
        }
      },
      destroy: function() {
        var options, plugin, _ref;
        this.disable();
        if (this.toolbar) {
          this.toolbar.remove();
          this.element[this.options.toolbar]('destroy');
        }
        _ref = this.options.plugins;
        for (plugin in _ref) {
          options = _ref[plugin];
          jQuery(this.element)[plugin]('destroy');
        }
        return jQuery.Widget.prototype.destroy.call(this);
      },
      disable: function() {
        var _this = this;
        this.element.attr("contentEditable", false);
        this.element.unbind("focus", this._activated);
        this.element.unbind("blur", this._deactivated);
        this.element.unbind("keyup paste change", this._checkModified);
        this.element.unbind("keyup", this._keys);
        this.element.unbind("keydown", this._syskeys);
        this.element.unbind("keyup mouseup", this._checkSelection);
        this.element.unbind("paste", this._paste);
        this.element.unbind("copy", this._copy);
        this.element.unbind("cut", this._cut);
        this.element.unbind("click", this._click);
        this.element.unbind("mousedown", this._clickdown);
        this.element.unbind("dblclick", this._clickdouble);
        this._key_handlers = [];
        this.bound = false;
        jQuery(this.element).removeClass('isModified');
        jQuery(this.element).removeClass('inEditMode');
        this.undoWaypointCommit(true);
        this.element.parents('a').andSelf().each(function(idx, elem) {
          var element;
          element = jQuery(elem);
          if (!element.is('a')) {
            return;
          }
          if (!_this.originalHref) {
            return;
          }
          return element.attr('href', _this.originalHref);
        });
        return this._trigger("disabled", null);
      },
      enable: function() {
        var update_size_fn,
          _this = this;
        this.element.parents('a[href]').andSelf().each(function(idx, elem) {
          var element;
          element = jQuery(elem);
          if (!element.is('a[href]')) {
            return;
          }
          _this.originalHref = element.attr('href');
          return element.removeAttr('href');
        });
        this.element.attr("contentEditable", true);
        window.hallo_current_instance = this;
        this.undoWaypointStart('text');
        this.undoWaypointCommit(true);
        if (!this.element.html().trim()) {
          this.element.html(this.options.placeholder);
          if (!(this.element.is('h1,h2,h3,h4,h5,h6, .Document.PageView .Text > .content'))) {
            update_size_fn = function() {
              var new_height, new_width;
              _this.element.css({
                'min-width': '',
                'min-height': ''
              });
              if (!(_this.element.is('h1,h2,h3,h4,h5,h6, .Document .Text > .content'))) {
                new_width = _this.element.innerWidth();
                new_width -= parseInt(_this.element.css("padding-right"), 10);
                new_width -= parseInt(_this.element.css("padding-left"), 10);
                new_height = _this.element.innerHeight();
                new_height -= parseInt(_this.element.css("padding-top"), 10);
                new_height -= parseInt(_this.element.css("padding-bottom"), 10);
                return _this.element.css({
                  'min-width': new_width,
                  'min-height': new_height
                });
              }
            };
            if (typeof window.current_hallo_resize_handler === 'function') {
              jQuery(window).unbind('resize', window.current_hallo_resize_handler);
            }
            window.current_hallo_resize_handler = update_size_fn;
            jQuery(window).bind('resize', window.current_hallo_resize_handler);
            window.current_hallo_resize_handler();
          }
        }
        if (!this.bound) {
          this.element.bind("focus", this, this._activated);
          this.element.bind("blur", this, this._deactivated);
          this.element.bind("keyup paste change", this, this._checkModified);
          this.element.bind("keyup", this, this._keys);
          this.element.bind("keydown", this, this._syskeys);
          this.element.bind("keyup mouseup", this, this._checkSelection);
          this.element.bind("paste", this, this._paste);
          this.element.bind("copy", this, this._copy);
          this.element.bind("cut", this, this._cut);
          this.element.bind("click", this, this._click);
          this.element.bind("mousedown", this, this._clickdown);
          this.element.bind("dblclick", this, this._clickdouble);
          this.bound = true;
        }
        if (typeof window._live === 'undefined') {
          window._live = {};
        }
        if (!window._live['.editableclick']) {
          window._live['.editableclick'] = true;
          if (jQuery('[contenteditable=false]').length > 0) {
            jQuery('[contenteditable=false]').live("click", function(event) {
              var target;
              target = jQuery(event.target);
              if (target.closest('[contenteditable=true]').length === 0 || _this.element.find(target).length === 0) {
                return;
              }
              return _this.setContentPosition(target);
            });
          }
        }
        if (this.options.forceStructured) {
          this._forceStructured();
        }
        return this._trigger("enabled", null);
      },
      activate: function() {
        return this.element.focus();
      },
      containsSelection: function() {
        var range;
        range = this.getSelection();
        return this.element.has(range.startContainer).length > 0;
      },
      getInstance: function(api_cb) {
        console.warn('bad call, current-instance is updated on enable!');
        window.hallo_current_instance = this;
        return api_cb(this);
      },
      getSelection: function() {
        var range, selection;
        selection = rangy.getSelection();
        range = null;
        if (selection.rangeCount > 0) {
          range = selection.getRangeAt(0);
        } else {
          range = rangy.createRange();
        }
        return range;
      },
      getSelectionStartNode: function(node_processing_fn) {
        var node, saved_selection;
        saved_selection = rangy.saveSelection();
        node = this.element.find('.rangySelectionBoundary:first');
        node_processing_fn(node);
        return rangy.removeMarkers(saved_selection);
      },
      getSelectionEndNode: function(node_processing_fn) {
        var node, saved_selection;
        saved_selection = rangy.saveSelection();
        node = this.element.find('.rangySelectionBoundary:first');
        node_processing_fn(node);
        return rangy.removeMarkers(saved_selection);
      },
      getSelectionHtml: function() {
        var html, jq_node, range, selection, text;
        selection = rangy.getSelection();
        html = '';
        if (selection.rangeCount > 0) {
          range = selection.getRangeAt(0);
          jq_node = $('<div></div>').append(range.cloneContents());
          html = jq_node.html();
          text = jq_node.text();
          if (text.trim() === '') {
            html = '';
          }
          if (html.trim() === '&nbsp;') {
            html = '';
          }
          if (this.debug) {
            console.log('selection_html:[' + html + ']');
          }
        }
        return html;
      },
      getSelectionNode: function(node_processing_fn) {
        var common_node, end_node, node, range, saved_selection, selection, start_node;
        saved_selection = rangy.saveSelection();
        start_node = this.element.find('.rangySelectionBoundary').eq(0);
        end_node = this.element.find('.rangySelectionBoundary').eq(1);
        selection = rangy.getSelection();
        if (selection.rangeCount > 0) {
          range = selection.getRangeAt(0);
          common_node = range.commonAncestorContainer;
          node = start_node;
          while (node.length) {
            if (node[0] === common_node) {
              break;
            }
            node = node.parent();
          }
          if (!node.length) {
            node = start_node;
          }
          node_processing_fn(node);
        } else {
          node_processing_fn(this.element);
        }
        return rangy.removeMarkers(saved_selection);
      },
      restoreSelection: function(range) {
        var selection;
        selection = rangy.getSelection();
        return selection.setSingleRange(range);
      },
      setSelectionRange: function(input, selection_start, selection_end) {
        var range;
        if (input.setSelectionRange) {
          input.focus();
          return input.setSelectionRange(selection_start, selection_end);
        } else if (input.createTextRange) {
          range = input.createTextRange();
          range.collapse(true);
          range.moveEnd('character', selection_end);
          range.moveStart('character', selection_start);
          return range.select();
        }
      },
      setCaretToPos: function(input, pos) {
        return this._setSelectionRange(input, pos, pos);
      },
      replaceSelection: function(cb) {
        var newTextNode, r, range, selection, t;
        console.warn('Deprecated, do not use');
        if (navigator.appName === 'Microsoft Internet Explorer') {
          t = document.selection.createRange().text;
          r = document.selection.createRange();
          return r.pasteHTML(cb(t));
        } else {
          selection = rangy.getSelection();
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
          } else {
            range = rangy.createRange();
            range.selectNode(this.element[0]);
            range.collapse(false);
          }
          newTextNode = document.createTextNode(cb(range.extractContents()));
          range.insertNode(newTextNode);
          range.setStartAfter(newTextNode);
          return selection.setSingleRange(range);
        }
      },
      replaceSelectionHTML: function(cb) {
        var r, range, range_content, range_content_jq, range_parent, range_parent_jq, replacement, selection, t;
        console.warn('Deprecated, do not use');
        if (navigator.appName === 'Microsoft Internet Explorer') {
          t = document.selection.createRange().text;
          r = document.selection.createRange();
          return r.pasteHTML(cb(t));
        } else {
          selection = rangy.getSelection();
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
          } else {
            range = rangy.createRange();
            range.selectNode(this.element[0]);
            range.collapse(false);
          }
          range_parent = range.commonAncestorContainer;
          if (range_parent.nodeType !== 1) {
            range_parent = range_parent.parentNode;
          }
          range_content = range.cloneContents();
          range_parent_jq = jQuery(range_parent);
          range_content_jq = jQuery("<div></div>");
          range_content_jq[0].appendChild(range_content);
          replacement = cb(range_parent_jq, range_content_jq);
          range.deleteContents();
          if (replacement) {
            range.insertNode($('<span>' + replacement + '</span>')[0]);
          }
          selection.setSingleRange(range);
          return this.storeContentPosition();
        }
      },
      removeAllSelections: function() {
        console.warn('Deprecated do not use');
        if (navigator.appName === 'Microsoft Internet Explorer') {
          return range.empty();
        } else {
          return rangy.getSelection().removeAllRanges();
        }
      },
      getContents: function() {
        var contentClone;
        contentClone = this.element.clone();
        return contentClone.html();
      },
      setContents: function(contents) {
        return this.element.html(contents);
      },
      isModified: function() {
        if (!this.previousContent) {
          this.previousContent = this.originalContent;
        }
        return this.previousContent !== this.getContents();
      },
      setUnmodified: function() {
        jQuery(this.element).removeClass('isModified');
        return this.previousContent = this.getContents();
      },
      setModified: function() {
        jQuery(this.element).addClass('isModified');
        return this._trigger('modified', null, {
          editable: this,
          content: this.getContents()
        });
      },
      restoreOriginalContent: function() {
        return this.element.html(this.originalContent);
      },
      execute: function(command, value) {
        var range, sel_all_range, selection,
          _this = this;
        this.undoWaypointStart();
        if (command.indexOf('justify') === 0) {
          this.storeContentPosition();
          this.getSelectionStartNode(function(selection) {
            var style_attr, _results;
            _results = [];
            while (selection.length) {
              if (selection.attr('contenteditable') === 'true') {
                break;
              }
              style_attr = selection.attr('style');
              if (typeof style_attr !== 'undefined') {
                style_attr = style_attr.replace(/text-align:[^;]*/, '');
                style_attr = style_attr.trim();
                if (style_attr === '' || style_attr === ';') {
                  selection.removeAttr('style');
                } else {
                  selection.attr('style', style_attr);
                }
              }
              _results.push(selection = selection.parent());
            }
            return _results;
          });
        }
        selection = rangy.getSelection();
        if (selection.rangeCount > 0) {
          range = selection.getRangeAt(0);
        } else {
          range = rangy.createRange();
          range.selectNode(this.element[0]);
          range.collapse(false);
        }
        if (range.collapsed && command.indexOf('paste') !== 0) {
          sel_all_range = rangy.createRange();
          sel_all_range.selectNode(range.startContainer);
          rangy.getSelection().setSingleRange(sel_all_range);
        }
        if (command.indexOf('copy') === 0) {
          this._copy();
        } else if (command.indexOf('cut') === 0) {
          this._cut({
            data: this
          });
        } else {
          if (document.execCommand(command, false, value)) {
            this.element.trigger("change");
          }
        }
        return this.undoWaypointCommit(false);
      },
      protectFocusFrom: function(el) {
        var _this = this;
        return el.bind("mousedown", function(event) {
          if ((jQuery('.dropdown-form:visible').length)) {
            return;
          }
          event.preventDefault();
          _this._protectToolbarFocus = true;
          return setTimeout(function() {
            return _this._protectToolbarFocus = false;
          }, 300);
        });
      },
      keepActivated: function(_keepActivated) {
        this._keepActivated = _keepActivated;
      },
      _generateUUID: function() {
        var S4;
        S4 = function() {
          return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
        };
        return "" + (S4()) + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + (S4()) + (S4());
      },
      _prepareToolbar: function() {
        var defaults, plugin, populate, toolbarOptions;
        this.toolbar = jQuery('<div class="hallotoolbar"></div>').hide();
        if (this.options.toolbarCssClass) {
          this.toolbar.addClass(this.options.toolbarCssClass);
        }
        defaults = {
          editable: this,
          parentElement: this.options.parentElement,
          toolbar: this.toolbar,
          positionAbove: this.options.toolbarPositionAbove
        };
        toolbarOptions = $.extend({}, defaults, this.options.toolbarOptions);
        this.element[this.options.toolbar](toolbarOptions);
        for (plugin in this.options.plugins) {
          if (jQuery(this.element).length > 0 && typeof jQuery(this.element).data(plugin) !== "undefined") {
            populate = jQuery(this.element).data(plugin).populateToolbar;
          }
          if (!jQuery.isFunction(populate)) {
            continue;
          }
          this.element[plugin]('populateToolbar', this.toolbar);
        }
        this.element[this.options.toolbar]('setPosition');
        return this.protectFocusFrom(this.toolbar);
      },
      changeToolbar: function(element, toolbar, hide) {
        var originalToolbar;
        if (hide == null) {
          hide = false;
        }
        originalToolbar = this.options.toolbar;
        this.options.parentElement = element;
        if (toolbar) {
          this.options.toolbar = toolbar;
        }
        if (!this.toolbar) {
          return;
        }
        this.element[originalToolbar]('destroy');
        this.toolbar.remove();
        this._prepareToolbar();
        if (hide) {
          return this.toolbar.hide();
        }
      },
      _checkModified: function(event) {
        var widget;
        widget = event.data;
        if (widget.isModified()) {
          return widget.setModified();
        }
      },
      _click: function(event) {
        var _this = this;
        event.data.storeContentPosition();
        if ((jQuery('.dropdown-menu').length)) {
          if ((jQuery('.dropdown-form:visible').length)) {
            jQuery('.dropdown-form:visible').each(function(index, item) {
              return jQuery(item).hallodropdownform('hideForm');
            });
          }
          jQuery('.dropdown-menu').hide();
          return jQuery('.dropdown-menu').removeClass('open');
        }
      },
      _clickdouble: function(event) {
        var _this = this;
        if ((jQuery('.dropdown-menu').length)) {
          if ((jQuery('.dropdown-form:visible').length)) {
            jQuery('.dropdown-form:visible').each(function(index, item) {
              return jQuery(item).hallodropdownform('hideForm');
            });
          }
          jQuery('.dropdown-menu').hide();
          return jQuery('.dropdown-menu').removeClass('open');
        }
      },
      _clickdown: function(event) {
        var _this = this;
        if ((jQuery('.dropdown-menu').length)) {
          if ((jQuery('.dropdown-form:visible').length)) {
            jQuery('.dropdown-form:visible').each(function(index, item) {
              return jQuery(item).hallodropdownform('hideForm');
            });
          }
          jQuery('.dropdown-menu').hide();
          return jQuery('.dropdown-menu').removeClass('open');
        }
      },
      _copy: function(event) {
        var dom, range, rdata, selection;
        if (this.debug) {
          console.log('copy', event);
        }
        if (!window.wke) {
          return;
        }
        if (typeof event === 'object' && typeof event.preventDefault === 'function') {
          event.preventDefault();
        }
        selection = rangy.getSelection();
        if (selection.rangeCount > 0) {
          range = selection.getRangeAt(0);
          rdata = jQuery('<div/>').append(range.cloneContents());
          dom = new IDOM();
          dom.cleanExport(rdata);
          rdata.find(this.selection_marker).unwrap();
          if (this.debug) {
            console.log(range, rdata, rdata.html());
          }
          return utils.storeToClipboard(rdata);
        }
      },
      _cut: function(event) {
        var range, selection;
        event.data.undoWaypointStart('cut');
        event.data._copy(event);
        selection = rangy.getSelection();
        if (selection.rangeCount > 0) {
          range = selection.getRangeAt(0);
          range.deleteContents();
          return event.data.undoWaypointCommit(false);
        }
      },
      _paste: function(event) {
        var attach_dfd, dom, html, jq_temp, nugget, nugget_node, pdata, range, selection,
          _this = this;
        pdata = '';
        if (jQuery.isArray(event.originalEvent.clipboardData.types)) {
          event.originalEvent.clipboardData.types.forEach(function(type) {
            if (type.indexOf('text/') !== 0) {
              return;
            }
            if (type === 'text/plain' && pdata !== '') {
              return;
            }
            if (type !== 'text/plain' && type !== 'text/html') {
              return;
            }
            return pdata = event.originalEvent.clipboardData.getData(type);
          });
        }
        if (pdata === '') {
          pdata = event.originalEvent.clipboardData.getData('text/plain');
        }
        if (typeof pdata === 'undefined' || pdata === '') {
          return;
        }
        event.preventDefault();
        event.data.undoWaypointStart('paste');
        pdata = pdata.replace(/<script/g, '<xscript').replace(/<\/script/, '</xscript');
        jq_temp = jQuery('<div>' + pdata + '</div>');
        dom = new IDOM();
        dom.clean(jq_temp);
        html = jq_temp.html();
        selection = rangy.getSelection();
        if (selection.rangeCount > 0) {
          range = selection.getRangeAt(0);
          range.deleteContents();
        } else {
          range = rangy.createRange();
          range.selectNode(event.data.element[0]);
          range.collapse(false);
        }
        if (jq_temp.contents().length > 1) {
          range.insertNode(jq_temp[0]);
        } else {
          jq_temp = jq_temp.contents();
          if (jq_temp.contents().length === 1) {
            range.insertNode(jq_temp.contents()[0]);
          } else {
            range.insertNode(jq_temp[0]);
            range.selectNode(jq_temp[0]);
          }
        }
        range.collapse(false);
        selection.setSingleRange(range);
        if (typeof event.data === 'object' && typeof event.data.element === 'object' && event.data.element.length) {
          nugget = new DOMNugget();
          nugget_node = jQuery('> .content', event.data.element.closest('.nugget'));
          if (nugget_node.length) {
            attach_dfd = nugget._attachZ3988(nugget_node);
            attach_dfd.done(function() {
              return nugget._processZ3988(nugget_node).always(function() {
                return event.data.undoWaypointCommit(false);
              });
            });
            return attach_dfd.fail(function() {
              return event.data.undoWaypointCommit(false);
            });
          }
        } else {
          return event.data.undoWaypointCommit(false);
        }
      },
      _ignoreKeys: function(code) {
        if (code >= 33 && code <= 40) {
          return true;
        }
        if (code === 20) {
          return true;
        }
        return false;
      },
      _isRemoveContentKey: function(widget, event) {
        var selection;
        selection = rangy.getSelection();
        if (event.keyCode === 8) {
          return true;
        }
        if (event.keyCode === 46) {
          return true;
        }
        if (event.keyCode === 88 && event.ctrlKey) {
          return true;
        }
        if (!selection.isCollapsed) {
          return true;
        }
        return false;
      },
      registerKey: function(modifier, keyCode, callback_fn) {
        var check_fn,
          _this = this;
        check_fn = function(event) {
          var check_modifiers, mod_state;
          check_modifiers = {
            'ctrlKey': modifier.indexOf('ctrl') >= 0,
            'shiftKey': modifier.indexOf('shift') >= 0,
            'altKey': modifier.indexOf('alt') >= 0
          };
          mod_state = true;
          jQuery.each(check_modifiers, function(key, value) {
            return mod_state = mod_state & event[key] === value;
          });
          if (mod_state) {
            if (event.keyCode === keyCode) {
              callback_fn(event);
              return true;
            }
          }
          return false;
        };
        return this._key_handlers.push(check_fn);
      },
      checkRegisteredKeys: function(event) {
        var found_handler,
          _this = this;
        found_handler = false;
        this._key_handlers.forEach(function(key_handler) {
          if (found_handler) {
            return;
          }
          return found_handler = key_handler(event);
        });
        return found_handler;
      },
      _keys: function(event) {
        var widget,
          _this = this;
        widget = event.data;
        if (widget._ignoreKeys(event.keyCode)) {
          return;
        }
        jQuery('.static_element', widget.element).attr('contenteditable', 'false').removeClass('static_element');
        if ((event.keyCode === 32 || event.keyCode === 13 || event.keyCode === 8 || event.keyCode === 9) && !event.ctrlKey) {
          widget.undoWaypointCommit(false);
          widget.undoWaypointStart('text');
        }
        if ((event.keyCode === 65 || event.keyCode === 69 || event.keyCode === 73 || event.keyCode === 79 || event.keyCode === 85 || event.keyCode === 188 || event.keyCode === 190) && !event.ctrlKey) {
          widget.undoWaypointCommit(false);
          widget.undoWaypointStart('text');
        }
        if (event.keyCode === 66 && event.ctrlKey) {
          widget.execute("bold");
        }
        if (event.keyCode === 73 && event.ctrlKey) {
          widget.execute("italic");
        }
        if (event.keyCode === 85 && event.ctrlKey) {
          widget.execute("underline");
        }
        if (!event.ctrlKey && !event.shiftKey && event.keyCode !== 17 && event.keycode !== 16) {
          if (widget.autostore_timer) {
            window.clearTimeout(widget.autostore_timer);
          }
          return widget.autostore_timer = window.setTimeout(function() {
            widget.storeContentPosition();
            widget.store();
            return widget.restoreContentPosition();
          }, widget.auto_store_timeout);
        }
      },
      _select_cell_fn: function(cell) {
        var range, selection;
        selection = rangy.getSelection();
        range = rangy.createRange();
        range.selectNode(cell);
        return selection.setSingleRange(range);
      },
      _syskeys: function(event) {
        var li, new_range, range, restore_editable_fn, selection, table, td, tds, use_next, use_prev, widget,
          _this = this;
        widget = event.data;
        if (widget._ignoreKeys(event.keyCode)) {
          return;
        }
        if (widget._isRemoveContentKey(widget, event)) {
          jQuery('.static_element', widget.element).attr('contenteditable', 'false').removeClass('static_element');
          jQuery('[contenteditable=false]', widget.element).addClass('static_element').removeAttr('contenteditable');
          restore_editable_fn = function() {
            return jQuery('.static_element', widget.element).attr('contenteditable', 'false').removeClass('static_element');
          };
          window.clearTimeout(widget._static_elements_timer);
          widget._static_elements_timer = window.setTimeout(restore_editable_fn, 30);
        }
        if (widget.checkRegisteredKeys(event)) {
          return;
        }
        if (event.keyCode === 13 && !event.shiftKey) {
          selection = rangy.getSelection();
          if (selection.rangeCount === 0) {
            return;
          }
          range = selection.getRangeAt(0);
          if ($(range.startContainer).parent().hasClass('inEditMode')) {
            if (widget.element.contents()[0] && widget.element.contents()[0].nodeType === 3 && !widget.element.hasClass('name') && !widget.element.hasClass('title')) {
              $(widget.element.contents()[0]).replaceWith('<p>' + $(widget.element.contents()[0]).text() + '</p>');
              new_range = rangy.createRange();
              new_range.selectNodeContents(widget.element.contents()[0]);
              new_range.collapse(false);
              selection.addRange(new_range);
            }
          }
        }
        if (event.keyCode === 9 && !event.shiftKey) {
          selection = rangy.getSelection();
          if (selection.rangeCount === 0) {
            return;
          }
          range = selection.getRangeAt(0);
          li = $(range.startContainer).closest('li');
          if (!li.length) {
            li = $(range.endContainer).closest('li');
          }
          if (li.length && !li.has(widget.element).length) {
            if (widget.element.closest('li').length && widget.element.closest('li')[0] === li[0]) {
              return;
            }
            widget.execute("indent");
            event.preventDefault();
            return;
          }
          td = $(range.startContainer).closest('td,th');
          if (td.length && !td.has(widget.element).length) {
            widget.undoWaypointCommit(false);
            widget.undoWaypointStart('text');
            table = td.closest('table');
            use_next = false;
            tds = table.find('td,th');
            tds.each(function(index, item) {
              if (use_next) {
                use_next = false;
                widget._select_cell_fn(item);
              }
              if (item !== td[0]) {
                return;
              }
              return use_next = true;
            });
            if (use_next) {
              widget._select_cell_fn(tds[0]);
            }
            event.preventDefault();
          }
        }
        if (event.keyCode === 9 && event.shiftKey) {
          selection = rangy.getSelection();
          if (selection.rangeCount === 0) {
            return;
          }
          range = rangy.getSelection().getRangeAt(0);
          li = $(range.startContainer).closest('li');
          if (!li.length) {
            li = $(range.endContainer).closest('li');
          }
          if (li.length) {
            if (widget.element.closest('li').length && widget.element.closest('li')[0] === li[0]) {
              return;
            }
            widget.execute("outdent");
            event.preventDefault();
            return;
          }
          td = $(range.startContainer).closest('td,th');
          if (td.length) {
            widget.undoWaypointCommit(false);
            widget.undoWaypointStart('text');
            table = td.closest('table');
            use_prev = false;
            tds = table.find('td,th');
            tds.each(function(index, item) {
              if (item !== td[0]) {
                return;
              }
              if (index > 0) {
                return widget._select_cell_fn(tds[index - 1]);
              } else {
                return widget._select_cell_fn(tds[tds.length - 1]);
              }
            });
            return event.preventDefault();
          }
        }
      },
      _rangesEqual: function(r1, r2) {
        if (r1.startContainer !== r2.startContainer) {
          return false;
        }
        if (r1.startOffset !== r2.startOffset) {
          return false;
        }
        if (r1.endContainer !== r2.endContainer) {
          return false;
        }
        if (r1.endOffset !== r2.endOffset) {
          return false;
        }
        return true;
      },
      _checkSelection: function(event) {
        var widget;
        if (event.keyCode === 27) {
          return;
        }
        widget = event.data;
        return setTimeout(function() {
          var selection;
          selection = widget.getSelection();
          if (widget._isEmptySelection(selection) || widget._isEmptyRange(selection)) {
            if (widget.selection) {
              widget.selection = null;
              widget._trigger("unselected", null, {
                editable: widget,
                originalEvent: event
              });
            }
            return;
          }
          if (!widget.selection || !widget._rangesEqual(selection, widget.selection)) {
            widget.selection = selection.cloneRange();
            return widget._trigger("selected", null, {
              editable: widget,
              selection: widget.selection,
              ranges: [widget.selection],
              originalEvent: event
            });
          }
        }, 0);
      },
      _isEmptySelection: function(selection) {
        if (selection.type === "Caret") {
          return true;
        }
        return false;
      },
      _isEmptyRange: function(range) {
        if (range.collapsed) {
          return true;
        }
        if (range.isCollapsed) {
          if (typeof range.isCollapsed === 'function') {
            return range.isCollapsed();
          }
          return range.isCollapsed;
        }
        return false;
      },
      turnOn: function() {
        var force_focus,
          _this = this;
        if (this.autostore_timer) {
          window.clearTimeout(this.autostore_timer);
        }
        if ((jQuery('.inEditMode').length)) {
          if (jQuery('.inEditMode')[0] === this.element[0]) {
            return;
          }
          jQuery('.inEditMode').hallo('turnOff');
        }
        if (this.getContents() === this.options.placeholder) {
          force_focus = function() {
            var content_node, new_range, selection;
            if (!jQuery(_this.element).hasClass('inEditMode')) {
              return;
            }
            new_range = rangy.createRange();
            content_node = jQuery(_this.element)[0];
            new_range.selectNodeContents(content_node);
            selection = rangy.getSelection();
            return selection.setSingleRange(new_range);
          };
          window.setTimeout(force_focus, 1);
        }
        jQuery(this.element).addClass('inEditMode');
        return this._trigger("activated", null, this);
      },
      turnOff: function() {
        var contents;
        if (this.autostore_timer) {
          window.clearTimeout(this.autostore_timer);
        }
        jQuery(this.element).removeClass('inEditMode');
        this._trigger("deactivated", this);
        jQuery('.misspelled').remove();
        contents = this.getContents();
        if (contents === '' || contents === ' ' || contents === '<br>' || contents === this.options.placeholder) {
          return this.setContents(this.options.placeholder);
        }
      },
      store: function() {
        var contents, contents_dom, contents_text;
        if (this.autostore_timer) {
          window.clearTimeout(this.autostore_timer);
        }
        if (this.options.store_callback) {
          contents = this.getContents();
          contents_dom = $('<div>' + contents + '</div>');
          if (!contents_dom.find('table, img, .formula, .characters').length) {
            contents_text = contents_dom.text();
            contents_text = contents_text.replace(/\n/g, ' ');
            if (contents_text.trim() === '' || contents_text === this.options.placeholder) {
              this.setContents('');
            }
          }
          return this.options.store_callback(this.getContents());
        }
      },
      _activated: function(event) {
        var _this = this;
        if (event.data._ignoreEvents) {
          return;
        }
        event.data.undoWaypointStart('text');
        if (this.debug) {
          console.log('hallo activated');
        }
        if ((jQuery('.dropdown-form:visible').length)) {
          jQuery('.dropdown-form:visible').each(function(index, item) {
            return jQuery(item).hallodropdownform('hideForm');
          });
          event.data.turnOff();
        }
        event.data.turnOn();
        return event.data.restoreContentPosition();
      },
      _deactivated: function(event) {
        var contents, contents_dom, contents_text;
        if (this.debug) {
          console.log('hallo deactivated, set window.debug_hallotoolbar true to prevent');
        }
        if (window.debug_hallotoolbar) {
          return;
        }
        if (event.data._ignoreEvents) {
          return;
        }
        if (this.autostore_timer) {
          window.clearTimeout(this.autostore_timer);
        }
        event.data.undoWaypointCommit(true);
        event.data.storeContentPosition(true);
        if (event.data.options.store_callback) {
          contents = event.data.getContents();
          contents_dom = $('<div>' + contents + '</div>');
          if (!contents_dom.find('table, img, .formula, .characters').length) {
            contents_text = contents_dom.text();
            contents_text = contents_text.replace(/\n/g, ' ');
            if (contents_text.trim() === '' || contents_text === event.data.options.placeholder) {
              event.data.setContents('');
            }
          }
          event.data.options.store_callback(event.data.getContents());
        }
        if (event.data._keepActivated) {
          return;
        }
        if ((jQuery('.dropdown-form:visible').length)) {
          return;
        }
        if (event.data._protectToolbarFocus !== true) {
          event.data._key_handlers = [];
          return event.data.turnOff();
        } else {
          return setTimeout(function() {
            return jQuery(event.data.element).focus();
          }, 300);
        }
      },
      _forceStructured: function(event) {
        var e;
        try {
          return document.execCommand('styleWithCSS', 0, false);
        } catch (_error) {
          e = _error;
          try {
            return document.execCommand('useCSS', 0, true);
          } catch (_error) {
            e = _error;
            try {
              return document.execCommand('styleWithCSS', false, false);
            } catch (_error) {
              e = _error;
            }
          }
        }
      },
      checkTouch: function() {
        return this.options.touchScreen = !!('createTouch' in document);
      },
      undoWaypointStart: function(id) {
        if (typeof UndoCommand === 'undefined') {
          return;
        }
        this._current_undo_command = new UndoCommand();
        this.storeContentPosition();
        this._current_undo_command.before_data = this.element.html();
        if (typeof id !== 'undefined') {
          this._current_undo_command.id = id + Date.now();
        }
        return this._current_undo_command;
      },
      undoWaypointCommit: function(auto) {
        var previous_command, undo_command,
          _this = this;
        if (typeof UndoCommand === 'undefined') {
          return;
        }
        if (typeof UndoStack === 'undefined') {
          return;
        }
        if (!this._current_undo_command) {
          return;
        }
        this._undo_stack = this.undoWaypointLoad(this.element);
        if (auto && this._undo_stack.canRedo()) {
          return;
        }
        undo_command = this._current_undo_command;
        this.storeContentPosition();
        undo_command.after_data = this.element.html();
        if (this._undo_stack.canRedo() && this._undo_stack.index() > 0) {
          previous_command = this._undo_stack.previous();
          undo_command.before_data = previous_command.after_data;
          if (undo_command.before_data === previous_command.before_data && undo_command.after_data === previous_command.after_data) {
            return;
          }
        }
        if (undo_command.before_data === undo_command.after_data) {
          return;
        }
        undo_command.undo = function() {
          if (!_this._undo_stack.canRedo() && _this._undo_stack.canUndo()) {
            undo_command.after_data = _this._undo_stack.target.html();
          }
          _this._undo_stack.target.html(undo_command.before_data);
          _this.restoreContentPosition();
          return undo_command.postdo();
        };
        undo_command.redo = function() {
          undo_command.before_data = _this._undo_stack.target.html();
          _this._undo_stack.target.html(undo_command.after_data);
          _this.restoreContentPosition();
          return undo_command.postdo();
        };
        if (undo_command.id === 'text') {
          if (previous_command) {
            previous_command.mergeWith = function(current_command) {
              var merge;
              merge = false;
              return merge;
              if (Math.abs(previous_command.after_data.length - current_command.after_data.length) < 5) {
                console.log('text delta too small', Math.abs(previous_command.after_data.length - current_command.after_data.length));
                merge = true;
                previous_command.after_data = current_command.after_data;
              }
              if (previous_command.after_data === current_command.after_data) {
                console.log('same after data');
                current_command.before_data = previous_command.before_data;
                merge = true;
              }
              console.log('merging:', merge);
              return merge;
            };
          }
        }
        if (this.debug) {
          console.log('pushing undo:', undo_command.after_data, undo_command);
        }
        this._undo_stack.push(undo_command);
        return this._current_undo_command = null;
      },
      undo: function(target) {
        if (target) {
          this._undo_stack = this.undoWaypointLoad(target);
        }
        if (!this._undo_stack) {
          return;
        }
        this.undoWaypointCommit(true);
        if (this.debug) {
          console.log('undo', command);
        }
        return this._undo_stack.undo();
      },
      redo: function(target) {
        if (target) {
          this._undo_stack = this.undoWaypointLoad(target);
        }
        if (!this._undo_stack) {
          return;
        }
        if (this.debug) {
          console.log('redo', command);
        }
        return this._undo_stack.redo();
      },
      undoWaypointIdentifier: function(target) {
        var classname, id, pelement;
        classname = target.attr('class');
        if (typeof classname === 'string') {
          classname = classname.replace(/\s/g, '');
          classname = classname.replace(/isModified/g, '');
          classname = classname.replace(/inEditMode/g, '');
        } else {
          classname = '';
        }
        id = target.attr('id');
        pelement = target.parent();
        while (typeof id === 'undefined' && pelement && pelement.length) {
          id = pelement.attr('id');
          pelement = pelement.parent();
        }
        if (typeof id === 'undefined') {
          id = 'unknown';
        }
        return classname + id;
      },
      undoWaypointLoad: function(target) {
        var wpid;
        if (typeof UndoManager === 'undefined') {
          return;
        }
        if (typeof UndoStack === 'undefined') {
          return;
        }
        wpid = this.undoWaypointIdentifier(target);
        this._undo_stack = (new UndoManager()).getStack(wpid);
        this._undo_stack.setUndoLimit(64);
        this._undo_stack.target = target;
        return this._undo_stack;
      },
      restoreContentPosition: function() {
        var e, stored_selection;
        if (this.debug) {
          console.log('restoreContentPosition');
        }
        stored_selection = this.element.find(this.selection_marker).eq(0);
        if (stored_selection.length) {
          if (this.debug) {
            console.log('selection to restore:', stored_selection);
          }
          this._ignoreEvents = true;
          try {
            rangy.deserializeSelection(stored_selection.attr('rel'), this.element[0]);
          } catch (_error) {
            e = _error;
          }
          this.element.find('.rangySelectionBoundary').remove();
          return this._ignoreEvents = false;
        }
      },
      storeContentPosition: function(avoid_change_selection) {
        var e, range, selection, selection_identifier, serialized_selection, tmp_id;
        this._ignoreEvents = true;
        tmp_id = 'range' + Date.now();
        try {
          selection = rangy.getSelection();
          serialized_selection = '';
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
            serialized_selection = rangy.serializeSelection(selection, true, this.element[0]);
          }
          if (serialized_selection !== '') {
            this.element.find(this.selection_marker).contents().unwrap();
            this.element.find(this.selection_marker).remove();
            selection_identifier = jQuery('<' + this.selection_marker + ' contenteditable="false"></' + this.selection_marker + '>');
            selection_identifier.attr('rel', serialized_selection);
            this.element.append(selection_identifier);
          }
        } catch (_error) {
          e = _error;
          console.warn('exception during store selection');
        }
        return this._ignoreEvents = false;
      },
      setContentPosition: function(jq_node) {
        var range, selection;
        selection = rangy.getSelection();
        range = rangy.createRange();
        range.selectNodeContents(jq_node[0]);
        selection.setSingleRange(range);
        return this.storeContentPosition();
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloformat", {
      options: {
        editable: null,
        uuid: "",
        formattings: {
          bold: true,
          italic: true,
          strikeThrough: false,
          underline: false,
          superscript: false,
          subscript: false
        },
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset, enabled, format, widget, _ref,
          _this = this;
        widget = this;
        buttonset = jQuery("<span class=\"" + widget.widgetName + "\"></span>");
        buttonize = function(format) {
          var buttonHolder, format_label;
          format_label = format;
          if (window.action_list && window.action_list['hallojs_' + format] !== void 0) {
            format_label = window.action_list['hallojs_' + format].title + ' ' + window.action_list['hallojs_' + format].tooltip;
          }
          buttonHolder = jQuery('<span></span>');
          buttonHolder.hallobutton({
            label: format_label,
            editable: _this.options.editable,
            command: format,
            uuid: _this.options.uuid,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonHolder);
        };
        _ref = this.options.formattings;
        for (format in _ref) {
          enabled = _ref[format];
          if (enabled) {
            buttonize(format);
          }
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallosourcedescription', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['__associate'],
        buttonCssClass: null
      },
      _create: function() {
        return this;
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        setup = function() {
          root.citehandler.get().setupSourceDescriptions(target, _this.options.editable, jQuery.proxy(_this._addElement, _this));
          return true;
        };
        buttonset.append(target);
        buttonset.append(this._prepareButton(setup, target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var containingElement, contentArea, el, element, in_document, _i, _len, _ref;
        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        containingElement = this.options.editable.element.get(0).tagName.toLowerCase();
        in_document = this.options.editable.element.closest('.Document').length > 0;
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!in_document && element === "__quote") {
            continue;
          }
          el = this._addElement(element, containingElement);
          if (el) {
            contentArea.append(el);
          }
        }
        return contentArea;
      },
      _keep_selection_replace_callback: function(parent, old) {
        var dom, has_block_contents, nr, range, replacement, selection;
        console.error('unsuppored function');
        replacement = false;
        dom = new IDOM();
        has_block_contents = dom.hasBlockElement(old);
        if (old.html() !== "" && !has_block_contents) {
          replacement = "<span class=\"selection\">" + old.html() + "</span>";
        } else {
          replacement = "<span class=\"selection\">&nbsp;</span>";
        }
        nr = jQuery('<span>' + replacement + '</span>');
        selection = rangy.getSelection();
        if (has_block_contents) {
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
            range.setStartAfter(range.endContainer);
          } else {
            range = rangy.createRange();
            range.selectNode(this.options.editable.element[0]);
            range.collapse(false);
          }
          range.insertNode(nr[0]);
        } else {
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
            range.deleteContents();
          } else {
            range = rangy.createRange();
            range.selectNode(this.options.editable.element[0]);
            range.collapse(false);
          }
          range.insertNode(nr[0]);
        }
        replacement = false;
        return replacement;
      },
      _addElement: function(element, containing_element, publication_type, data) {
        var el, element_text, has_auto_citation, has_citation, span, this_editable,
          _this = this;
        if (element === '__quote') {
          element_text = utils.tr('quote');
          if (window.action_list && window.action_list['QuoteNugget'] !== void 0) {
            span = jQuery('<span>');
            span.html(window.action_list['QuoteNugget'].title);
            element_text = span.text();
          }
        } else if (element === '__associate') {
          element_text = utils.tr('associate');
          if (window.action_list && window.action_list['hallojs_sourcedescription'] !== void 0) {
            element_text = window.action_list['hallojs_sourcedescription'].title;
          }
          span = jQuery('<span>');
          span.html(element_text);
          element_text = span.text();
        } else {
          element_text = element;
        }
        if (element_text.length > 48) {
          element_text = element_text.substring(0, 48) + '...';
        }
        el = jQuery("<button class=\"publication-selector\"></button>");
        el.text(element_text);
        if (publication_type) {
          el.addClass(publication_type);
        }
        if (containing_element === element) {
          el.addClass("selected");
        }
        if (data) {
          el.append("<span class=\"data\" style=\"display:none\">" + data + "</span>");
        }
        has_citation = jQuery(this.options.editable.element).find("[data-sourcedescriptionloid=" + data + "]").length;
        if (has_citation) {
          has_auto_citation = jQuery(this.options.editable.element).find("[data-sourcedescriptionloid=" + data + "]").hasClass('auto-cite');
          if (!has_auto_citation) {
            el.attr("disabled", "disabled");
            el.addClass('used');
          }
        }
        this_editable = this.options.editable;
        return el.bind("click", function(ev) {
          var nugget;
          if (element === '__associate') {
            window.__start_mini_activity = true;
            this_editable.storeContentPosition();
            return jQuery('body').hallopublicationselector({
              'editable': this_editable
            });
          } else {
            _this.options.editable.getSelectionStartNode(function(selection) {
              var dom, nugget, saved_selection;
              if (selection.length) {
                dom = new IDOM();
                nugget = new DOMNugget();
                saved_selection = rangy.saveSelection();
                return _this.options.editable.getSelectionNode(function(selection_common) {
                  var has_block_contents, replacement, replacement_node, selection_html;
                  selection_html = _this.options.editable.getSelectionHtml();
                  has_block_contents = dom.hasBlockElement(jQuery('<span>' + selection_html + '</span>'));
                  if (selection_html !== '' && !has_block_contents) {
                    replacement = "<span class=\"citation\">" + selection_html + "</span>";
                  } else {
                    replacement = "";
                  }
                  replacement += "<span class=\"cite\"><span class=\"csl\">" + element + "</span><span class=\"Z3988\" data-sourcedescriptionloid=\"" + data + "\"><span style=\"display:none;\">&#160;</span></span>";
                  replacement_node = jQuery('<span></span>').append(replacement);
                  return nugget.getSourceDescriptionsIndex(_this.options.editable.element).done(function(sourcedescription_index) {
                    var co, range, z3988, z3988_node;
                    z3988 = new Z3988();
                    z3988_node = jQuery('.Z3988', replacement_node)[0];
                    co = sourcedescription_index.index_loid[data];
                    if (typeof co === 'undefined') {
                      co = {
                        loid: data
                      };
                    }
                    nugget.addDerivedSourceDescriptionAttributes(z3988_node, co);
                    z3988.attach(z3988_node, {
                      sourcedescription: co
                    });
                    if (has_block_contents) {
                      utils.info(utils.tr('warning selected block contents'));
                      selection_common.append(replacement_node.contents());
                    } else {
                      selection = rangy.getSelection();
                      if (selection.rangeCount > 0) {
                        range = selection.getRangeAt(0);
                        range.deleteContents();
                        range.insertNode(replacement_node[0]);
                      } else {
                        selection_common.append(replacement_node.contents());
                      }
                    }
                    return rangy.removeMarkers(saved_selection);
                  });
                });
              } else {
                return utils.info(utils.tr('no selection'));
              }
            });
            nugget = new DOMNugget();
            return nugget.updateSourceDescriptionData(this_editable.element).done(function() {
              return nugget.resetCitations(_this.options.editable.element).done(function() {
                return _this.options.editable.restoreContentPosition();
              });
            });
          }
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'sourcedescription';
        if (window.action_list && window.action_list['hallojs_sourcedescription'] !== void 0) {
          button_label = window.action_list['hallojs_sourcedescription'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'sourcedescription',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallolists", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        lists: {
          ordered: true,
          unordered: true
        },
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(type, label) {
          var butten_label, buttonElement, button_label;
          butten_label = label;
          if (window.action_list && window.action_list['hallojs_' + label] !== void 0) {
            button_label = window.action_list['hallojs_' + label].title;
          }
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: button_label,
            command: "insert" + type + "List",
            icon: "icon-list-" + (label.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        if (this.options.lists.ordered) {
          buttonize("Ordered", "OL");
        }
        if (this.options.lists.unordered) {
          buttonize("Unordered", "UL");
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallotable', {
      dropdownform: null,
      tmpid: 0,
      selected_row: null,
      selected_cell: null,
      html: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['rows', 'cols', 'border'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function(select_target, target_id) {
          var range, recalc, selection, selection_html, table, table_placeholder, table_placeholder_node, table_selected, td, tr;
          contentId = target_id;
          _this.tmpid = 'mod_' + (new Date()).getTime();
          if (rangy.getSelection().rangeCount === 0) {
            return false;
          }
          range = rangy.getSelection().getRangeAt(0);
          table = $(range.startContainer).closest('table');
          if (!table.length) {
            table = $(range.endContainer).closest('table');
          }
          tr = $(range.startContainer).closest('tr');
          if (!tr.length) {
            tr = $(range.endContainer).closest('tr');
          }
          td = $(range.startContainer).closest('td');
          if (!td.length) {
            td = $(range.endContainer).closest('td');
          }
          if (!td.length) {
            td = $(range.startContainer).closest('th');
          }
          if (!td.length) {
            td = $(range.endContainer).closest('th');
          }
          table_selected = false;
          if (table.length) {
            _this.options.editable.element.find('table').each(function(index, item) {
              var border, cols, heading, rows;
              if (table[0] === item) {
                $(item).attr('id', _this.tmpid);
                rows = 0;
                cols = 0;
                border = $(item).hasClass('table-border');
                heading = false;
                $(item).find('tr').each(function(rindx, row) {
                  if (tr[0] === row) {
                    _this.selected_row = $(row);
                  }
                  $(row).find('th').each(function(cindx, col) {
                    if (td[0] === col) {
                      _this.selected_cell = $(col);
                    }
                    if (cols < cindx) {
                      cols = cindx;
                    }
                    return heading = true;
                  });
                  $(row).find('td').each(function(cindx, col) {
                    if (td[0] === col) {
                      _this.selected_cell = $(col);
                    }
                    if (cols < cindx) {
                      return cols = cindx;
                    }
                  });
                  if (rows < rindx) {
                    return rows = rindx;
                  }
                });
                $('#' + contentId + 'cols').val(cols + 1);
                $('#' + contentId + 'rows').val(rows + 1);
                if (border) {
                  $('#' + contentId + 'border').addClass('active');
                } else {
                  $('#' + contentId + 'border').removeClass('active');
                }
                if (heading) {
                  $('#' + contentId + 'heading').addClass('active');
                } else {
                  $('#' + contentId + 'heading').removeClass('active');
                }
                return table_selected = true;
              }
            });
          }
          if (!table_selected) {
            table_placeholder = '<table id="' + _this.tmpid + '" class="table-border"></table>';
            table_placeholder_node = jQuery(table_placeholder);
            selection_html = _this.options.editable.getSelectionHtml();
            if (selection_html === '') {
              _this.options.editable.getSelectionNode(function(selection) {
                if (selection[0] === _this.options.editable.element[0]) {
                  return _this.options.editable.element.append(table_placeholder_node);
                } else {
                  return table_placeholder_node.insertAfter(selection);
                }
              });
            } else {
              selection = rangy.getSelection();
              if (selection.rangeCount > 0) {
                range = selection.getRangeAt(0);
                range.deleteContents();
              } else {
                range = rangy.createRange();
                range.selectNode(_this.options.editable.element[0]);
                range.collapse(false);
              }
              jQuery('body').append(table_placeholder_node);
              range.insertNode(table_placeholder_node[0]);
            }
          }
          recalc = function() {
            return _this.recalcHTML(target.attr('id'));
          };
          window.setTimeout(recalc, 300);
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        target.bind('hide', function() {
          return jQuery('table').each(function(index, item) {
            return jQuery(item).removeAttr('id');
          });
        });
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      updateTableHTML: function(contentId) {
        var border, c, cols, heading, irow, r, row, rows, table, _i, _j,
          _this = this;
        table = $('#' + this.tmpid);
        rows = $('#' + contentId + 'rows').val();
        cols = $('#' + contentId + 'cols').val();
        border = $('#' + contentId + 'border').hasClass('active');
        heading = $('#' + contentId + 'heading').hasClass('active');
        if (rows === '' || cols === '' || parseInt(rows) === NaN || parseInt(cols) === NaN || rows < 0 || cols < 0) {
          return false;
        }
        if (border) {
          table.attr('class', 'table-border');
        } else {
          table.attr('class', 'table-no-border');
          table.removeAttr('border');
        }
        irow = 0;
        table.find('tr').each(function(rindx, row) {
          var c, icol, _i, _results;
          irow = rindx + 1;
          if (irow > rows) {
            $(row).remove();
            return;
          }
          icol = 0;
          $(row).find('th').each(function(cindx, cell) {
            icol = cindx + 1;
            if (icol > cols) {
              $(cell).remove();
              return;
            }
            if (!heading) {
              return $(cell).contents().unwrap().wrapAll('<td></td>').parent();
            }
          });
          $(row).find('td').each(function(cindx, cell) {
            icol = cindx + 1;
            if (icol > cols) {
              $(cell).remove();
              return;
            }
            if (heading && rindx === 0) {
              return $(cell).contents().unwrap().wrapAll('<th></th>').parent();
            }
          });
          if (icol < cols) {
            icol = icol + 1;
            _results = [];
            for (c = _i = icol; _i <= cols; c = _i += 1) {
              if (heading && irow === 1) {
                _results.push($(row).append('<th>' + utils.tr('heading') + '</th>'));
              } else {
                _results.push($(row).append('<td>' + utils.tr('content') + '</td>'));
              }
            }
            return _results;
          }
        });
        if (irow < rows) {
          irow = irow + 1;
          for (r = _i = irow; _i <= rows; r = _i += 1) {
            row = '<tr>';
            for (c = _j = 1; _j <= cols; c = _j += 1) {
              if (heading && r === 1) {
                row += '<th>' + utils.tr('heading') + '</th>';
              } else {
                row += '<td>' + utils.tr('content') + '</td>';
              }
            }
            row += '</tr>';
            table.append(row);
          }
        }
        return table[0].outerHTML;
      },
      recalcHTML: function(contentId) {
        this.html = this.updateTableHTML(contentId);
        return this.options.editable.store();
      },
      _prepareDropdown: function(contentId) {
        var addButton, addInput, contentArea, contentAreaUL,
          _this = this;
        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        addInput = function(type, element, default_value, recalc_preview) {
          var el, elid, recalc, toggle_button;
          elid = "" + contentId + element;
          el = jQuery("<li></li>");
          if (type === 'checkbox') {
            toggle_button = jQuery('<button type="button" class="toggle_button"  id="' + elid + '"/>');
            recalc = function() {
              toggle_button.toggleClass('active');
              return _this.recalcHTML(contentId);
            };
            toggle_button.html(utils.tr(element));
            toggle_button.bind('click', recalc);
            if (default_value === true) {
              toggle_button.addClass('active');
            }
            el.append(toggle_button);
          } else {
            recalc = function() {
              return _this.recalcHTML(contentId);
            };
            el.append('<label for="' + elid + '">' + utils.tr(element) + '</label>');
            el.append('<input type="' + type + '" id="' + elid + '"/>');
            if (default_value) {
              el.find('input').val(default_value);
            }
            el.find('input').bind('keyup change', recalc);
          }
          return el;
        };
        addButton = function(element, event_handler) {
          var el;
          el = jQuery("<li><button class=\"action_button\" id=\"" + _this.tmpid + element + "\">" + utils.tr(element) + "</button></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        contentAreaUL.append(addInput("number", "rows", "3"));
        contentAreaUL.append(addInput("number", "cols", "3"));
        contentAreaUL.append(addInput("checkbox", "heading", true));
        contentAreaUL.append(addInput("checkbox", "border", true));
        contentAreaUL.append(addButton("apply", function() {
          var sel_cell, table;
          _this.recalcHTML(contentId);
          table = $('#' + _this.tmpid);
          sel_cell = table.find('th:first');
          if (!sel_cell.length) {
            sel_cell = table.find('td:first');
          }
          _this.options.editable.setContentPosition(sel_cell);
          table.removeAttr('id');
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        contentAreaUL.append(addButton("remove", function() {
          _this.options.editable.setContentPosition($('#' + _this.tmpid));
          $('#' + _this.tmpid).remove();
          _this.options.editable.restoreContentPosition();
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        return contentArea;
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'table';
        if (window.action_list && window.action_list['hallojs_table'] !== void 0) {
          button_label = window.action_list['hallojs_table'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'table',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloformula', {
      dropdownform: null,
      tmpid: 0,
      html: null,
      has_mathjax: typeof MathJax !== 'undefined',
      debug: false,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        rows: 6,
        cols: 32,
        buttonCssClass: null,
        "default": '\\zeta(s) = \\sum_{n=1}^\\infty {\\frac{1}{n^s}}',
        mathjax_alternative: 'http://mathurl.com/',
        mathjax_base_alternative: 'http://www.sciweavers.org/free-online-latex-equation-editor',
        mathjax_delim_left: '\\(math\\(',
        mathjax_delim_right: '\\)math\\)',
        mathjax_inline_delim_left: '\\(inline_math\\(',
        mathjax_inline_delim_right: '\\)inline_math\\)',
        inline: true
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function(select_target, target_id) {
          var latex_formula, range, recalc, selected_formula, selection, title;
          if (rangy.getSelection().rangeCount === 0) {
            return;
          }
          _this.options.editable.restoreContentPosition();
          _this._setupUndoWaypoint();
          contentId = target_id;
          _this.tmpid = 'mod_' + (new Date()).getTime();
          selection = rangy.getSelection();
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
          } else {
            range = rangy.createRange();
            range.selectNode(_this.options.editable.element[0]);
            range.collapse();
          }
          _this.cur_formula = null;
          _this.action = 'insert';
          if (typeof select_target === 'object') {
            selected_formula = jQuery(select_target).closest('.formula');
            if (selected_formula.length) {
              _this.cur_formula = selected_formula;
              _this.cur_formula.attr('id', _this.tmpid);
              _this.action = 'update';
            }
          }
          if (_this.action === 'insert') {
            _this.options.editable.element.find('.formula').each(function(index, item) {
              if (selection.containsNode(item, true)) {
                _this.cur_formula = jQuery(item);
                _this.action = 'update';
                return false;
              }
            });
          }
          if (!_this.has_mathjax) {
            return true;
          }
          if (_this.cur_formula && _this.cur_formula.length) {
            latex_formula = decodeURIComponent(_this.cur_formula.attr('rel'));
            title = decodeURIComponent(_this.cur_formula.attr('title'));
            if (_this.debug) {
              console.log('modify', latex_formula, _this.cur_formula);
            }
            $('#' + contentId + 'latex').val(latex_formula);
            $('#' + contentId + 'title').val(title);
            if (_this.cur_formula.hasClass('inline')) {
              $('#' + contentId + 'inline').addClass('active');
            } else {
              $('#' + contentId + 'inline').removeClass('active');
            }
            _this.cur_formula.attr('id', _this.tmpid);
            _this.cur_formula.html('');
          } else {
            _this.cur_formula = jQuery('<span class="formula" id="' + _this.tmpid + '" contenteditable="false"/>');
            _this.cur_formula.find('.formula').attr('rel', encodeURIComponent(_this.options["default"]));
            _this.cur_formula.find('.formula').attr('title', '');
            if (_this.options.inline) {
              _this.cur_formula.find('.formula').addClass('inline');
            }
            _this.options.editable.getSelectionStartNode(function(selection) {
              if (selection.length) {
                _this.cur_formula.insertBefore(selection);
                range.selectNode(_this.cur_formula[0]);
                return rangy.getSelection().setSingleRange(range);
              }
            });
            $('#' + contentId + 'latex').val(_this.options["default"]);
            if (_this.options.inline) {
              $('#' + contentId + 'inline').addClass('active');
            } else {
              $('#' + contentId + 'inline').removeClass('active');
            }
            $('#' + contentId + 'title').val();
            if (_this.debug) {
              console.log('insert', _this.cur_formula);
            }
            _this.updateFormulaHTML(contentId);
          }
          recalc = function() {
            _this.recalcHTML(contentId);
            _this.recalcPreview(contentId);
            return _this.recalcMath();
          };
          window.setTimeout(recalc, 300);
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        this.dropdownform.hallodropdownform('bindShow', '.formula');
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      updateFormulaHTML: function(contentId) {
        var encoded_latex, encoded_title, formula, inline, latex_formula, string, title;
        if (this.debug) {
          console.log('update formula', contentId, this.tmpid, this);
        }
        formula = $('#' + this.tmpid);
        if (!formula.length) {
          console.error('expected identifier not found', this.tmpid);
          console.error(this.options.editable);
          console.error(this.options.editable.element.html());
          return;
        }
        latex_formula = $('#' + contentId + 'latex').val();
        inline = $('#' + contentId + 'inline').hasClass('active');
        title = $('#' + contentId + 'title').val();
        if (this.debug) {
          console.log(latex_formula, inline, title, formula, this.tmpid);
        }
        formula.removeClass('inline');
        formula.html('');
        if (this.has_mathjax) {
          if (inline) {
            string = '<span id="' + this.tmpid + '">' + this.options.mathjax_inline_delim_left + utils.sanitize(latex_formula) + this.options.mathjax_inline_delim_right + '</span>';
            formula.replaceWith(string);
            formula = $('#' + this.tmpid);
            formula.addClass('inline');
          } else {
            string = '<div id="' + this.tmpid + '">' + this.options.mathjax_delim_left + utils.sanitize(latex_formula) + this.options.mathjax_delim_right + '</div>';
            formula.replaceWith(string);
            formula = $('#' + this.tmpid);
          }
          if (this.debug) {
            console.log('FormulaWRAPPING', formula, formula.parents(), formula.contents());
          }
        } else {
          formula.html(latex_formula);
        }
        encoded_latex = encodeURIComponent(latex_formula);
        encoded_title = encodeURIComponent(title);
        formula.addClass('formula');
        formula.attr('rel', encoded_latex);
        formula.attr('title', encoded_title);
        formula.attr('contenteditable', 'false');
        return formula[0].outerHTML;
      },
      recalcMath: function() {
        var _this = this;
        if (this.has_mathjax) {
          this.options.editable.element.find('.formula').each(function(index, formula_item) {
            var formula_node;
            formula_node = jQuery(formula_item);
            if (formula_node.hasClass('inline')) {
              return formula_node.html(_this.options.mathjax_inline_delim_left + utils.sanitize(decodeURIComponent(formula_node.attr('rel'))) + _this.options.mathjax_inline_delim_right);
            } else {
              return formula_node.html(_this.options.mathjax_delim_left + utils.sanitize(decodeURIComponent(formula_node.attr('rel'))) + _this.options.mathjax_delim_right);
            }
          });
          return MathJax.Hub.Queue(['Typeset', MathJax.Hub]);
        }
      },
      recalcHTML: function(contentId) {
        this.html = this.updateFormulaHTML(contentId);
        return this.options.editable.store();
      },
      recalcPreview: function(contentId) {
        var inline, latex_formula, preview;
        preview = jQuery('#' + contentId + ' .preview');
        if (preview.length === 0) {
          return;
        }
        latex_formula = $('#' + contentId + 'latex').val();
        inline = $('#' + contentId + 'inline').hasClass('active');
        if (inline) {
          return preview.html(this.options.mathjax_inline_delim_left + utils.sanitize(latex_formula) + this.options.mathjax_inline_delim_right);
        } else {
          return preview.html(this.options.mathjax_delim_left + utils.sanitize(latex_formula) + this.options.mathjax_delim_right);
        }
      },
      _prepareDropdown: function(contentId) {
        var addArea, addButton, addInput, buttons, buttons_label, buttons_li, contentArea, contentAreaUL, contentInfoText,
          _this = this;
        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        addArea = function(element, default_value) {
          var el, elid, recalc, textarea;
          elid = "" + contentId + element;
          el = jQuery(("<li><label for=\"" + elid + "\">") + utils.tr(element) + ("</label><textarea id=\"" + elid + "\" rows=\"" + _this.options.rows + "\" cols=\"" + _this.options.cols + "\"></textarea></li>"));
          textarea = el.find('textarea');
          textarea.val(default_value);
          recalc = function() {
            _this.recalcHTML(contentId);
            _this.recalcPreview(contentId);
            return _this.recalcMath();
          };
          textarea.bind('keyup change', recalc);
          return el;
        };
        addInput = function(type, element, default_value, recalc_preview) {
          var el, elid, recalc, toggle_button, toggle_button_container;
          elid = "" + contentId + element;
          el = jQuery("<li></li>");
          if (type === 'checkbox') {
            toggle_button = jQuery('<button type="button" class="toggle_button"  id="' + elid + '"/>');
            toggle_button_container = jQuery('<div>');
            toggle_button_container.css({
              'height': '2em'
            });
            recalc = function() {
              toggle_button.toggleClass('active');
              _this.recalcHTML(contentId);
              if (recalc_preview) {
                _this.recalcPreview(contentId);
                return _this.recalcMath();
              }
            };
            toggle_button.html(utils.tr(element));
            toggle_button.bind('click', recalc);
            if (default_value === true) {
              toggle_button.addClass('active');
            }
            toggle_button_container.append(toggle_button);
            el.append(toggle_button_container);
          } else {
            recalc = function() {
              _this.recalcHTML(contentId);
              if (recalc_preview) {
                _this.recalcPreview(contentId);
                return _this.recalcMath();
              }
            };
            el.append('<label for="' + elid + '">' + utils.tr(element) + '</label>');
            el.append('<input type="' + type + '" id="' + elid + '"/>');
            if (default_value) {
              el.find('input').val(default_value);
            }
            el.find('input').bind('keyup change', recalc);
          }
          return el;
        };
        addButton = function(element, event_handler) {
          var el, elid;
          elid = "" + contentId + element;
          el = jQuery("<button class=\"action_button\" id=\"" + _this.elid + "\">" + utils.tr(element) + "</button>");
          el.bind('click', event_handler);
          return el;
        };
        if (this.has_mathjax) {
          contentAreaUL.append(addInput("text", "title", this.options.title, false));
          contentAreaUL.append(addArea("latex", this.options["default"]));
          contentInfoText = jQuery('<li><label for="' + contentId + 'formula">' + utils.tr('preview') + '</label><span class="formula preview">' + this.options.mathjax_delim_left + this.options["default"] + this.options.mathjax_delim_right + '</span><span class="formula preview_over"></span></li>');
          contentInfoText.find('.preview_over').bind('click', function(event) {
            return event.preventDefault();
          });
          contentAreaUL.append(contentInfoText);
          contentAreaUL.append(addInput("checkbox", "inline", this.options.inline, true));
          buttons = jQuery('<div>');
          buttons_li = jQuery('<li></li>').append('<label></label>');
          buttons_label = buttons_li.find('>label');
          buttons_label.after(addButton('compose formula', function() {
            return wke.openUrlInBrowser(_this.options.mathjax_alternative + '?latex=' + $('#' + contentId + 'latex').val());
          }));
          buttons.append(buttons_li);
        } else {
          buttons = jQuery('<div>');
          buttons_li = jQuery('<li></li>').append('<label></label>');
          buttons_label = buttons_li.find('>label');
          buttons_label.after(addButton('compose formula', function() {
            return wke.openUrlInBrowser(_this.options.mathjax_alternative);
          }));
          buttons.append(buttons_li);
          buttons_li = $('<li></li>').append('<label></label>');
          buttons_label = buttons_li.find('>label');
          buttons_label.after(addButton('compose formula base', function() {
            return wke.openUrlInBrowser(_this.options.mathjax_base_alternative);
          }));
          buttons.append(buttons_li);
        }
        buttons.find('button').addClass('external_button');
        contentAreaUL.append(buttons.children());
        buttons = jQuery('<li>');
        buttons.append(addButton("apply", function() {
          var formula, formulas;
          _this.recalcHTML(contentId);
          _this.recalcMath();
          _this._setupUndoWaypoint();
          formula = $('#' + _this.tmpid);
          if (formula.length) {
            if (!formula[0].nextSibling) {
              jQuery('<br/>').insertAfter(formula);
            }
            formula.removeAttr('id');
          } else {
            formulas = $('.formula').each(function(index, item) {
              return jQuery(item).removeAttr('id');
            });
          }
          _this._commitUndoWaypoint();
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        buttons.append(addButton("remove", function() {
          _this._setupUndoWaypoint();
          $('#' + _this.tmpid).remove();
          _this._commitUndoWaypoint();
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        contentAreaUL.append(buttons);
        return contentArea;
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'formula';
        if (window.action_list && window.action_list['hallojs_formula'] !== void 0) {
          button_label = window.action_list['hallojs_formula'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'formula',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      },
      _setupUndoWaypoint: function() {
        var current_undo_stack, postdo_handler,
          _this = this;
        this.options.editable.undoWaypointStart('formula');
        postdo_handler = function() {
          return _this.recalcMath();
        };
        this.options.editable._current_undo_command.postdo = postdo_handler;
        current_undo_stack = this.options.editable.undoWaypointLoad(this.options.editable.element);
        if (current_undo_stack.canUndo() && current_undo_stack.index() > 0) {
          current_undo_stack.command(current_undo_stack.index()).postdo = postdo_handler;
        }
        if (current_undo_stack.canRedo() && current_undo_stack.index() > 1) {
          return current_undo_stack.command(current_undo_stack.index() + 1).postdo = postdo_handler;
        }
      },
      _commitUndoWaypoint: function() {
        return this.options.editable.undoWaypointCommit();
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallocleanup', {
      dropdownform: null,
      tmpid: 0,
      html: null,
      debug: false,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['rows', 'cols', 'border'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function() {
          if (_this.debug) {
            console.log('check nugget');
          }
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var addButton, contentArea, contentAreaUL,
          _this = this;
        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        addButton = function(element, event_handler) {
          var button_label, button_tooltip, el;
          button_label = element;
          button_tooltip = element;
          if (window.action_list && window.action_list['hallojs_cleanup_' + element] !== void 0) {
            button_label = window.action_list['hallojs_cleanup_' + element].title;
            button_tooltip = window.action_list['hallojs_cleanup_' + element].tooltip;
          }
          el = jQuery("<li><div><button class=\"action_button\" id=\"" + _this.tmpid + element + "\" title=\"" + button_tooltip + "\">" + button_label + "</button></div></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        contentAreaUL.append(addButton("clean_html", function() {
          var dom, nugget;
          _this.options.editable.storeContentPosition();
          _this.options.editable.undoWaypointStart('cleanup');
          if (_this.debug) {
            console.log('cleanhtml');
          }
          dom = new IDOM();
          nugget = new DOMNugget();
          if (dom) {
            nugget.prepareTextForEdit(_this.options.editable.element);
            _this.options.editable.element.html(_this.options.editable.element.html().replace(/&nbsp;/g, ' '));
          }
          _this.dropdownform.hallodropdownform('hideForm');
          _this.options.editable.store();
          return nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
            return nugget.resetCitations(_this.options.editable.element).done(function() {
              _this.options.editable.restoreContentPosition();
              _this.options.editable.undoWaypointCommit();
              if (typeof MathJax !== 'undefined') {
                return MathJax.Hub.Queue(['Typeset', MathJax.Hub]);
              }
            });
          });
        }));
        contentAreaUL.append(addButton("clean_plain", function() {
          var dom, nugget;
          _this.options.editable.storeContentPosition();
          _this.options.editable.undoWaypointStart('cleanup');
          dom = new IDOM();
          nugget = new DOMNugget();
          nugget.prepareTextForEdit(_this.options.editable.element);
          dom.plainTextParagraphs(_this.options.editable.element);
          _this.options.editable.store();
          nugget.prepareTextForEdit(_this.options.editable.element);
          _this.dropdownform.hallodropdownform('hideForm');
          nugget = new DOMNugget();
          return nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
            return nugget.resetCitations(_this.options.editable.element).done(function() {
              _this.options.editable.restoreContentPosition();
              _this.options.editable.undoWaypointCommit();
              if (typeof MathJax !== 'undefined') {
                return MathJax.Hub.Queue(['Typeset', MathJax.Hub]);
              }
            });
          });
        }));
        return contentArea;
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'cleanup';
        if (window.action_list && window.action_list['hallojs_cleanup'] !== void 0) {
          button_label = window.action_list['hallojs_cleanup'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'cleanup',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloblock', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['h1', 'h2', 'h3', 'p'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, target;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        buttonset.append(target);
        buttonset.append(this._prepareButton(target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var addElement, containingElement, contentArea, element, _i, _len, _ref,
          _this = this;
        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        containingElement = this.options.editable.element.get(0).tagName.toLowerCase();
        addElement = function(element) {
          var el, queryState;
          el = jQuery("<button class='blockselector'>" + element + "</button>");
          if (containingElement === element) {
            el.addClass('selected');
          }
          if (containingElement !== 'div') {
            el.addClass('disabled');
          }
          el.bind('click', function() {
            if (el.hasClass('disabled')) {
              return;
            }
            if (element === 'none') {
              _this.options.editable.execute('removeFormat');
              return;
            }
            if (navigator.appName === 'Microsoft Internet Explorer') {
              return _this.options.editable.execute('FormatBlock', '<' + element.toUpperCase() + '>');
            } else {
              return _this.options.editable.execute('formatBlock', element.toUpperCase());
            }
          });
          queryState = function(event) {
            var block;
            block = document.queryCommandValue('formatBlock');
            if (block.toLowerCase() === element) {
              el.addClass('selected');
              return;
            }
            return el.removeClass('selected');
          };
          _this.options.editable.element.bind('keyup paste change mouseup', queryState);
          _this.options.editable.element.bind('halloenabled', function() {
            return _this.options.editable.element.bind('keyup paste change mouseup', queryState);
          });
          _this.options.editable.element.bind('hallodisabled', function() {
            return _this.options.editable.element.unbind('keyup paste change mouseup', queryState);
          });
          return el;
        };
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          contentArea.append(addElement(element));
        }
        return contentArea;
      },
      _prepareButton: function(target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'block';
        if (window.action_list && window.action_list['hallojs_block'] !== void 0) {
          button_label = window.action_list['hallojs_block'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'block',
          icon: 'icon-text-height',
          target: target,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallocharacterselect', {
      dropdownform: null,
      dropdownsubform: null,
      debug: true,
      tmpid: 0,
      selected_row: null,
      selected_cell: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function(select_target, target_id) {
          var range, selection;
          contentId = target_id;
          if (_this.debug) {
            console.log('setup characterselect form', select_target, target_id);
          }
          if (rangy.getSelection().rangeCount === 0 && typeof select_target === 'undefined') {
            return;
          }
          _this.options.editable.undoWaypointStart('character');
          _this.tmpid = 'mod_' + (new Date()).getTime();
          _this.selected_text = '';
          selection = rangy.getSelection();
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
            _this.selected_text = $(range.cloneContents()).text();
            range.deleteContents();
          } else {
            range = rangy.createRange();
            range.selectNode(_this.options.editable.element[0]);
            range.collapse();
          }
          _this.original_selected_text = _this.selected_text;
          _this.cur_characters = jQuery('<span class="characters">');
          _this.cur_characters.attr('id', _this.tmpid);
          _this.cur_characters.text(_this.original_selected_text);
          _this.options.editable.getSelectionStartNode(function(insert_position) {
            if (insert_position.length) {
              return _this.cur_characters.insertBefore(insert_position);
            } else {
              return _this.options.editable.append(_this.cur_characters);
            }
          });
          _this._setupForm(contentId);
          jQuery('#' + contentId).unbind('hide', jQuery.proxy(_this._destroyForm, _this));
          jQuery('#' + contentId).bind('hide', jQuery.proxy(_this._destroyForm, _this));
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var addButton, contentArea, contentAreaUL,
          _this = this;
        contentArea = jQuery('<div id="' + contentId + '"><div class="subform"></div><ul></ul></div>');
        contentAreaUL = contentArea.find('ul');
        this.dropdownsubform = contentArea.find('.subform');
        addButton = function(element, event_handler) {
          var el, elid;
          elid = "" + contentId + element;
          el = jQuery("<li><button class=\"action_button\" id=\"" + _this.elid + "\" title=\"" + utils.tr_action_tooltip(element) + "\">" + utils.tr_action_title(element) + "</button></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        contentAreaUL.append(addButton("Insert", function() {
          _this.cur_characters.text(_this.dropdownsubform.characterSelect('value'));
          _this.options.editable.setContentPosition(_this.cur_characters);
          _this.cur_characters.removeAttr('id');
          _this.cur_characters.contents().unwrap();
          _this.options.editable.undoWaypointCommit();
          _this.dropdownsubform.characterSelect('destroy');
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        contentAreaUL.append(addButton("Cancel", function() {
          _this.cur_characters.text(_this.original_selected_text);
          _this.options.editable.setContentPosition(_this.cur_characters);
          _this.cur_characters.removeAttr('id');
          _this.cur_characters.contents().unwrap();
          _this.options.editable.undoWaypointCommit();
          _this.dropdownsubform.characterSelect('destroy');
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        return contentArea;
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'characterselect';
        if (window.action_list && window.action_list['hallojs_characterselect'] !== void 0) {
          button_label = window.action_list['hallojs_characterselect'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'characterselect',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      },
      _destroyForm: function() {
        return this.dropdownsubform.characterSelect('destroy');
      },
      _setupForm: function(contentId) {
        var plugin_options;
        plugin_options = {
          characters: this.selected_text
        };
        this.dropdownsubform = $('#' + contentId + ' .subform');
        jQuery('select').selectBox('destroy');
        jQuery('.selectbox-dropdown-menu').remove();
        this.dropdownsubform.characterSelect(plugin_options);
        return this.dropdownsubform.characterSelect('render');
      }
    });
  })(jQuery);

  jQuery.extend(jQuery.fn, {
    selectText: function() {
      var element, range, selection;
      element = this[0];
      if (document.body.createTextRange) {
        range = document.body.createTextRange();
        range.moveToElementText(element);
        return range.select();
      } else if (rangy.getSelection) {
        selection = rangy.getSelection();
        range = rangy.createRange();
        range.selectNodeContents(element);
        return selection.setSingleRange(range);
      }
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.citehandler = (function() {
    var _instance;

    function citehandler() {}

    _instance = void 0;

    window.citehandler = citehandler;

    citehandler.get = function(args) {
      return _instance != null ? _instance : _instance = new _Citehandler(args);
    };

    return citehandler;

  })();

  _Citehandler = (function() {
    _Citehandler.prototype.tips = null;

    _Citehandler.prototype.editable = null;

    _Citehandler.prototype.tipping_element = null;

    _Citehandler.prototype.tip_element = null;

    function _Citehandler(args) {
      this.args = args;
      this._removeAction = __bind(this._removeAction, this);
      this._sourcedescriptioneditorAction = __bind(this._sourcedescriptioneditorAction, this);
      this.settings = {};
      this.citation_data = {};
      this.tips = jQuery('<span></span>');
      this.overlay_id = 'cite_overlay';
      this._makeTip();
    }

    _Citehandler.prototype.setupSourceDescriptions = function(target, editable, add_element_cb) {
      var domnugget,
        _this = this;
      target.find('.SourceDescription').remove();
      domnugget = new DOMNugget();
      return domnugget.getSourceDescriptions(editable.element.closest('.nugget')).done(function(sourcedescriptions) {
        return jQuery.each(sourcedescriptions, function(index, item) {
          return target.append(add_element_cb(item.title, null, item.type, item.loid).addClass('SourceDescription'));
        });
      });
    };

    _Citehandler.prototype._updateSettings = function() {
      var _this = this;
      if (omc_settings) {
        return omc_settings.getSettings().done(function(current_settings) {
          return _this.settings = current_settings;
        });
      }
    };

    _Citehandler.prototype._sync_editable = function(element, change_focus) {
      var tip_nugget;
      this.editable = window.hallo_current_instance.editable;
      tip_nugget = element.closest('.nugget');
      if (this.editable && this.editable.closest('.nugget')[0] !== tip_nugget) {
        this.editable = null;
      }
      if (typeof this.editable === 'undefined' || !this.editable) {
        this.editable = {};
        this.editable.element = element.closest('[contenteditable="true"]');
        if (!this.editable.element.length) {
          this.editable.element = element.closest('.nugget').find('>.content').eq(0);
        }
        this.editable.is_auto_editable = true;
        if (change_focus) {
          this.editable.element.hallo('enable');
          this.editable.element.focus();
        }
        return this.editable.nugget_only = true;
      }
    };

    _Citehandler.prototype._makeTip = function() {
      var citation_processor, is_auto_cite, nugget,
        _this = this;
      this._updateSettings();
      is_auto_cite = false;
      if (typeof this.editable === 'object' && null !== this.editable && this.editable.element) {
        if (this.tipping_element.closest('.Z3988').hasClass('auto-cite')) {
          is_auto_cite = true;
        }
      }
      if (window.citeproc) {
        citation_processor = window.citeproc;
      } else {
        citation_processor = new ICiteProc();
      }
      nugget = new DOMNugget();
      return jQuery('body').citationPopup({
        citation_processor: citation_processor,
        class_name: 'hallo_sourcedescription_popup',
        goto_action: function(publication_loid) {
          return occ.GotoObject(publication_loid);
        },
        goto_url_action: function(url) {
          return wke.openUrlInBrowser(url);
        },
        goto_file_action: function(filename) {
          return utils.correctAndOpenFilePath(filename);
        },
        save_action: jQuery.proxy(nugget.addSourceDescription, nugget),
        edit_action: jQuery.proxy(this._sourcedescriptioneditorAction, this),
        remove_action: jQuery.proxy(this._removeAction, this),
        remove_from_nugget_action: jQuery.proxy(this._removeAction, this),
        get_source_description_data: jQuery.proxy(nugget.getSourceDescriptionData, nugget),
        citation_selector: '.cite'
      });
    };

    _Citehandler.prototype._sourcedescriptioneditorAction = function(citation_data, tip_element, tipping_element) {
      var dom_nugget, undo_stack, wpid;
      this._sync_editable(tipping_element, true);
      dom_nugget = tipping_element.closest('.nugget');
      if (typeof UndoManager !== 'undefined' && typeof this.editable.undoWaypointIdentifier === 'function') {
        wpid = this.editable.undoWaypointIdentifier(dom_nugget);
        undo_stack = (new UndoManager()).getStack(wpid);
        undo_stack.clear();
      }
      return jQuery('body').hallosourcedescriptioneditor({
        'loid': citation_data.loid,
        'data': citation_data,
        'element': tipping_element,
        'tip_element': tip_element,
        'back': true,
        'nugget_loid': this.editable.element.closest('.Text').attr('id')
      });
    };

    _Citehandler.prototype._removeAction = function(citation_data, tip_element, tipping_element) {
      var citation, citation_html, cite, dom_nugget, is_auto_cite, loid, nugget, publication_loid, sd_loid, undo_stack, wpid,
        _this = this;
      nugget = new DOMNugget();
      this._sync_editable(tipping_element, true);
      loid = tipping_element.closest('.cite').attr('class').replace(/^.*sourcedescription-(\d*).*$/, '$1');
      citation = tipping_element.closest('.cite').prev('.citation');
      is_auto_cite = tipping_element.closest('.cite').hasClass('auto-cite');
      citation_html = '';
      if (!citation_data.processed) {
        loid = tipping_element.closest('.cite').attr('class').replace(/^.*sourcedescription-(\d*).*$/, '$1');
        citation = tipping_element.closest('.cite').prev('.citation');
        if (citation.length) {
          citation_html = citation.html();
          citation.contents().unwrap();
        }
        if ((tipping_element.closest('.cite').length)) {
          cite = tipping_element.closest('.cite');
          cite.remove();
        }
        jQuery('#' + this.overlay_id).remove();
        return;
      }
      if (citation.length) {
        citation_html = citation.html();
        citation.contents().unwrap();
      }
      if (is_auto_cite) {
        sd_loid = citation_data.loid;
        nugget.removeSourceDescription(this.editable.element, sd_loid);
      }
      if ((tipping_element.closest('.cite').length)) {
        cite = tipping_element.closest('.cite');
        cite.remove();
        $('.sourcedescription-' + loid).prev('.citation').replaceWith(citation_html);
        $('.sourcedescription-' + loid).remove();
        $('.cite').attr('contenteditable', false);
        this.editable.element.hallo('enable');
        this.editable.element.focus();
        this.editable.element.hallo('setModified');
        this.editable.element.blur();
      }
      jQuery('#' + this.overlay_id).remove();
      if (is_auto_cite) {
        publication_loid = citation_data.ploid;
        dom_nugget = this.editable.element.closest('.nugget');
        if (typeof UndoManager !== 'undefined' && typeof this.editable.undoWaypointIdentifier === 'function') {
          wpid = this.editable.undoWaypointIdentifier(dom_nugget);
          undo_stack = (new UndoManager()).getStack(wpid);
          undo_stack.clear();
        }
      }
      if (this.editable.element) {
        this.editable.element.closest('.nugget').find('.auto-cite').remove();
        nugget.prepareTextForEdit(this.editable.element);
        return nugget.updateSourceDescriptionData(this.editable.element).done(function() {
          return nugget.resetCitations(_this.editable.element).done(function() {
            if (typeof MathJax !== 'undefined') {
              return MathJax.Hub.Queue(['Typeset', MathJax.Hub]);
            }
          });
        });
      }
    };

    return _Citehandler;

  })();

  (function(jQuery) {
    return jQuery.widget('IKS.hallonuggetselector', {
      widget: null,
      selectables: '',
      hyperlink: null,
      options: {
        editable: null,
        hyperlink_class: null,
        range: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        data: null,
        loid: null,
        has_changed: false,
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var _this = this;
        this.widget = jQuery('<div id="nugget_selector"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.hide();
        this.widget.append('<div id="nugget_list" style="background-color:white; margin-bottom: 4px"></div>');
        this.widget.append('<button class="nugget_selector_back action_button">' + utils.tr('back') + '</button>');
        this.widget.append('<button class="nugget_selector_apply action_button">' + utils.tr('apply') + '</button>');
        this.hyperlink = this.options.editable.element.find('.' + this.options.hyperlink_class);
        this.widget.css(this.options.default_css);
        this.widget.find('.nugget_selector_back').bind('click', function() {
          _this.hyperlink = _this.options.editable.element.find('.' + _this.options.hyperlink_class);
          if (utils.tr('no title provided') === _this.hyperlink.text()) {
            _this.hyperlink.remove();
          } else {
            _this.hyperlink.contents().unwrap().wrapAll('<span></span>');
          }
          return _this.back();
        });
        this.widget.find('.nugget_selector_apply').bind('click', function() {
          return _this.apply();
        });
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery('body').width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        this.list = new List();
        this.list.setupItemActions({
          'node_dblclick': function(node) {
            _this.select(node);
            return _this.apply();
          },
          'node_select': function(node) {
            return _this.select(node);
          }
        });
        this.list.init($('#nugget_list'), omc.NuggetExtendList);
        this.widget.fadeIn();
        return jQuery(window).resize();
      },
      apply: function() {
        var dfo, nugget_loid,
          _this = this;
        if (typeof this.current_node === 'undefined') {
          utils.error(utils.tr('nothing selected'));
          return;
        }
        nugget_loid = this.current_node.replace(/node_/, '');
        dfo = omc.getInstance(nugget_loid);
        dfo.fail(function(error) {
          return _this.back();
        });
        return dfo.done(function(nugget) {
          var data, new_href;
          data = nugget.loid;
          new_href = 'refeus://localhost/database/self/Variation/' + nugget.guid;
          _this.hyperlink = _this.options.editable.element.find('.' + _this.options.hyperlink_class);
          _this.hyperlink.attr('href', new_href);
          if (_this.hyperlink.text() === utils.tr('no title provided')) {
            _this.hyperlink.text(nugget.display_name);
          }
          return _this.back();
        });
      },
      back: function() {
        var _this = this;
        this.widget.fadeOut(100, function() {
          return _this.widget.remove();
        });
        this.hyperlink = this.options.editable.element.find('.' + this.options.hyperlink_class);
        if (this.hyperlink.length) {
          this.hyperlink.removeClass(this.options.hyperlink_class);
          console.log(this.options.editable.element.html());
          this.options.editable.element.find('.nugget_select_target').removeClass('nugget_select_target');
          this.options.editable.element.find('a').each(function(index, item) {
            var link, link_class;
            link = jQuery(item);
            link_class = link.attr('class');
            if (typeof link_class === 'undefined') {
              return;
            }
            link_class = link_class.replace(/mod_[0-9]*/, '');
            if (link_class === '') {
              return link.removeAttr('class');
            } else {
              return link.attr('class', link_class);
            }
          });
          this.options.editable.setContentPosition(this.hyperlink);
        }
        jQuery('body').css({
          'overflow': 'auto'
        });
        this.options.editable.store();
        return this.options.editable.restoreContentPosition();
      },
      select: function(node) {
        this.current_node = jQuery(node).attr('id');
        return this.current_node_label = jQuery(node).text();
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallosourcedescriptioneditor', {
      widget: null,
      selectables: '',
      scroll_pos_before_show: 0,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        back: true,
        data: null,
        loid: null,
        nugget_loid: null,
        has_changed: false,
        publication: {},
        values: {},
        orig_values: {},
        default_css: {
          'top': 0,
          'left': 0,
          'bottom': 0,
          'right': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var inputs, nugget, target_nugget,
          _this = this;
        if (this.options.tip_element && typeof this.options.tip_element.data().api !== 'undefined') {
          this.options.tip_element.qtip('hide');
        }
        if (jQuery('.selectBox-dropdown-menu').length) {
          jQuery('.selectBox-dropdown-menu').remove();
        }
        if (jQuery('#cite_editor').length) {
          jQuery('#cite_editor').remove();
        }
        inputs = jQuery('<div id="cite_editor_inputs"></div>');
        this.widget = jQuery('<div id="cite_editor"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.css(this.options.default_css);
        this.scroll_pos_before_show = jQuery(window).scrollTop();
        jQuery('#content, #toolbar').hide();
        target_nugget = jQuery('#' + this.options.nugget_loid);
        nugget = new DOMNugget();
        nugget.getAllSourceDescriptionAttributes(target_nugget, this.options.loid).done(function(sdi) {
          var needs_number_of_pages, str_html_buttons;
          _this.options.publication = sdi.publication;
          _this.selectables = '<option value="">' + utils.tr('more') + '</option>';
          needs_number_of_pages = false;
          if (sdi.publication.instance_type_definition === 'PubBook' || sdi.publication.instance_type_definition === 'PubBookSection' || sdi.publication.instance_type_definition === 'PubJournalArticle' || sdi.publication.instance_type_definition === 'PubMagazineArticle' || sdi.publication.instance_type_definition === 'PubEncyclopediaArticle' || sdi.publication.instance_type_definition === 'PubConferencePaper' || sdi.publication.instance_type_definition === 'PubNewspaperArticle') {
            needs_number_of_pages = true;
          }
          jQuery.each(constants.publication_order[sdi.publication.instance_type_definition], function(index, attribute_name) {
            var qvalue;
            if (attribute_name === '__AUTOIDENT' || attribute_name === 'loid' || attribute_name === 'type' || attribute_name === 'tr_title' || attribute_name === 'related_persons') {
              return;
            }
            if (typeof sdi.instance[attribute_name] === 'undefined') {
              return;
            }
            if (typeof sdi.description[attribute_name] !== 'object' || !sdi.description[attribute_name].label) {
              return;
            }
            qvalue = sdi.instance[attribute_name];
            if (qvalue === '') {
              if (needs_number_of_pages && attribute_name === 'page') {
                return inputs.append(_this._createInput(attribute_name, sdi.description[attribute_name].label, qvalue));
              } else if (attribute_name === 'notes' | attribute_name === 'notes') {
                return inputs.append(_this._createInput(attribute_name, sdi.description[attribute_name].label, qvalue));
              }
            } else {
              return inputs.append(_this._createInput(attribute_name, sdi.description[attribute_name].label, qvalue));
            }
          });
          inputs.append('<div class="info_text"><p>' + utils.uiString('sourcedescription information') + '</p></div>');
          _this.widget.append(inputs);
          str_html_buttons = '';
          if (_this.options.back) {
            str_html_buttons = '<button id="sourcedescriptioneditor_back" class="action_button">' + utils.tr('back') + '</button>';
          }
          str_html_buttons += '<button id="sourcedescriptioneditor_apply" class="action_button">' + utils.tr('apply') + '</button>';
          str_html_buttons += '<button id="sourcedescriptioneditor_goto" class="action_button">' + utils.tr('goto') + '</button>';
          _this.widget.append('<div class="button_container">' + str_html_buttons + '</div>');
          jQuery(window).resize();
          jQuery('#sourcedescriptioneditor_apply').bind('click', function() {
            var loid, nugget_loid, orig_values, undo_command, undo_manager, values;
            _this.widget.focus();
            values = jQuery.extend({}, _this.options.values);
            orig_values = jQuery.extend({}, _this.options.orig_values);
            _this.options.values = {};
            _this.options.orig_values = {};
            loid = _this.options.loid;
            nugget_loid = _this.options.nugget_loid;
            if (typeof window.__current_undo_command !== 'undefined') {
              undo_command = window.__current_undo_command;
            } else {
              if (typeof UndoCommand !== 'undefined') {
                undo_command = new UndoCommand();
              } else {
                undo_command = {};
              }
            }
            undo_command.redo = function(event) {
              var dfdlist;
              undo_command.dfd = jQuery.Deferred();
              dfdlist = [];
              jQuery.each(values, function(key, value) {
                return dfdlist.push(nugget.storePublicationDescriptionAttribute(jQuery('#' + nugget_loid), loid, key, value));
              });
              jQuery.when(dfdlist).done(function() {
                return undo_command.dfd.resolve();
              });
              undo_command.dfd.promise();
              return undo_command.postdo();
            };
            undo_command.undo = function(event) {
              var dfdlist;
              undo_command.dfd = jQuery.Deferred();
              dfdlist = [];
              jQuery.each(orig_values, function(key, value) {
                return dfdlist.push(nugget.storePublicationDescriptionAttribute(jQuery('#' + nugget_loid), loid, key, value));
              });
              jQuery.when.apply(jQuery, dfdlist).done(function() {
                return undo_command.dfd.resolve();
              });
              undo_command.dfd.promise();
              return undo_command.postdo();
            };
            undo_command.postdo = function() {
              return undo_command.dfd.done(function() {
                var update_nugget;
                if (nugget_loid) {
                  update_nugget = jQuery('#' + nugget_loid);
                  return nugget.updateSourceDescriptionData(update_nugget).done(function() {
                    nugget.resetCitations(update_nugget);
                    return occ.UpdateNuggetSourceDescriptions({
                      loid: nugget_loid
                    });
                  });
                }
              });
            };
            undo_command.redo();
            undo_manager = (new UndoManager()).getStack();
            return _this._cleanup();
          });
          jQuery('#sourcedescriptioneditor_back').bind('click', function() {
            _this.options.values = {};
            _this.options.orig_values = {};
            return _this._cleanup();
          });
          jQuery('#sourcedescriptioneditor_goto').bind('click', function() {
            if (typeof _this.options.publication !== 'object' || parseInt(_this.options.publication.publication_loid, 10) === 0) {
              jQuery('#sourcedescriptioneditor_goto').hide();
            }
            occ.GotoObject(_this.options.publication.publication_loid);
            _this.options.values = {};
            _this.options.orig_values = {};
            return _this._cleanup();
          });
          return window.setTimeout(function() {
            var page_sum, pages;
            jQuery(window).resize();
            if ((_this.widget.find('#page').length)) {
              pages = _this.widget.find('#page');
              if (typeof _this.options.publication.page !== 'undefined' && _this.options.publication.page !== '') {
                page_sum = jQuery('<span class="sum_pages">');
                page_sum.text(' (' + _this.options.publication.publication_pages + ')');
                pages.closest('div').find('label .sum_pages').remove();
                pages.closest('div').find('label').append(page_sum);
              }
              if (_this.widget.find('#page').val() === _this.options.publication.publication_pages) {
                pages.val('');
                return pages[0].focus();
              }
            }
          }, 100);
        });
        return jQuery(window).resize();
      },
      _cleanup: function() {
        this.widget.remove();
        jQuery('.form_display').remove();
        jQuery('#content, #toolbar').show();
        jQuery('body').css({
          'overflow': 'auto'
        });
        jQuery(window).scrollTop(this.scroll_pos_before_show);
        if (this.options.editable) {
          this.options.editable.focus();
        }
        if (jQuery('#' + this.options.nugget_loid).closest('.Document').length && typeof wkej === 'object' && typeof wkej.instance === 'object' && typeof wkej.instance.doc === 'object') {
          return wkej.instance.doc.updateView();
        }
      },
      _createInput: function(identifier, label, value) {
        var dp, fn_dp_show, fn_update_select, input, input_multiline, input_singleline, row,
          _this = this;
        label = jQuery('<label for="' + identifier + '">' + label + '</label>');
        input_singleline = jQuery('<input id="' + identifier + '" type="text" value="<!--user-data-->" class="max_width"/>');
        input_multiline = jQuery('<textarea id="' + identifier + '" class="max_width" rows="5"><!--user-data--></textarea>');
        row = jQuery('<div></div>');
        row.append(label);
        if (identifier === 'abstract' || identifier === 'extra' || identifier === 'notes') {
          input = input_multiline;
          input.text(value);
        } else {
          input = input_singleline;
          input.val(value);
        }
        if (identifier === 'number_of_pages' || identifier === 'notes' || identifier === 'running_time' || identifier === 'code_volume' || identifier === 'code_pages' || identifier === 'code_sections') {
          label.addClass('persistent_sourcedescription_attribute');
        } else {
          input.attr('disabled', 'true');
        }
        row.append(input);
        if (jQuery.datepicker && (identifier === 'date' || 'identifier' === 'accessed')) {
          fn_dp_show = function() {
            $('.ui-datepicker-month').selectBox();
            return $('.ui-datepicker-year').selectBox();
          };
          fn_update_select = function() {
            return window.setTimeout(fn_dp_show, 100);
          };
          dp = input.datepicker({
            showOn: "button",
            onChangeMonthYear: fn_update_select,
            beforeShow: fn_update_select,
            buttonImage: "../icons/actions/datepicker-p.png",
            buttonImageOnly: true,
            dateFormat: "yy-mm-dd",
            changeMonth: false,
            changeYear: false,
            constrainInput: false
          });
        }
        input.bind('blur', function(event) {
          return _this._formChanged(event, _this.options);
        });
        this.options.orig_values[identifier] = value;
        return row;
      },
      _formChanged: function(event, options) {
        var data, from, path, publication_page_from_to_match, publication_page_over_match, publication_page_to_match, sd_from, sd_to, sourcedescription_from_to_match, sourcedescription_over_match, sourcedescription_to_match, target, to;
        target = jQuery(event.target);
        path = target.attr('id');
        data = target.val();
        if (omc && options.loid) {
          options.values[path] = data;
        }
        if (path.indexOf("page") === 0 && data !== '' && typeof data === 'string') {
          if (typeof options.publication !== 'object' || typeof options.publication.publication_pages !== 'string') {
            return null;
          }
          publication_page_from_to_match = options.publication.publication_pages.match(/^(\d*)-(\d*)$/);
          sourcedescription_from_to_match = data.match(/^(\d*)-(\d*)$/);
          publication_page_to_match = options.publication.publication_pages.match(/^(\d*)$/);
          sourcedescription_to_match = data.match(/^(\d*)$/);
          publication_page_over_match = options.publication.publication_pages.match(/^(\d+)[^-\d]+$/);
          sourcedescription_over_match = data.match(/^(\d+)[^-\d]+$/);
          from = 0;
          to = 0;
          sd_from = 0;
          sd_to = 0;
          if (publication_page_from_to_match !== null) {
            from = parseInt(publication_page_from_to_match[1], 10);
            to = parseInt(publication_page_from_to_match[2], 10);
          } else if (publication_page_to_match !== null) {
            to = parseInt(publication_page_to_match[1], 10);
          } else if (publication_page_over_match !== null) {
            from = parseInt(publication_page_over_match[1], 10);
            to = Infinity;
          } else {
            from = 0;
            to = Infinity;
          }
          if (sourcedescription_from_to_match !== null) {
            sd_from = parseInt(sourcedescription_from_to_match[1], 10);
            sd_to = parseInt(sourcedescription_from_to_match[2], 10);
          } else if (sourcedescription_to_match !== null) {
            sd_to = parseInt(sourcedescription_to_match[1], 10);
            sd_from = sd_to;
          } else if (sourcedescription_over_match !== null) {
            sd_from = parseInt(sourcedescription_over_match[1], 10);
            sd_to = sd_from;
          } else {
            return jQuery('#' + path).attr('class', 'unparseable');
          }
          if (sd_from < from || sd_to > to) {
            utils.info(utils.tr('number_of_pages not in range'));
            return jQuery('#' + path).attr('class', 'invalid');
          } else {
            return jQuery('#' + path).attr('class', 'valid');
          }
        }
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloquoteselector', {
      widget: null,
      selectables: '',
      activity: {
        step: 0,
        publication: 0,
        publication_label: '',
        nugget: 0,
        nugget_label: ''
      },
      options: {
        editable: null,
        range: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        data: null,
        loid: null,
        has_changed: false,
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var _this = this;
        this.widget = jQuery('<div id="quote_selector"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.append('<div id="informationcontainer"><div id="information"></div></div>');
        this.widget.append('<div id="publication_list"></div>');
        this.widget.append('<div id="nugget_list"></div>');
        this.widget.append('<div id="nugget_content"></div>');
        this.widget.append('<button class="quote_selector_back action_button">' + utils.tr('back') + '</button>');
        this.widget.append('<button class="quote_selector_next action_button">' + utils.tr('next') + '</button>');
        this.widget.append('<button class="quote_selector_apply action_button">' + utils.tr('apply') + '</button>');
        this.widget.css(this.options.default_css);
        this.widget.find('.quote_selector_back').bind('click', function() {
          return _this.back();
        });
        this.widget.find('.quote_selector_next').bind('click', function() {
          return _this.next();
        });
        this.widget.find('.quote_selector_apply').bind('click', function() {
          return _this.apply();
        });
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery('body').width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        this.loadPublications();
        jQuery(window).resize();
        this.activity.step = 0;
        this.updateButtons;
        return this.updateInformation();
      },
      updateButtons: function() {
        if (this.activity.step === 2) {
          this.widget.find('.quote_selector_next').hide();
          return this.widget.find('.quote_selector_apply').show();
        } else {
          this.widget.find('.quote_selector_next').show();
          return this.widget.find('.quote_selector_apply').hide();
        }
      },
      updateInformation: function() {
        if (this.activity.step === 0) {
          jQuery('#information').html(utils.tr('activity quote select publication'));
        }
        if (this.activity.step === 1) {
          jQuery('#information').html(utils.tr('activity quote select nugget'));
        }
        if (this.activity.step === 2) {
          return jQuery('#information').html(utils.tr('activity quote select nugget text'));
        }
      },
      apply: function() {
        var nugget,
          _this = this;
        nugget = new DOMNugget();
        nugget.createNewVersion(this.activity.nugget, this.activity.selection).done(function(new_version) {
          return nugget.split(_this.options.editable.element, _this.options.editable.element.find('.selection'), new_version.loid).done(function(loids) {
            console.log(loids);
            return console.log('TODO: update document');
          });
        });
        return this.cleanup();
      },
      cleanup: function() {
        this.widget.remove();
        return jQuery('body').css({
          'overflow': 'auto'
        });
      },
      back: function() {
        if (this.activity.step === 0) {
          this.cleanup();
          return;
        } else if (this.activity.step === 1) {
          jQuery('#nugget_list').hide();
          jQuery('#publication_list').show();
          this.activity.step = 0;
        } else if (this.activity.step === 2) {
          jQuery('#nugget_content').hide();
          jQuery('#nugget_list').show();
          this.activity.step = 1;
        }
        this.updateButtons();
        return this.updateInformation();
      },
      next: function() {
        console.log(this);
        if (this.activity.step === 0) {
          if (!this.activity.publication) {
            return;
          }
          this.loadPublicationNuggets(this.activity.publication);
          jQuery('#publication_list').hide();
          this.activity.step = 1;
        } else if (this.activity.step === 1) {
          if (!this.activity.nugget) {
            return;
          }
          this.loadNugget(this.activity.nugget);
          jQuery('#nugget_list').hide();
          this.activity.step = 2;
        }
        this.updateButtons();
        return this.updateInformation();
      },
      selectPublication: function(node) {
        this.activity.publication = jQuery(node).attr('id').replace(/node_/, '');
        return this.activity.publication_label = jQuery(node).text();
      },
      selectNugget: function(node) {
        if (jQuery(node).closest('.context').length) {
          return;
        }
        this.activity.nugget = jQuery(node).attr('id').replace(/node_/, '');
        return this.activity.nugget_label = jQuery(node).text();
      },
      loadNugget: function(loid) {
        var content,
          _this = this;
        content = jQuery('#nugget_content');
        content.show();
        return omc.NuggetContent(loid).done(function(node_data) {
          var text;
          if (node_data && node_data.indexOf('<![CDATA[') >= 0) {
            node_data = utils.replaceCDATA(node_data);
          }
          content.html(node_data);
          content.bind('keyup keydown', function(event) {
            event.preventDefault();
            return false;
          });
          content.find('.name').hide();
          text = content.find('.content');
          text.attr('contenteditable', 'true');
          text.focus();
          return _this.options.editable.execute('selectAll');
        });
      },
      loadPublications: function(loid) {
        var list,
          _this = this;
        list = new List();
        list.setupItemActions({
          'node_dblclick': function(node) {
            _this.selectPublication(node);
            return _this.next();
          },
          'node_select': function(node) {
            return _this.selectPublication(node);
          }
        });
        list.init(jQuery('#publication_list'), omc.PublicationList);
        return jQuery('#publication_list').show();
      },
      loadPublicationNuggets: function(loid) {
        var data_fn, list,
          _this = this;
        list = new List();
        data_fn = function() {
          return omc.SourceDescriptionNuggetList(loid);
        };
        list.setupItemActions({
          'node_dblclick': function(node) {
            _this.selectNugget(node);
            return _this.next();
          },
          'node_select': function(node) {
            _this.selectNugget(node);
            jQuery('.context:visible').hide();
            return jQuery(node).find('.context').show();
          }
        });
        list.init(jQuery('#nugget_list'), data_fn);
        return jQuery('#nugget_list').show();
      },
      _createInput: function(identifier, label, value) {
        var input,
          _this = this;
        input = jQuery('<div><label for="' + identifier + '">' + label + '</label><input id="' + identifier + '" type="text" value="<!--value-->"/></div>');
        input.find('input').val(value);
        input.find('input').bind('blur', function(event) {
          return _this._formChanged(event, _this.options);
        });
        return input;
      },
      _formChanged: function(event, options) {
        var data, path, target;
        target = jQuery(event.target);
        path = target.attr('id');
        data = target.val();
        if (omc && options.loid) {
          return omc.storePublicationDescriptionAttribute(options.loid, path, data);
        }
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallohyperlink', {
      dropdownform: null,
      tmpid: 0,
      selected_row: null,
      selected_cell: null,
      html: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null,
        edit_url: true,
        edit_title: true,
        use_form: false
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function() {
          var cur_selection, notes, range, recalc, selection, title, url;
          if (rangy.getSelection().rangeCount === 0) {
            return;
          }
          selection = rangy.getSelection();
          range = selection.getRangeAt(0);
          _this.options.editable.undoWaypointStart('hyperlink');
          _this.tmpid = 'mod_' + (new Date()).getTime();
          _this.cur_hyperlink = null;
          _this.action = 'insert';
          _this.options.editable.element.find('a').each(function(index, item) {
            if (selection.containsNode(item, true)) {
              _this.cur_hyperlink = jQuery(item);
              _this.cur_hyperlink.attr('id', _this.tmpid);
              _this.action = 'modify';
              return false;
            }
          });
          if (_this.cur_hyperlink && _this.cur_hyperlink.length) {
            _this.action = 'modify';
            url = _this.cur_hyperlink.attr('href');
            notes = _this.cur_hyperlink.attr('title');
            title = _this.cur_hyperlink.text();
            $('#' + contentId + 'url').val(url);
            $('#' + contentId + 'notes').val(notes);
            $('#' + contentId + 'title').val(title);
            _this.cur_hyperlink.attr('id', _this.tmpid);
          } else {
            _this.action = 'insert';
            cur_selection = jQuery(range.extractContents()).text();
            if (cur_selection === '') {
              cur_selection = utils.tr('no title provided');
            }
            _this.cur_hyperlink = jQuery('<a href="https://refeus.de" id="' + _this.tmpid + '">' + cur_selection + '</a>');
            range.insertNode(_this.cur_hyperlink[0]);
            $('#' + contentId + 'url').val(_this.cur_hyperlink.attr('href'));
            $('#' + contentId + 'notes').val("");
            $('#' + contentId + 'title').val(cur_selection);
            _this.updateHyperlinkHTML(contentId);
          }
          if (!_this.options.use_form) {
            if (_this.action === 'modify') {
              _this._removeAction();
            } else {
              _this._selectAction();
            }
            return false;
          } else {
            recalc = function() {
              return _this.recalcHTML();
            };
            window.setTimeout(recalc, 300);
          }
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        target.bind('hide', function() {
          return jQuery('a').each(function(index, item) {
            if (!window.__start_mini_activity) {
              jQuery(item).removeAttr('id');
            }
            if (jQuery(item).attr('href') === '') {
              return jQuery(item).remove();
            }
          });
        });
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      updateHyperlinkHTML: function(contentId) {
        var hyperlink, notes, title, url;
        hyperlink = $('#' + this.tmpid);
        url = $('#' + contentId + 'url').val();
        notes = $('#' + contentId + 'notes').val();
        title = $('#' + contentId + 'title').val();
        hyperlink.attr('href', url);
        hyperlink.attr('title', notes);
        hyperlink.text(title);
        return hyperlink[0].outerHTML;
      },
      recalcHTML: function() {
        this.html = this.updateHyperlinkHTML(this._content_id);
        return this.options.editable.store();
      },
      _prepareDropdown: function(contentId) {
        var addButton, addInput, contentArea, contentAreaUL, this_editable,
          _this = this;
        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        this._content_id = contentId;
        addInput = function(type, element, default_value) {
          var el, elid, recalc;
          elid = "" + contentId + element;
          el = jQuery(("<li><label for\"" + elid + "\">") + utils.tr(element) + ("</label><input type=\"" + type + "\" id=\"" + elid + "\"/></li>"));
          if (el.find('input').is('input[type="checkbox"]') && default_value === "true") {
            el.find('input').attr('checked', true);
          } else if (default_value) {
            el.find('input').val(default_value);
          }
          recalc = function() {
            return _this.recalcHTML();
          };
          el.find('input').bind('keyup change', recalc);
          return el;
        };
        addButton = function(element, event_handler) {
          var el;
          el = jQuery("<li><button class=\"action_button\" id=\"" + _this.tmpid + element + "\">" + utils.tr(element) + "</button></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        if (this.options.edit_url) {
          contentAreaUL.append(addInput("text", "url", ""));
        } else {
          contentAreaUL.append(addInput("hidden", "url", ""));
        }
        contentAreaUL.append(addInput("text", "notes", ""));
        if (this.options.edit_title) {
          contentAreaUL.append(addInput("text", "title", ""));
        } else {
          contentAreaUL.append(addInput("hidden", "title", ""));
        }
        this_editable = this.options.editable;
        contentAreaUL.append(addButton("select nugget", function() {
          return _this._selectAction();
        }));
        contentAreaUL.append(addButton("apply", function() {
          return _this._applyAction();
        }));
        contentAreaUL.append(addButton("remove", function() {
          return _this._removeAction();
        }));
        return contentArea;
      },
      _applyAction: function() {
        this.recalcHTML();
        $('#' + this.tmpid).removeAttr('id');
        this.options.editable.undoWaypointCommit();
        return this.dropdownform.hallodropdownform('hideForm');
      },
      _removeAction: function() {
        var modified;
        modified = false;
        if ($('#' + this.tmpid).text() !== utils.tr('no title provided')) {
          modified = true;
        }
        if (modified) {
          $('#' + this.tmpid).replaceWith($('#' + this.tmpid).text());
        } else {
          $('#' + this.tmpid).remove();
        }
        this.options.editable.undoWaypointCommit();
        return this.dropdownform.hallodropdownform('hideForm');
      },
      _selectAction: function() {
        var current_hyperlink;
        current_hyperlink = jQuery('#' + this.tmpid);
        current_hyperlink.removeAttr('id');
        current_hyperlink.addClass(this.tmpid);
        current_hyperlink.addClass('nugget_select_target');
        this.dropdownform.hallodropdownform('hideForm');
        return $('body').hallonuggetselector({
          'editable': this.options.editable,
          'hyperlink_class': this.tmpid
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'hyperlink';
        if (window.action_list && window.action_list['hallojs_hyperlink'] !== void 0) {
          button_label = window.action_list['hallojs_hyperlink'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'hyperlink',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallojustify", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(alignment) {
          var buttonElement, label;
          label = alignment;
          if (window.action_list && window.action_list['hallojs_' + alignment] !== void 0) {
            label = window.action_list['hallojs_' + alignment].title;
          }
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: label,
            command: "justify" + alignment,
            icon: "icon-align-" + (alignment.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        buttonize("Left");
        buttonize("Center");
        buttonize("Right");
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      },
      _init: function() {}
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloplaintext', {
      name: "plaintext",
      html: null,
      editable_element: null,
      stored_content_selection_marker: '',
      plain_editor: null,
      overlay: null,
      debug: false,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null,
        overlayCss: {
          'position': 'fixed',
          'z-index': 100000,
          'background': 'white',
          'border': '2px solid silver'
        }
      },
      cancel: function() {
        if (this.debug) {
          console.log('cancel');
        }
        return this.restore();
      },
      commit: function() {
        var sel_html;
        sel_html = this.textarea.val();
        sel_html = sel_html.replace(/\n<table/g, '<table');
        sel_html = sel_html.replace(/\n<ol/g, '<ol');
        sel_html = sel_html.replace(/\n<ul/g, '<ul');
        sel_html = sel_html.replace(/\n <li/g, '<li');
        sel_html = sel_html.replace(/\n <tr/g, '<tr');
        sel_html = sel_html.replace(/\n  <td/g, '<td');
        sel_html = sel_html.replace(/\n<div/g, '<div');
        sel_html = sel_html.replace(/\n<p/g, '<p');
        sel_html = sel_html.replace(/\n<br/g, '<br');
        sel_html = sel_html + this.stored_content_selection_marker;
        this.editable_element.html(sel_html);
        this.options.editable.store();
        return this.restore();
      },
      execute: function() {
        var overlay,
          _this = this;
        jQuery('body').css({
          'overflow': 'hidden'
        });
        this.editable_element.css({
          'opacity': '0.5'
        });
        this.options.editable.storeContentPosition();
        this.options.editable.undoWaypointStart('plaintext');
        jQuery('.misspelled').remove();
        this.id = "" + this.options.uuid + "-" + this.widgetName + "-area";
        this.editable_element = this.options.editable.element;
        if (this.debug) {
          console.log('execute::editable html', this.editable_element.html());
        }
        overlay = this._create_overlay(this.id);
        this.editable_element.parent().append(overlay);
        return overlay.fadeIn(100, function() {
          var sel_html, selection_pos_end, selection_pos_start, selm_end, selm_start;
          _this.options.editable._ignoreEvents = true;
          _this.textarea.focus();
          sel_html = _this.textarea.val();
          selm_start = '<' + _this.options.editable.selection_marker + '>';
          selm_end = '</' + _this.options.editable.selection_marker + '>';
          sel_html = sel_html.replace(/<span class="rangySelectionBoundary">[^<]*<\/span>/, selm_start);
          if (sel_html.match(/<span class="rangySelectionBoundary">[^<]*<\/span>/)) {
            sel_html = sel_html.replace(/<span class="rangySelectionBoundary">[^<]*<\/span>/, selm_end);
          } else {
            sel_html = sel_html.replace(selm_start, selm_start + selm_end);
          }
          sel_html = sel_html.replace(/<table/g, '\n<table');
          sel_html = sel_html.replace(/<ol/g, '\n<ol');
          sel_html = sel_html.replace(/<ul/g, '\n<ul');
          sel_html = sel_html.replace(/<li/g, '\n <li');
          sel_html = sel_html.replace(/<tr/g, '\n <tr');
          sel_html = sel_html.replace(/<td/g, '\n  <td');
          sel_html = sel_html.replace(/<div/g, '\n<div');
          sel_html = sel_html.replace(/<p/g, '\n<p');
          sel_html = sel_html.replace(/<br/g, '\n<br');
          selection_pos_start = sel_html.indexOf(selm_start);
          if (selection_pos_start >= 0) {
            sel_html = sel_html.replace(new RegExp(selm_start, 'g'), '');
          }
          selection_pos_end = sel_html.indexOf(selm_end);
          if (selection_pos_end >= 0) {
            sel_html = sel_html.replace(new RegExp(selm_end, 'g'), '');
          }
          _this.textarea.val(sel_html);
          if (selection_pos_start >= 0 && selection_pos_end >= 0) {
            _this.options.editable.setSelectionRange(_this.textarea.get(0), selection_pos_start, selection_pos_end);
          }
          _this._setup_syntax_highlight();
          return _this.options.editable._ignoreEvents = false;
        });
      },
      restore: function() {
        var _this = this;
        jQuery('body').css({
          'overflow': 'auto'
        });
        this.editable_element.css({
          'opacity': '1'
        });
        return this.overlay.fadeOut(100, function() {
          var dom;
          _this.overlay.remove();
          dom = new DOMNugget();
          dom.prepareTextForEdit(_this.editable_element);
          dom.resetCitations(_this.editable_element);
          if (typeof MathJax === 'object') {
            MathJax.Hub.Queue(['Typeset', MathJax.Hub]);
          }
          _this.options.editable.undoWaypointCommit();
          return _this.options.editable.restoreContentPosition();
        });
      },
      setup: function() {
        if (!this.options.editable.element) {
          return;
        }
        return this.editable_element = this.options.editable.element;
      },
      _create_form_button: function(name, event_handler) {
        var btn, button_label, button_tooltip;
        button_label = utils.tr_action_title(name);
        button_tooltip = utils.tr_action_tooltip(name);
        btn = jQuery("<button class=\"action_button\" title=\"" + button_tooltip + "\">" + button_label + "</button>");
        btn.bind('click', event_handler);
        btn.addClass('action_button');
        return btn;
      },
      _prepare_plain_content: function() {
        var citeproc, dom, selection_marker,
          _this = this;
        dom = new DOMNugget();
        citeproc = new ICiteProc();
        dom.prepareTextForStorage(this.editable_element);
        this.saved_selection = rangy.saveSelection();
        selection_marker = this.editable_element.find(this.options.editable.selection_marker);
        if (selection_marker.length) {
          this.stored_content_selection_marker = selection_marker[0].outerHTML;
          selection_marker.remove();
        }
        selection_marker = this.editable_element.find('.rangySelectionBoundary');
        selection_marker.each(function(index, item) {
          var node;
          node = jQuery(item);
          node.removeAttr('id');
          return node.removeAttr('style');
        });
        return this.editable_element.find('.auto-cite').remove();
      },
      _create_overlay: function(id) {
        var container,
          _this = this;
        this.overlay = jQuery("<div id=\"" + id + "\"></div>");
        this._prepare_plain_content();
        this.overlay.append(this._create_plain(this.editable_element.html()));
        this.overlay.append('<div class="button_container"></div>');
        container = this.overlay.find('.button_container');
        container.append(this._create_form_button('Cancel', function() {
          return _this.cancel();
        }));
        container.append(this._create_form_button('Apply', function() {
          return _this.commit();
        }));
        this._overlay_resize();
        jQuery(window).bind('resize', function() {
          _this._overlay_resize();
          return _this._plain_resize();
        });
        return this.overlay;
      },
      _create_plain: function(content) {
        var _this = this;
        this.textarea = jQuery("<textarea></textarea>");
        this.textarea.val(content);
        this._plain_resize();
        this.textarea.bind('blur', function() {
          return _this.textarea.focus();
        });
        this.textarea.bind('keyup', function(event) {
          if (event.keyCode === 27) {
            return _this.cancel();
          }
        });
        return this.textarea;
      },
      _setup_syntax_highlight: function() {
        var editor_options;
        return editor_options = {
          'mode': 'application/xml',
          'lineNumbers': true,
          'lineWrapping': true
        };
      },
      _overlay_resize: function() {
        var dim;
        this.overlay.offset(this.toolbar.offset());
        dim = {
          width: this.editable_element.width(),
          height: this.editable_element.height()
        };
        dim.height = dim.height + (this.editable_element.offset().top - this.toolbar.offset().top);
        this.options.overlayCss.height = $(window).height();
        this.options.overlayCss.width = $(window).width();
        this.options.overlayCss.top = 0;
        this.options.overlayCss.left = 0;
        return this.overlay.css(this.options.overlayCss);
      },
      _plain_resize: function() {
        var height, text_dim;
        height = $(window).height() - this.toolbar.offset().top;
        text_dim = {
          'position': 'fixed',
          'top': '5px',
          'left': '8px',
          'width': ($(window).width() - 16) + 'px',
          'height': ($(window).height() - 48) + 'px',
          'max-width': $(window).width(),
          'max-height': $(window).height()
        };
        this.textarea.css(text_dim);
        if (this.plain_editor) {
          return this.plain_editor.refresh();
        }
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId;
        this.editable_element = this.options.editable.element;
        this.toolbar = toolbar;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        return toolbar.append(this._prepareButtons(contentId));
      },
      _prepareButtons: function(contentId) {
        var buttonset,
          _this = this;
        if (this.debug) {
          console.log(this.editable_element);
        }
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonset.append(this._prepareButton(function() {
          if (_this.debug) {
            console.log(_this.editable_element);
          }
          return _this.execute();
        }));
        return buttonset.hallobuttonset();
      },
      _prepareButton: function(action) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = this.name;
        if (window.action_list && window.action_list['hallojs_' + this.name] !== void 0) {
          button_label = window.action_list['hallojs_' + this.name].title;
        }
        buttonElement.halloactionbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          icon: 'icon-text-height',
          command: this.name,
          target: this.name,
          setup: this.setup,
          cssClass: this.options.buttonCssClass,
          action: action
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloreundo", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(label, cmd, cmd_fn) {
          var buttonElement, button_label;
          button_label = label;
          if (window.action_list && window.action_list['hallojs_' + cmd] !== void 0) {
            button_label = window.action_list['hallojs_' + cmd].title + ' ' + window.action_list['hallojs_' + cmd].tooltip;
          }
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: button_label,
            icon: cmd === 'undo' ? 'icon-undo' : 'icon-repeat',
            command: cmd,
            command_function: cmd_fn,
            queryState: false,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        if (window.wke) {
          this.options.editable.registerKey('ctrl', 90, function(event) {
            event.preventDefault();
            return _this._undo(jQuery(event.currentTarget));
          });
          this.options.editable.registerKey('ctrl,shift', 90, function(event) {
            event.preventDefault();
            return _this._redo(jQuery(event.currentTarget));
          });
          if (utils && utils.cur_language === 'de') {
            this.options.editable.registerKey('ctrl', 89, function(event) {
              event.preventDefault();
              return _this._redo(jQuery(event.currentTarget));
            });
          }
          buttonize("Undo", 'undo', function() {
            return _this._undo(_this.options.editable.element);
          });
          buttonize("Redo", 'redo', function() {
            return _this._redo(_this.options.editable.element);
          });
        } else {
          buttonize("Undo", "undo");
          buttonize("Redo", "redo");
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      },
      _init: function() {},
      _undo: function(target) {
        return this.options.editable.undo(target);
      },
      _redo: function(target) {
        if (typeof this.options.editable._undo_stack !== 'object') {
          return;
        }
        return this.options.editable.redo(target);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallospellcheck', {
      name: 'spellcheck',
      spellcheck_interval: 0,
      spellcheck_timeout: 300,
      spellcheck_proxy: null,
      initialized: false,
      debug: false,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      _init: function() {
        var _this = this;
        return this.options.editable.element.bind('halloactivated', function() {
          return _this.enable();
        });
      },
      enable: function() {
        try {
          wke.spellcheckWord('refeus');
          this.initialized = true;
        } catch (_error) {
          this.initialized = false;
        }
        if (this.debug) {
          console.log(this.initialized);
        }
      },
      execute: function() {
        if (!this.initialized) {
          return;
        }
        if (debug) {
          console.log('toggle spellcheck');
        }
        this.options.editable.element[0].spellcheck = !this.options.editable.element[0].spellcheck;
        this.options.editable.element.blur();
        return this.options.editable.element.focus();
      },
      setup: function() {
        if (debug) {
          console.log(this.initialized);
        }
        if (this.initialized) {
          return;
        }
        return this.enable();
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        return toolbar.append(this._prepareButtons(contentId));
      },
      _prepareButtons: function(contentId) {
        var buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonset.append(this._prepareButton(function() {
          return _this.execute();
        }));
        return buttonset.hallobuttonset();
      },
      _prepareButton: function(action) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = this.name;
        if (window.action_list && window.action_list['hallojs_' + this.name] !== void 0) {
          button_label = window.action_list['hallojs_' + this.name].title;
        }
        buttonElement.halloactionbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          icon: 'icon-text-height',
          command: this.name,
          target: this.name,
          setup: this.setup,
          cssClass: this.options.buttonCssClass,
          action: action
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallopublicationselector', {
      widget: null,
      selectables: '',
      citeproc: new ICiteProc(),
      list_toolbar: null,
      options: {
        editable: null,
        range: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        data: null,
        loid: null,
        has_changed: false,
        toolbar_actions: {
          'Filter': null
        },
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var _this = this;
        this.widget = jQuery('<div id="publication_selector"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.append('<div id="publication_list" style="background-color:white; margin-bottom: 4px"></div>');
        this.widget.append('<button class="publication_selector_back action_button">' + utils.tr('back') + '</button>');
        this.widget.append('<button class="publication_selector_apply action_button">' + utils.tr('apply') + '</button>');
        this.widget.css(this.options.default_css);
        this.widget.find('.publication_selector_back').bind('click', function() {
          return _this.back();
        });
        this.widget.find('.publication_selector_apply').bind('click', function() {
          return _this.apply();
        });
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery('body').width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        this.list = new List();
        this.list.setupItemActions({
          'node_dblclick': function(node) {
            _this.select(node);
            return _this.apply();
          },
          'node_select': function(node) {
            return _this.select(node);
          }
        });
        this.list.init($('#publication_list'), omc.PublicationList).done(function() {
          _this.list_toolbar = new ToolBarBase();
          _this.options.toolbar_actions['Filter'] = _this.list_toolbar.default_actions.Filter;
          _this.options.toolbar_actions['FilterUnreferenced'] = _this.list_toolbar.default_actions.FilterUnreferenced;
          _this.options.toolbar_actions['FilterSystem'] = _this.list_toolbar.default_actions.FilterSystem;
          _this.options.toolbar_actions['SortAlpha'] = _this.list_toolbar.default_actions.SortAlpha;
          _this.options.toolbar_actions['SortTime'] = _this.list_toolbar.default_actions.SortTime;
          _this.options.toolbar_actions['SortType'] = _this.list_toolbar.default_actions.SortType;
          _this.options.toolbar_actions['_filter'] = _this.list_toolbar.default_actions._filter;
          _this.options.toolbar_actions['_removeFilter'] = _this.list_toolbar.default_actions._removeFilter;
          _this.list_toolbar.displayBase('body', 'publicationselector', _this.options.toolbar_actions, true, jQuery('#publication_list'));
          _this.list_toolbar.toolbar.stop(true, true);
          _this.list_toolbar.toolbar.css({
            'z-index': _this.options.default_css['z-index'] + 1
          });
          _this.options.toolbar_actions['Filter'](null, null, null, _this.list_toolbar.action_context);
          return window.setTimeout(function() {
            _this.list_toolbar.action_context.find('#filter_input').focus();
            return _this.list_toolbar.action_context.css({
              'padding-top': '2em'
            });
          }, 500);
        });
        return jQuery(window).resize();
      },
      apply: function() {
        var dfo, publication_loid, target_loid, tmp_id,
          _this = this;
        if (typeof this.current_node === 'undefined') {
          utils.error(utils.tr('nothing selected'));
          return;
        }
        jQuery('#basepublicationselectortoolbar').remove();
        publication_loid = this.current_node.replace(/node_/, '');
        target_loid = this.options.editable.element.closest('.Text').attr('id').replace(/node/, '');
        dfo = omc.AssociatePublication(target_loid, publication_loid);
        dfo.fail(function(error) {
          return _this.back();
        });
        tmp_id = 'tmp_' + (new Date()).getTime();
        return dfo.done(function(result) {
          var data, element, new_sd_node, nugget;
          data = result.loid;
          element = _this.current_node_label;
          _this.options.editable.restoreContentPosition();
          _this.options.editable.getSelectionNode(function(selection_common) {
            var co, nugget, range, replacement, replacement_node, selection, selection_html, z3988, z3988_node;
            selection_html = _this.options.editable.getSelectionHtml();
            if (selection_html === "") {
              replacement = "";
            } else {
              replacement = "<span class=\"citation\">" + selection_html + "</span>";
            }
            replacement += "<span class=\"cite\" contenteditable=\"false\" id=\"" + tmp_id + "\"><span class=\"csl\">" + element + "</span><span class=\"Z3988\" data-sourcedescriptionloid=\"" + data + "\"><span style=\"display:none;\">&#160;</span></span>";
            replacement_node = jQuery('<span></span>').append(replacement);
            z3988 = new Z3988();
            nugget = new DOMNugget();
            z3988_node = jQuery('.Z3988', replacement_node)[0];
            co = {
              data: result
            };
            nugget.addDerivedSourceDescriptionAttributes(z3988_node, co);
            z3988.attach(z3988_node, {
              sourcedescription: co
            });
            selection = rangy.getSelection();
            if (selection.rangeCount > 0) {
              range = selection.getRangeAt(0);
              range.deleteContents();
            } else {
              range = rangy.createRange();
              range.selectNode(_this.options.editable.element[0]);
              range.collapse(false);
            }
            if (selection_html === '') {
              if (selection_common.attr('contenteditable') === 'true' && !selection_common.hasClass('rangySelectionBoundary')) {
                return selection_common.append(replacement_node.contents());
              } else {
                return replacement_node.insertAfter(selection_common);
              }
            } else {
              return range.insertNode(replacement_node[0]);
            }
          });
          nugget = new DOMNugget();
          _this.options.editable.element.closest('.nugget').find('.auto-cite').remove();
          occ.UpdateNuggetSourceDescriptions({
            loid: target_loid
          });
          new_sd_node = jQuery('#' + tmp_id);
          new_sd_node.removeAttr('id');
          nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
            return nugget.resetCitations(_this.options.editable.element).done(function() {
              return _this.openSourceDescriptionEditor(nugget, target_loid, new_sd_node);
            });
          });
          return _this.back();
        });
      },
      openSourceDescriptionEditor: function(nugget, target_loid, new_sd_node) {
        var _this = this;
        return nugget.getSourceDescriptionData(new_sd_node).done(function(citation_data) {
          return jQuery('body').hallosourcedescriptioneditor({
            'loid': citation_data.loid,
            'element': new_sd_node,
            'back': false,
            'nugget_loid': target_loid
          });
        });
      },
      back: function() {
        this.widget.remove();
        jQuery('#basepublicationselectortoolbar').remove();
        jQuery('body').css({
          'overflow': 'auto'
        });
        this.options.editable.restoreContentPosition();
        return this.options.editable.activate();
      },
      select: function(node) {
        var _this = this;
        this.current_node = jQuery(node).attr('id');
        this.current_node_label = jQuery(node).text();
        this.widget.find(".citation_data_processed").slideUp('slow', function() {
          return jQuery(this).remove();
        });
        return omc_settings.getSettings().done(function(settings) {
          return _this.citeproc.init().done(function() {
            var loid;
            loid = jQuery(node).attr('id').replace(/node_/, '');
            return omc.getPublicationCitationData(loid).done(function(citation_data) {
              var endnotes;
              if (jQuery(node).find(".citation_data_processed").length === 0) {
                jQuery(node).append('<div class="citation_data_processed"></div>');
                jQuery.each(citation_data, function(key, value) {
                  return jQuery(node).find('.citation_data_processed').append('<span class="cite"><span class="csl" id="' + key + '"></span></span></div>');
                });
              }
              _this.citeproc.resetCitationData();
              _this.citeproc.appendCitationData(citation_data);
              _this.citeproc.citation_style = settings['default_citation_style'];
              _this.citeproc.process('#node_' + loid + ' .citation_data_processed', settings.iso_language);
              endnotes = _this.citeproc.endnotes();
              endnotes = endnotes.replace(/\[1\]/, '');
              return jQuery(node).find('.citation_data_processed').html(endnotes).slideDown();
            });
          });
        });
      },
      _createInput: function(identifier, label, value) {
        var input,
          _this = this;
        input = jQuery('<div><label for="' + identifier + '">' + label + '</label><input id="' + identifier + '" type="text" value="<!--user-data-->"/></div>');
        input.find('input').bind('blur', function(event) {
          return _this._formChanged(event, _this.options);
        });
        input.find('input').val(value);
        return input;
      },
      _formChanged: function(event, options) {
        var data, path, target;
        target = jQuery(event.target);
        path = target.attr('id');
        data = target.val();
        if (omc && options.loid) {
          return omc.storePublicationDescriptionAttribute(options.loid, path, data);
        }
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloplugin', {
      name: 'plugin',
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      execute: function() {
        return console.log('execute');
      },
      setup: function() {
        return console.log('setup');
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        return toolbar.append(this._prepareButtons(contentId));
      },
      _prepareButtons: function(contentId) {
        var buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonset.append(this._prepareButton(function() {
          return _this.execute();
        }));
        return buttonset.hallobuttonset();
      },
      _prepareButton: function(action) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = this.name;
        if (window.action_list && window.action_list['hallojs_' + this.name] !== void 0) {
          button_label = window.action_list['hallojs_' + this.name].title;
        }
        buttonElement.halloactionbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          icon: 'icon-text-height',
          command: this.name,
          target: this.name,
          setup: this.setup,
          cssClass: this.options.buttonCssClass,
          action: action
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloimage', {
      dropdownform: null,
      dropdownsubform: null,
      debug: true,
      tmpid: 0,
      selected_row: null,
      selected_cell: null,
      html: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['rows', 'cols', 'border'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function(select_target, target_id) {
          var range, recalc, selection;
          contentId = target_id;
          if (_this.debug) {
            console.log('setup image form', select_target, target_id);
          }
          if (rangy.getSelection().rangeCount === 0 && typeof select_target === 'undefined') {
            return;
          }
          _this.options.editable.undoWaypointStart('image');
          _this.tmpid = 'mod_' + (new Date()).getTime();
          selection = rangy.getSelection();
          if (selection.rangeCount > 0) {
            range = selection.getRangeAt(0);
          } else {
            range = rangy.createRange();
            range.selectNode(_this.options.editable.element[0]);
            range.collapse();
          }
          _this.cur_image = null;
          _this.action = 'insert';
          _this.options.editable.element.find('img').each(function(index, item) {
            if (selection.containsNode(item, true)) {
              _this.cur_image = jQuery(item);
              _this.cur_image.attr('id', _this.tmpid);
              _this.action = 'update';
              return false;
            }
          });
          if (_this.action === 'insert') {
            if (window.live_target && jQuery(window.live_target).is('img') && jQuery(jQuery(window.live_target), _this.options.editable).length) {
              _this.cur_image = jQuery(window.live_target);
              window.live_target = null;
              _this.action = 'update';
            }
          }
          if (_this.cur_image && _this.cur_image.length) {
            _this.cur_image.attr('id', _this.tmpid);
          } else {
            _this.cur_image = jQuery('<img src="../styles/default/icons/types/PubArtwork.png" id="' + _this.tmpid + '"/>');
            _this.options.editable.getSelectionStartNode(function(insert_position) {
              if (insert_position.length) {
                if ((insert_position.closest('.image_container').length)) {
                  insert_position = insert_position.closest('.image_container');
                }
                return _this.cur_image.insertBefore(insert_position);
              } else {
                return _this.options.editable.append(_this.cur_image);
              }
            });
            _this.updateImageHTML(contentId);
          }
          _this._setupForm();
          recalc = function() {
            return _this.recalcHTML(target.attr('id'));
          };
          jQuery('#' + contentId).unbind('hide', jQuery.proxy(_this._destroyForm, _this));
          jQuery('#' + contentId).bind('hide', jQuery.proxy(_this._destroyForm, _this));
          return true;
          return window.setTimeout(recalc, 300);
        };
        this.dropdownform = this._prepareButton(setup, target);
        this.dropdownform.hallodropdownform('bindShow', 'img');
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      updateImageHTML: function(contentId) {
        var image;
        image = $('#' + this.tmpid);
        return image[0].outerHTML;
      },
      recalcHTML: function(contentId) {
        this.html = this.updateImageHTML(contentId);
        return this.options.editable.store();
      },
      _prepareDropdown: function(contentId) {
        var addButton, contentArea, contentAreaUL,
          _this = this;
        contentArea = jQuery('<div id="' + contentId + '"><div class="subform"></div><ul></ul></div>');
        contentAreaUL = contentArea.find('ul');
        this.dropdownsubform = contentArea.find('.subform');
        addButton = function(element, event_handler) {
          var el, elid;
          elid = "" + contentId + element;
          el = jQuery("<li><button class=\"action_button\" id=\"" + _this.elid + "\">" + utils.tr(element) + "</button></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        contentAreaUL.append(addButton("apply", function() {
          var image;
          _this.recalcHTML(contentId);
          image = $('#' + _this.tmpid);
          _this.options.editable.setContentPosition(image);
          image.removeAttr('id');
          _this.options.editable.undoWaypointCommit();
          _this.dropdownsubform.imageSettings('destroy');
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        contentAreaUL.append(addButton("remove", function() {
          var image;
          image = $('#' + _this.tmpid);
          image.closest('.image_container').remove();
          image.remove();
          _this.options.editable.undoWaypointCommit();
          _this.dropdownsubform.imageSettings('destroy');
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        return contentArea;
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'image';
        if (window.action_list && window.action_list['hallojs_image'] !== void 0) {
          button_label = window.action_list['hallojs_image'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'image',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      },
      _destroyForm: function() {
        return this.dropdownsubform.imageSettings('destroy');
      },
      _setupForm: function() {
        var plugin_options;
        plugin_options = {
          image: this.cur_image
        };
        this.dropdownsubform.imageSettings('destroy');
        this.dropdownsubform.imageSettings(plugin_options);
        return this.dropdownsubform.imageSettings('createMenu', [this.tmpid]);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallotextselection", {
      _start_container: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null,
        current_version: null,
        in_document: false,
        is_nugget: true
      },
      _create: function() {
        return this;
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        this._bindKeys();
        setup = function() {
          var has_selection, is_citation, is_direct_citation, is_indirect_citation, range, range_ca, range_jq, selection;
          target.find('.element-selector').remove();
          selection = rangy.getSelection();
          if (selection.rangeCount === 0) {
            return false;
          }
          range = selection.getRangeAt(0);
          range_jq = $(range.cloneContents());
          range_ca = null;
          _this.start_container = null;
          _this._find_start_container(_this.options.editable.element[0], range.startContainer);
          if (_this.start_container) {
            range_ca = $(_this.start_container).closest('.citation');
            is_citation = range_ca.hasClass('citation');
            is_direct_citation = range_ca.hasClass('direct_citation');
            is_indirect_citation = range_ca.hasClass('indirect_citation');
          } else {
            is_citation = false;
            is_direct_citation = false;
            is_indirect_citation = false;
          }
          has_selection = range_jq.text() !== '';
          if (has_selection) {
            target.append(_this._addElement('copy'));
          }
          if (has_selection) {
            target.append(_this._addElement('cut'));
          }
          target.append(_this._addElement('paste'));
          if (has_selection && _this.options.is_nugget) {
            target.append(_this._addElement('as_name'));
          }
          if (has_selection && _this.options.is_nugget) {
            target.append(_this._addElement('as_tag'));
          }
          if (has_selection && is_direct_citation) {
            target.append(_this._addElement('indirect_citation'));
          }
          if (has_selection && is_indirect_citation) {
            target.append(_this._addElement('direct_citation'));
          }
          if (has_selection && is_citation) {
            target.append(_this._addElement('remove_citation'));
          }
          return true;
        };
        buttonset.append(target);
        buttonset.append(this._prepareButton(setup, target));
        return toolbar.append(buttonset);
      },
      _find_start_container: function(node, search_node) {
        var child_node, _i, _len, _ref, _results;
        if (this.start_container) {
          return;
        }
        if (node === search_node) {
          this.start_container = node;
        }
        if (node.childNodes) {
          _ref = node.childNodes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child_node = _ref[_i];
            _results.push(this._find_start_container(child_node, search_node));
          }
          return _results;
        }
      },
      _bindKeys: function() {
        var widget,
          _this = this;
        widget = this.options.editable;
        widget.registerKey('ctrl', 67, function(event) {
          widget.execute('copy');
          return event.preventDefault();
        });
        widget.registerKey('ctrl', 88, function(event) {
          widget.execute('cut');
          return event.preventDefault();
        });
        return widget.registerKey('ctrl', 86, function(event) {
          widget.execute('paste');
          return event.preventDefault();
        });
      },
      _prepareDropdown: function(contentId) {
        var contentArea;
        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        return contentArea;
      },
      _elementText: function(element) {
        var element_text;
        if (window.action_list && window.action_list['hallojs_textselection_' + element] !== void 0) {
          return element_text = window.action_list['hallojs_textselection_' + element].title;
        }
      },
      _addElement: function(element) {
        var el, element_text, this_editable,
          _this = this;
        element_text = this._elementText(element);
        el = jQuery("<button class=\"element-selector\">" + element_text + "</button>");
        this_editable = this.options.editable;
        return el.bind("click", function(ev) {
          var nugget, range, range_jq, selection;
          selection = rangy.getSelection();
          if (selection.rangeCount === 0) {
            return;
          }
          range = selection.getRangeAt(0);
          range_jq = $(range.cloneContents());
          nugget = new DOMNugget();
          if (element === 'copy') {
            this_editable.execute('copy');
          } else if (element === 'cut') {
            this_editable.execute('cut');
          } else if (element === 'paste') {
            this_editable.execute('paste');
          } else if (element === 'as_name') {
            if (range_jq.text() !== '') {
              nugget.rename(_this.options.editable.element, range_jq.text());
            }
          } else if (element === 'as_tag') {
            if (range_jq.text() !== '') {
              nugget.createTag(_this.options.editable.element, range_jq.text());
            }
          } else if (element === 'direct_citation') {
            console.log('NOT IMPLEMENTED:', element);
          } else if (element === 'indirect_citation') {
            console.log('NOT IMPLEMENTED:', element);
          } else if (element === 'remove_citation') {
            _this.start_container = null;
            _this._find_start_container(_this.options.editable.element[0], range.startContainer);
            $(_this.start_container).closest('.citation').removeClass('citation');
          }
          _this.options.editable.element.blur();
          return _this.options.editable.element.focus();
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'textselection';
        if (window.action_list && window.action_list['hallojs_textselection'] !== void 0) {
          button_label = window.action_list['hallojs_textselection'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'textselection',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloversion", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['new version', 'update from manage', 'update to manage'],
        buttonCssClass: null,
        current_version: null,
        in_document: false
      },
      _create: function() {
        return this;
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        this.options.in_document = this.options.editable.element.closest('.Document').length > 0;
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        setup = function() {
          var nugget;
          nugget = new DOMNugget();
          target.find('.version').remove();
          if (_this.options.in_document) {
            return;
          }
          _this.options.current_version = _this.options.editable.element.closest('.nugget').attr('id');
          nugget.getNuggetVersions(_this.options.editable.element).done(function(versions) {
            var display_name, setupSubVersions;
            if (versions.version) {
              display_name = versions.version.display_name;
              target.append(_this._addElement(display_name, versions.version));
            }
            setupSubVersions = function(versions) {
              var subversion, _i, _len, _ref, _results;
              if (versions.subversions && versions.subversions.length) {
                versions.subversions.reverse();
                _ref = versions.subversions;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  subversion = _ref[_i];
                  display_name = subversion.version.display_name;
                  target.append(_this._addElement(display_name, subversion.version));
                  _results.push(setupSubVersions(subversion));
                }
                return _results;
              }
            };
            return setupSubVersions(versions);
          });
          return true;
        };
        buttonset.append(target);
        buttonset.append(this._prepareButton(setup, target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var contentArea, el, element, _i, _len, _ref;
        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!this.options.in_document) {
            if (element === 'update to manage') {
              continue;
            }
            if (element === 'update from manage') {
              continue;
            }
          }
          el = this._addElement(element);
          if (el) {
            contentArea.append(el);
          }
        }
        return contentArea;
      },
      _addElement: function(element, version) {
        var el, element_text, span, this_editable,
          _this = this;
        element_text = element;
        if (element_text === 'new version') {
          if (window.action_list && window.action_list['hallojs_version_new_version'] !== void 0) {
            element_text = window.action_list['hallojs_version_new_version'].title;
          }
        }
        if (element_text === 'current version') {
          if (window.action_list && window.action_list['hallojs_version_current_version'] !== void 0) {
            element_text = window.action_list['hallojs_version_current_version'].title;
          }
        }
        if (element_text === 'update to manage') {
          if (window.action_list && window.action_list['hallojs_version_update_to_manage'] !== void 0) {
            element_text = window.action_list['hallojs_version_update_to_manage'].title;
          }
        }
        if (element_text === 'update from manage') {
          if (window.action_list && window.action_list['hallojs_version_update_from_manage'] !== void 0) {
            element_text = window.action_list['hallojs_version_update_from_manage'].title;
          }
        }
        span = $('<span>');
        span.html(element_text);
        element_text = span.text();
        if (element_text.length > 40) {
          element_text = element_text.substr(0, 20) + '...' + element_text.substr(element_text.length - 20, 20);
        }
        el = jQuery("<button class=\"version-selector\"></button>");
        el.text(element_text);
        if (version && this.options.current_version === version.variant_loid) {
          el.addClass("selected");
        }
        if (version) {
          el.addClass("version");
        }
        this_editable = this.options.editable;
        return el.bind("click", function(ev) {
          var make_current, nugget;
          nugget = new DOMNugget();
          if (element === 'new version') {
            _this.options.editable.element.blur();
            make_current = true;
            if (_this.options.in_document) {
              _this.options.editable.element.blur();
              return nugget.updateVersionReferenceNewVersion(_this.options.editable.element);
            } else {
              return nugget.createNewVersion(_this.options.editable.element);
            }
          } else if (element === 'update from manage') {
            _this.options.editable.element.blur();
            return nugget.updateVersionReferenceFromVariation(_this.options.editable.element);
          } else if (element === 'update to manage') {
            _this.options.editable.element.blur();
            return nugget.updateVariationFromVersionReference(_this.options.editable.element).done(function() {
              return _this.options.editable.element.focus();
            });
          } else {
            _this.options.editable.element.blur();
            return nugget.loadVersion(_this.options.editable.element, version.variant_loid).done(function() {
              return nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
                nugget.resetCitations(_this.options.editable.element);
                return _this.options.editable.element.focus();
              });
            });
          }
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;
        buttonElement = jQuery('<span></span>');
        button_label = 'version';
        if (window.action_list && window.action_list['hallojs_version'] !== void 0) {
          button_label = window.action_list['hallojs_version'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'version',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloToolbarAbsolute', {
      toolbar: null,
      debug: false,
      options: {
        parentElement: 'body',
        editable: null,
        toolbar: null
      },
      _create: function() {
        var el, widthToAdd,
          _this = this;
        if (this.debug) {
          console.log('toolbar created');
        }
        this.toolbar = this.options.toolbar;
        this.toolbar.show();
        jQuery(this.options.parentElement).append(this.toolbar);
        this._bindEvents();
        jQuery(window).resize(function(event) {
          return _this._updatePosition(_this._getPosition(event));
        });
        if (this.options.parentElement === 'body' && !this.options.floating) {
          el = jQuery(this.element);
          widthToAdd = parseFloat(el.css('padding-left'));
          widthToAdd += parseFloat(el.css('padding-right'));
          widthToAdd += parseFloat(el.css('border-left-width'));
          widthToAdd += parseFloat(el.css('border-right-width'));
          widthToAdd += (parseFloat(el.css('outline-width'))) * 2;
          widthToAdd += (parseFloat(el.css('outline-offset'))) * 2;
          return jQuery(this.toolbar).css("min-width", el.width() + widthToAdd);
        }
      },
      _getPosition: function(event, selection) {
        var offset, position;
        if (!event) {
          return;
        }
        offset = parseFloat(this.element.css('outline-width')) + parseFloat(this.element.css('outline-offset'));
        return position = {
          top: this.element.offset().top - this.toolbar.outerHeight() - offset,
          left: this.element.offset().left - offset
        };
      },
      _getCaretPosition: function(range) {
        var newRange, position, tmpSpan;
        tmpSpan = jQuery("<span/>");
        newRange = rangy.createRange();
        newRange.setStart(range.endContainer, range.endOffset);
        newRange.insertNode(tmpSpan.get(0));
        position = {
          top: tmpSpan.offset().top,
          left: tmpSpan.offset().left
        };
        tmpSpan.remove();
        return position;
      },
      setPosition: function() {
        this.toolbar.css('position', 'fixed');
        this.toolbar.css('z-index', '99999');
        this.toolbar.css('top', '0');
        if (this.options.parentElement !== 'body') {

        }
      },
      _updatePosition: function(position) {},
      _bindEvents: function() {
        var _this = this;
        return this.element.bind('hallodeactivated', function(event, data) {
          if (_this.debug) {
            console.log('toolbar deactivated');
          }
          _this.toolbar.remove();
          return _this.destroy();
        });
      }
    });
  })(jQuery);

}).call(this);

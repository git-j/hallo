// Generated by CoffeeScript 1.3.3
(function() {
  var root, _Citehandler;

  (function(jQuery) {
    return jQuery.widget('Hallo.halloToolbarContextual', {
      toolbar: null,
      options: {
        parentElement: 'body',
        editable: null,
        toolbar: null
      },
      _create: function() {
        var _this = this;
        this.toolbar = this.options.toolbar;
        jQuery(this.options.parentElement).append(this.toolbar);
        this._bindEvents();
        return jQuery(window).resize(function(event) {
          return _this._updatePosition(_this._getPosition(event));
        });
      },
      _getPosition: function(event, selection) {
        var eventType, position;
        if (!event) {
          return;
        }
        eventType = event.type;
        if (eventType === "keydown" || eventType === "keyup" || eventType === "keypress") {
          return this._getCaretPosition(selection);
        }
        if (eventType === "click" || eventType === "mousedown" || eventType === "mouseup") {
          return position = {
            top: event.pageY,
            left: event.pageX
          };
        }
      },
      _getCaretPosition: function(range) {
        var newRange, position, tmpSpan;
        tmpSpan = jQuery("<span/>");
        newRange = rangy.createRange();
        newRange.setStart(range.endContainer, range.endOffset);
        newRange.insertNode(tmpSpan.get(0));
        position = {
          top: tmpSpan.offset().top,
          left: tmpSpan.offset().left
        };
        tmpSpan.remove();
        return position;
      },
      setPosition: function() {
        if (this.options.parentElement !== 'body') {
          this.options.parentElement = 'body';
          jQuery(this.options.parentElement).append(this.toolbar);
        }
        this.toolbar.css('position', 'absolute');
        this.toolbar.css('top', this.element.offset().top - 20);
        return this.toolbar.css('left', this.element.offset().left);
      },
      _updatePosition: function(position) {
        if (!position) {
          return;
        }
        if (!(position.top && position.left)) {
          return;
        }
        this.toolbar.css('top', position.top);
        return this.toolbar.css('left', position.left);
      },
      _bindEvents: function() {
        var _this = this;
        this.element.bind('halloselected', function(event, data) {
          var position;
          position = _this._getPosition(data.originalEvent, data.selection);
          if (!position) {
            return;
          }
          _this._updatePosition(position);
          return _this.toolbar.show();
        });
        this.element.bind('hallounselected', function(event, data) {
          return _this.toolbar.hide();
        });
        return this.element.bind('hallodeactivated', function(event, data) {
          return _this.toolbar.hide();
        });
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('Hallo.halloToolbarFixed', {
      toolbar: null,
      options: {
        parentElement: 'body',
        editable: null,
        toolbar: null
      },
      _create: function() {
        var el, widthToAdd,
          _this = this;
        this.toolbar = this.options.toolbar;
        this.toolbar.show();
        jQuery(this.options.parentElement).append(this.toolbar);
        this._bindEvents();
        jQuery(window).resize(function(event) {
          return _this._updatePosition(_this._getPosition(event));
        });
        if (this.options.parentElement === 'body' && !this.options.floating) {
          el = jQuery(this.element);
          widthToAdd = parseFloat(el.css('padding-left'));
          widthToAdd += parseFloat(el.css('padding-right'));
          widthToAdd += parseFloat(el.css('border-left-width'));
          widthToAdd += parseFloat(el.css('border-right-width'));
          widthToAdd += (parseFloat(el.css('outline-width'))) * 2;
          widthToAdd += (parseFloat(el.css('outline-offset'))) * 2;
          return jQuery(this.toolbar).css("width", el.width() + widthToAdd);
        }
      },
      _getPosition: function(event, selection) {
        var offset, position;
        if (!event) {
          return;
        }
        offset = parseFloat(this.element.css('outline-width')) + parseFloat(this.element.css('outline-offset'));
        return position = {
          top: this.element.offset().top - this.toolbar.outerHeight() - offset,
          left: this.element.offset().left - offset
        };
      },
      _getCaretPosition: function(range) {
        var newRange, position, tmpSpan;
        tmpSpan = jQuery("<span/>");
        newRange = rangy.createRange();
        newRange.setStart(range.endContainer, range.endOffset);
        newRange.insertNode(tmpSpan.get(0));
        position = {
          top: tmpSpan.offset().top,
          left: tmpSpan.offset().left
        };
        tmpSpan.remove();
        return position;
      },
      setPosition: function() {
        if (this.options.parentElement !== 'body') {
          return;
        }
        this.toolbar.css('position', 'absolute');
        this.toolbar.css('top', this.element.offset().top - this.toolbar.outerHeight());
        return this.toolbar.css('left', this.element.offset().left);
      },
      _updatePosition: function(position) {},
      _bindEvents: function() {
        var _this = this;
        this.element.bind('halloactivated', function(event, data) {
          _this._updatePosition(_this._getPosition(event));
          return _this.toolbar.show()(_this.toolbar ? void 0 : _this._create);
        });
        return this.element.bind('hallodeactivated', function(event, data) {
          return _this.toolbar.remove();
        });
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('Hallo.halloToolbarAbsolute', {
      toolbar: null,
      options: {
        parentElement: 'body',
        editable: null,
        toolbar: null
      },
      _create: function() {
        var el, widthToAdd,
          _this = this;
        this.toolbar = this.options.toolbar;
        this.toolbar.show();
        jQuery(this.options.parentElement).append(this.toolbar);
        this._bindEvents();
        jQuery(window).resize(function(event) {
          return _this._updatePosition(_this._getPosition(event));
        });
        if (this.options.parentElement === 'body' && !this.options.floating) {
          el = jQuery(this.element);
          widthToAdd = parseFloat(el.css('padding-left'));
          widthToAdd += parseFloat(el.css('padding-right'));
          widthToAdd += parseFloat(el.css('border-left-width'));
          widthToAdd += parseFloat(el.css('border-right-width'));
          widthToAdd += (parseFloat(el.css('outline-width'))) * 2;
          widthToAdd += (parseFloat(el.css('outline-offset'))) * 2;
          return jQuery(this.toolbar).css("min-width", el.width() + widthToAdd);
        }
      },
      _getPosition: function(event, selection) {
        var offset, position;
        if (!event) {
          return;
        }
        offset = parseFloat(this.element.css('outline-width')) + parseFloat(this.element.css('outline-offset'));
        return position = {
          top: this.element.offset().top - this.toolbar.outerHeight() - offset,
          left: this.element.offset().left - offset
        };
      },
      _getCaretPosition: function(range) {
        var newRange, position, tmpSpan;
        tmpSpan = jQuery("<span/>");
        newRange = rangy.createRange();
        newRange.setStart(range.endContainer, range.endOffset);
        newRange.insertNode(tmpSpan.get(0));
        position = {
          top: tmpSpan.offset().top,
          left: tmpSpan.offset().left
        };
        tmpSpan.remove();
        return position;
      },
      setPosition: function() {
        if (this.options.parentElement !== 'body') {
          return;
        }
        this.toolbar.css('position', 'fixed');
        this.toolbar.css('top', '4px');
        return this.toolbar.css('left', '4px');
      },
      _updatePosition: function(position) {},
      _bindEvents: function() {
        var _this = this;
        return this.element.bind('hallodeactivated', function(event, data) {
          _this.toolbar.remove();
          return _this.destroy();
        });
      }
    });
  })(jQuery);

  /*
  Hallo 1.0.1dev - a rich text editing jQuery UI widget
  (c) 2011 Henri Bergius, IKS Consortium
  Hallo may be freely distributed under the MIT license
  http://hallojs.org
  */


  (function(jQuery) {
    return jQuery.widget("IKS.hallo", {
      toolbar: null,
      bound: false,
      originalContent: "",
      previousContent: "",
      uuid: "",
      selection: null,
      _keepActivated: false,
      originalHref: null,
      options: {
        editable: true,
        plugins: {},
        toolbar: 'halloToolbarContextual',
        parentElement: 'body',
        buttonCssClass: null,
        placeholder: '',
        forceStructured: true,
        checkTouch: true,
        touchScreen: null
      },
      _create: function() {
        var options, plugin, _ref,
          _this = this;
        this.id = this._generateUUID();
        if (this.options.checkTouch && this.options.touchScreen === null) {
          this.checkTouch();
        }
        _ref = this.options.plugins;
        for (plugin in _ref) {
          options = _ref[plugin];
          if (!jQuery.isPlainObject(options)) {
            options = {};
          }
          jQuery.extend(options, {
            editable: this,
            uuid: this.id,
            buttonCssClass: this.options.buttonCssClass
          });
          jQuery(this.element)[plugin](options);
        }
        this.element.bind('halloactivated', function() {
          return _this._prepareToolbar();
        });
        this.element.bind('hallodeactivated', function() {
          return _this._removeToolbar();
        });
        return this.originalContent = this.getContents();
      },
      _init: function() {
        if (this.options.editable) {
          return this.enable();
        } else {
          return this.disable();
        }
      },
      disable: function() {
        var _this = this;
        this.element.attr("contentEditable", false);
        this.element.unbind("focus", this._activated);
        this.element.unbind("blur", this._deactivated);
        this.element.unbind("keyup paste change", this._checkModified);
        this.element.unbind("keyup", this._keys);
        this.element.unbind("keyup mouseup", this._checkSelection);
        this.bound = false;
        jQuery(this.element).removeClass('isModified');
        this.element.parents('a').andSelf().each(function(idx, elem) {
          var element;
          element = jQuery(elem);
          if (!element.is('a')) {
            return;
          }
          if (!_this.originalHref) {
            return;
          }
          return element.attr('href', _this.originalHref);
        });
        return this._trigger("disabled", null);
      },
      enable: function() {
        var widget,
          _this = this;
        this.element.parents('a[href]').andSelf().each(function(idx, elem) {
          var element;
          element = jQuery(elem);
          if (!element.is('a[href]')) {
            return;
          }
          _this.originalHref = element.attr('href');
          return element.removeAttr('href');
        });
        this.element.attr("contentEditable", true);
        if (!this.element.html()) {
          this.element.html(this.options.placeholder);
        }
        if (!this.bound) {
          this.element.bind("focus", this, this._activated);
          this.element.bind("blur", this, this._deactivated);
          this.element.bind("keyup paste change", this, this._checkModified);
          this.element.bind("keyup", this, this._keys);
          this.element.bind("keyup mouseup", this, this._checkSelection);
          widget = this;
          this.bound = true;
        }
        if (this.options.forceStructured) {
          this._forceStructured();
        }
        return this._trigger("enabled", null);
      },
      activate: function() {
        return this.element.focus();
      },
      containsSelection: function() {
        var range;
        range = this.getSelection();
        return this.element.has(range.startContainer).length > 0;
      },
      getSelection: function() {
        var range, sel;
        sel = rangy.getSelection();
        range = null;
        if (sel.rangeCount > 0) {
          range = sel.getRangeAt(0);
        } else {
          range = rangy.createRange();
        }
        return range;
      },
      restoreSelection: function(range) {
        var sel;
        sel = rangy.getSelection();
        return sel.setSingleRange(range);
      },
      replaceSelection: function(cb) {
        var newTextNode, r, range, sel, t;
        if (jQuery.browser.msie) {
          t = document.selection.createRange().text;
          r = document.selection.createRange();
          return r.pasteHTML(cb(t));
        } else {
          sel = window.getSelection();
          range = sel.getRangeAt(0);
          newTextNode = document.createTextNode(cb(range.extractContents()));
          range.insertNode(newTextNode);
          range.setStartAfter(newTextNode);
          sel.removeAllRanges();
          return sel.addRange(range);
        }
      },
      replaceSelectionHTML: function(cb) {
        var r, range, range_content, range_content_jq, range_parent, range_parent_jq, replacement, sel, t;
        if (jQuery.browser.msie) {
          t = document.selection.createRange().text;
          r = document.selection.createRange();
          return r.pasteHTML(cb(t));
        } else {
          sel = window.getSelection();
          range = sel.getRangeAt(0);
          range_parent = range.commonAncestorContainer;
          if (range_parent.nodeType !== 1) {
            range_parent = range_parent.parentNode;
          }
          range_content = range.cloneContents();
          range_parent_jq = jQuery(range_parent);
          range_content_jq = jQuery("<div></div>");
          range_content_jq[0].appendChild(range_content);
          replacement = cb(range_parent_jq, range_content_jq);
          if (replacement) {
            document.execCommand("insertHTML", false, replacement);
          }
          sel.removeAllRanges();
          return sel.addRange(range);
        }
      },
      removeAllSelections: function() {
        if (jQuery.browser.msie) {
          return range.empty();
        } else {
          return window.getSelection().removeAllRanges();
        }
      },
      getContents: function() {
        var contentClone, plugin;
        contentClone = this.element.clone();
        for (plugin in this.options.plugins) {
          if (!jQuery.isFunction(jQuery(this.element).data(plugin)['cleanupContentClone'])) {
            continue;
          }
          jQuery(this.element)[plugin]('cleanupContentClone', contentClone);
        }
        return contentClone.html();
      },
      setContents: function(contents) {
        return this.element.html(contents);
      },
      isModified: function() {
        if (!this.previousContent) {
          this.previousContent = this.originalContent;
        }
        return this.previousContent !== this.getContents();
      },
      setUnmodified: function() {
        return this.previousContent = this.getContents();
      },
      setModified: function() {
        jQuery(this.element).addClass('isModified');
        return this._trigger('modified', null, {
          editable: this,
          content: this.getContents()
        });
      },
      restoreOriginalContent: function() {
        return this.element.html(this.originalContent);
      },
      execute: function(command, value) {
        if (document.execCommand(command, false, value)) {
          return this.element.trigger("change");
        }
      },
      protectFocusFrom: function(el) {
        var widget;
        widget = this;
        return el.bind("mousedown", function(event) {
          event.preventDefault();
          widget._protectToolbarFocus = true;
          return setTimeout(function() {
            return widget._protectToolbarFocus = false;
          }, 300);
        });
      },
      keepActivated: function(_keepActivated) {
        this._keepActivated = _keepActivated;
      },
      _generateUUID: function() {
        var S4;
        S4 = function() {
          return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
        };
        return "" + (S4()) + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + (S4()) + (S4());
      },
      _prepareToolbar: function() {
        var plugin;
        this.toolbar = jQuery('<div class="hallotoolbar"></div>');
        jQuery(this.element)[this.options.toolbar]({
          editable: this,
          parentElement: this.options.parentElement,
          toolbar: this.toolbar
        });
        if (jQuery(this.element)[this.options.toolbar]) {
          jQuery(this.element)[this.options.toolbar]('_create');
        }
        for (plugin in this.options.plugins) {
          jQuery(this.element)[plugin]('populateToolbar', this.toolbar);
        }
        jQuery(this.element)[this.options.toolbar]('setPosition');
        return this.protectFocusFrom(this.toolbar);
      },
      _removeToolbar: function() {
        if (this.toolbar) {
          return this.toolbar.remove();
        }
      },
      _checkModified: function(event) {
        var widget;
        widget = event.data;
        if (widget.isModified()) {
          return widget.setModified();
        }
      },
      _keys: function(event) {
        var old, widget;
        widget = event.data;
        if (event.keyCode === 27) {
          old = widget.getContents();
          widget.restoreOriginalContent(event);
          widget._trigger("restored", null, {
            editable: widget,
            content: widget.getContents(),
            thrown: old
          });
          return widget.turnOff();
        }
      },
      _rangesEqual: function(r1, r2) {
        return r1.startContainer === r2.startContainer && r1.startOffset === r2.startOffset && r1.endContainer === r2.endContainer && r1.endOffset === r2.endOffset;
      },
      _checkSelection: function(event) {
        var widget;
        if (event.keyCode === 27) {
          return;
        }
        widget = event.data;
        return setTimeout(function() {
          var sel;
          sel = widget.getSelection();
          if (widget._isEmptySelection(sel) || widget._isEmptyRange(sel)) {
            if (widget.selection) {
              widget.selection = null;
              widget._trigger("unselected", null, {
                editable: widget,
                originalEvent: event
              });
            }
            return;
          }
          if (!widget.selection || !widget._rangesEqual(sel, widget.selection)) {
            widget.selection = sel.cloneRange();
            return widget._trigger("selected", null, {
              editable: widget,
              selection: widget.selection,
              ranges: [widget.selection],
              originalEvent: event
            });
          }
        }, 0);
      },
      _isEmptySelection: function(selection) {
        if (selection.type === "Caret") {
          return true;
        }
        return false;
      },
      _isEmptyRange: function(range) {
        if (range.collapsed) {
          return true;
        }
        if (range.isCollapsed) {
          if (typeof range.isCollapsed === 'function') {
            return range.isCollapsed();
          }
          return range.isCollapsed;
        }
        return false;
      },
      turnOn: function() {
        if (this.getContents() === this.options.placeholder) {
          this.setContents('');
        }
        jQuery(this.element).addClass('inEditMode');
        return this._trigger("activated", this);
      },
      turnOff: function() {
        jQuery(this.element).removeClass('inEditMode');
        this._trigger("deactivated", this);
        if (!this.getContents()) {
          return this.setContents(this.options.placeholder);
        }
      },
      _activated: function(event) {
        return event.data.turnOn();
      },
      _deactivated: function(event) {
        if (event.data._keepActivated) {
          return;
        }
        if (event.data.options.store_callback) {
          event.data.options.store_callback(event.data.getContents());
        }
        if (event.data._protectToolbarFocus !== true) {
          return event.data.turnOff();
        } else {
          return setTimeout(function() {
            return jQuery(event.data.element).focus();
          }, 300);
        }
      },
      _forceStructured: function(event) {
        try {
          return document.execCommand('styleWithCSS', 0, false);
        } catch (e) {
          try {
            return document.execCommand('useCSS', 0, true);
          } catch (e) {
            try {
              return document.execCommand('styleWithCSS', false, false);
            } catch (e) {

            }
          }
        }
      },
      checkTouch: function() {
        return this.options.touchScreen = !!('createTouch' in document);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallosourcedescription', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['quote'],
        buttonCssClass: null,
        citehandler: null
      },
      _create: function() {
        this.options.citehandler = root.citehandler.get();
        return this;
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        setup = function() {
          return root.citehandler.get().setupSourceDescriptions(target, _this.options.editable, jQuery.proxy(_this._addElement, _this));
        };
        buttonset.append(target);
        buttonset.append(this._prepareButton(setup, target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var containingElement, contentArea, element, _i, _len, _ref;
        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        contentArea.css({
          'background-color': 'white'
        });
        containingElement = this.options.editable.element.get(0).tagName.toLowerCase();
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          contentArea.append(this._addElement(element, containingElement));
        }
        return contentArea;
      },
      _addElement: function(element, containing_element, publication_type, data) {
        var el, this_citehandler, this_editable,
          _this = this;
        el = jQuery("<div class=\"menu-item\">" + element + "</div>");
        el = jQuery("<button class=\"publication-selector\">" + element + "</button>");
        if (publication_type) {
          el.addClass(publication_type);
        }
        if (containing_element === element) {
          el.addClass("selected");
        }
        if (data) {
          el.append("<span class=\"data\" style=\"display:none\">" + data + "</span>");
        }
        if (containing_element !== 'div') {
          el.addClass("disabled");
        }
        this_editable = this.options.editable;
        this_citehandler = this.options.citehandler;
        return el.bind("click", function(ev) {
          var nugget, scb;
          scb = function(parent, old) {
            var replacement;
            replacement = false;
            if (element === "quote") {
              if (!parent.attr('contenteditable') && parent.hasClass(element)) {
                parent.removeClass(element);
                replacement;

              }
              replacement = ("<span class=\"" + element + "\">") + old.html() + "</span>";
            } else {
              if (old.html() !== "") {
                replacement = "<span class=\"citation\">" + old.html() + "</span>";
              } else {
                replacement = "";
              }
              replacement += "<span class=\"cite sourcedescription-" + data + "\">" + element + "</span>";
            }
            return replacement;
          };
          this_editable.replaceSelectionHTML(scb);
          nugget = new DOMNugget();
          return nugget.updateSourceDescriptionData(this_editable.element);
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement;
        buttonElement = jQuery('<span></span>');
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: 'block',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  jQuery.extend(jQuery.fn, {
    selectText: function() {
      var element, range, selection;
      element = this[0];
      if (document.body.createTextRange) {
        range = document.body.createTextRange();
        range.moveToElementText(element);
        return range.select();
      } else if (window.getSelection) {
        selection = window.getSelection();
        range = document.createRange();
        range.selectNodeContents(element);
        selection.removeAllRanges();
        return selection.addRange(range);
      }
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.citehandler = (function() {
    var _instance;

    function citehandler() {}

    _instance = void 0;

    citehandler.get = function(args) {
      return _instance != null ? _instance : _instance = new _Citehandler(args);
    };

    return citehandler;

  })();

  _Citehandler = (function() {

    _Citehandler.prototype.tips = null;

    function _Citehandler(args) {
      this.args = args;
      this.settings = {};
      this.citation_data = {};
      this.tips = jQuery('<span></span>');
      this.overlay_id = 'cite_overlay';
      this.sourcedescription_loid = 0;
      this.tips.hallotipoverlay({
        'selector': '.cite',
        'tip_id': this.overlay_id,
        'data_cb': jQuery.proxy(this._makeTip, this)
      });
    }

    _Citehandler.prototype.setupSourceDescriptions = function(target, editable, add_element_cb) {
      var domnugget, sourcedescriptions,
        _this = this;
      target.find('.SourceDescription').remove();
      domnugget = new DOMNugget();
      sourcedescriptions = domnugget.getSourceDescriptions(editable.element.parent('.nugget'));
      return jQuery.each(sourcedescriptions, function(index, item) {
        return target.append(add_element_cb(item.title, null, item.type, item.loid).addClass('SourceDescription'));
      });
    };

    _Citehandler.prototype._updateSettings = function() {
      if (omc_settings) {
        return this.settings = JSON.parse(omc_settings.getSettings());
      }
    };

    _Citehandler.prototype._updateCitationDisplay = function(element) {
      var domnugget;
      this.footnote = '';
      this.bibliography = '';
      this.citation_data = {};
      this.sourcedescription_loid = 0;
      domnugget = new DOMNugget();
      return this.citation_data = domnugget.getSourceDescriptionData(element);
    };

    _Citehandler.prototype._makeTip = function(target, element) {
      var ov_data,
        _this = this;
      this._updateSettings;
      ov_data = '';
      this._updateCitationDisplay(element);
      ov_data += '<ul>';
      ov_data += '<li>' + utils.tr('citation in') + ' ' + this.citation_data.citation_style + ': ' + this.citation_data.cite + '</li>';
      ov_data += '<li>' + utils.tr('footnote') + ': ' + this.citation_data.footnote + '</li>';
      ov_data += '<li>' + utils.tr('bibliography') + ': ' + this.citation_data.bibliography + '</li>';
      ov_data += '</ul><ul>';
      ov_data += '<li><button class="edit">' + utils.tr('edit') + '</button></li>';
      ov_data += '<li><button class="remove">' + utils.tr('remove') + '</button></li>';
      ov_data += '</ul>';
      target.append(ov_data);
      target.find('.edit').bind('click', function(ev) {
        return jQuery('body').hallosourcedescriptioneditor({
          'loid': _this.citation_data.loid,
          'data': _this.citation_data,
          'element': element,
          'tip_element': target
        });
      });
      target.find('.remove').bind('click', function(ev) {
        var citation, citation_html;
        citation = element.closest('.cite').prev('.citation');
        citation_html = '';
        if (citation.length) {
          citation_html = citation.html();
          citation.selectText();
          document.execCommand('delete', false);
          document.execCommand('insertHTML', false, citation_html);
        }
        if ((element.closest('.cite').length)) {
          element.closest('.cite').attr('contentEditable', true);
          element.closest('.cite').selectText();
          document.execCommand('delete', false);
        }
        return jQuery('#' + _this.overlay_id).remove();
      });
      if (!this.citation_data.processed) {
        target.find('.edit').remove();
        return target.find('.remove').closest('ul').prev('ul').remove();
      }
    };

    return _Citehandler;

  })();

  (function(jQuery) {
    return jQuery.widget('IKS.hallotipoverlay', {
      options: {
        editable: null,
        toolbar: null,
        selector: '.cite',
        tip_id: '#__hallotipoverlay',
        can_edit: false,
        data_cb: null,
        timeout: 2000,
        default_css: {
          'position': 'fixed',
          'background-color': 'white',
          'margin-top': '1em',
          'padding': '4px',
          'min-height': '2em',
          'min-width': '200px',
          'border': '1px solid silver',
          'z-index': '99999',
          'top': '0',
          'left': '0'
        }
      },
      can_hide: 0,
      node: null,
      timeout: 0,
      tip_node: null,
      _create: function() {
        return this.bindEvents();
      },
      bindEvents: function() {
        var can_edit, hide_fn, show_fn;
        show_fn = jQuery.proxy(this._show, this);
        hide_fn = jQuery.proxy(this._hide, this);
        jQuery(window).bind('scroll', function(ev) {
          return hide_fn();
        });
        can_edit = this.options.can_edit;
        return jQuery(this.options.selector).live('mouseover', function(ev) {
          jQuery(this).attr('contenteditable', can_edit);
          return show_fn(this);
        });
      },
      _restartCheckHide: function() {
        var check_hide_fn;
        window.clearTimeout(this.timeout);
        check_hide_fn = jQuery.proxy(this._checkHide, this);
        return this.timeout = window.setTimeout(check_hide_fn, this.options.timeout);
      },
      _hide: function(cb) {
        var _this = this;
        if (this.tip_node && this.tip_node.length) {
          this.tip_node.unbind();
          this.tip_node.fadeOut(100, function() {
            _this.tip_node.remove();
            _this.can_hide = 0;
            _this.node = null;
            if (cb && !cb.target) {
              return cb();
            }
          });
        } else {
          this.can_hide = 0;
          this.node = null;
          if (cb && !cb.target) {
            cb();
          }
        }
        return window.clearTimeout(this.timeout);
      },
      _checkHide: function() {
        if (this.can_hide === 1) {
          this._restartCheckHide();
        }
        if (this.can_hide === 2) {
          return this._hide();
        }
      },
      _show: function(target) {
        var b_width, data, element, newleft, ov_height, ov_top, ov_width, position, w_height,
          _this = this;
        element = jQuery(target);
        if (this.can_hide > 0 && element[0] !== this.node[0]) {
          this._hide(function() {
            return _this._show(target);
          });
        }
        if (this.can_hide === 0) {
          data = '[dev] no callback defined for tipoverlay.options.data_cb: ' + element.html();
          this.tip_node = jQuery('<span id="' + this.options.tip_id + '"></span>');
          this.tip_node.css(this.options.default_css);
          if (this.options.data_cb) {
            this.options.data_cb(this.tip_node, element);
          }
          jQuery('body').append(this.tip_node);
          ov_width = this.tip_node.width();
          ov_height = this.tip_node.height();
          b_width = jQuery('body').width() - 15;
          w_height = jQuery(window).height();
          position = element.offset();
          this.tip_node.css({
            'left': position.left,
            'top': position.top
          });
          if (position.left + ov_width > b_width) {
            newleft = b_width - ov_width;
            this.tip_node.css('left', newleft);
          }
          ov_top = position.top - jQuery('body').scrollTop();
          if (ov_top + ov_height > w_height) {
            this.tip_node.css('top', ov_top - 20 - ov_height);
          } else {
            this.tip_node.css('top', ov_top);
          }
          this.tip_node.hide();
          this.tip_node.fadeIn(300);
          this.can_hide = 2;
          this.node = element;
          this.tip_node.bind('mouseenter', function() {
            _this.can_hide = 1;
            _this._restartCheckHide();
            return _this.tip_node.animate({
              'opacity': '1'
            });
          });
          this.tip_node.bind('mouseleave', function() {
            _this.can_hide = 2;
            _this._restartCheckHide();
            return _this.tip_node.animate({
              'opacity': '0.6'
            });
          });
          return this._restartCheckHide();
        }
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloblock', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['h1', 'h2', 'h3', 'p', 'pre', 'blockquote', 'none'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, target;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        buttonset.append(target);
        buttonset.append(this._prepareButton(target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var addElement, containingElement, contentArea, element, _i, _len, _ref,
          _this = this;
        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        containingElement = this.options.editable.element.get(0).tagName.toLowerCase();
        addElement = function(element) {
          var el, queryState;
          el = jQuery("<button class='blockselector'>" + element + "</button>");
          if (containingElement === element) {
            el.addClass('selected');
          }
          if (containingElement !== 'div') {
            el.addClass('disabled');
          }
          el.bind('click', function() {
            if (el.hasClass('disabled')) {
              return;
            }
            if (element === 'none') {
              _this.options.editable.execute('removeFormat');
              return;
            }
            if (jQuery.browser.msie) {
              return _this.options.editable.execute('FormatBlock', '<' + element.toUpperCase() + '>');
            } else {
              return _this.options.editable.execute('formatBlock', element.toUpperCase());
            }
          });
          queryState = function(event) {
            var block;
            block = document.queryCommandValue('formatBlock');
            if (block.toLowerCase() === element) {
              el.addClass('selected');
              return;
            }
            return el.removeClass('selected');
          };
          _this.options.editable.element.bind('keyup paste change mouseup', queryState);
          _this.options.editable.element.bind('halloenabled', function() {
            return _this.options.editable.element.bind('keyup paste change mouseup', queryState);
          });
          _this.options.editable.element.bind('hallodisabled', function() {
            return _this.options.editable.element.unbind('keyup paste change mouseup', queryState);
          });
          return el;
        };
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          contentArea.append(addElement(element));
        }
        return contentArea;
      },
      _prepareButton: function(target) {
        var buttonElement;
        buttonElement = jQuery('<span></span>');
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: 'block',
          icon: 'icon-text-height',
          target: target,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallolists", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        lists: {
          ordered: true,
          unordered: true
        },
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(type, label) {
          var buttonElement;
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: label,
            command: "insert" + type + "List",
            icon: "icon-list-" + (label.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        if (this.options.lists.ordered) {
          buttonize("Ordered", "OL");
        }
        if (this.options.lists.unordered) {
          buttonize("Unordered", "UL");
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallojustify", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(alignment) {
          var buttonElement;
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: alignment,
            command: "justify" + alignment,
            icon: "icon-align-" + (alignment.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        buttonize("Left");
        buttonize("Center");
        buttonize("Right");
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      },
      _init: function() {}
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallosourcedescriptioneditor', {
      widget: null,
      selectables: '',
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        citehandler: null,
        data: null,
        loid: null,
        has_changed: false,
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'border': '1px solid silver',
          'overflow-y': 'auto'
        }
      },
      _init: function() {
        var inputs, nugget, sdi,
          _this = this;
        this.options.tip_element.hide();
        inputs = jQuery('<div id="cite_editor_inputs"></div>');
        this.widget = jQuery('<div id="cite_editor"></div>');
        this.widget.addClass('form_display');
        jQuery('body').append(this.widget);
        this.widget.css(this.options.default_css);
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery('body').width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        nugget = new DOMNugget();
        sdi = nugget.getAllSourceDescriptionAttributes(this.options.loid);
        this.selectables = '<option value="">' + utils.tr('more') + '</option>';
        jQuery.each(sdi.description, function(index, value) {
          var qvalue;
          if (index === '__AUTOIDENT' || index === 'loid' || index === 'type') {
            return;
          }
          if (sdi.instance[index] === void 0) {
            return;
          }
          if (!value.label) {
            return;
          }
          qvalue = sdi.instance[index];
          if (qvalue === '') {
            return _this.selectables += '<option value="' + index + '">' + value.label + '</option>';
          } else {
            return inputs.append(_this._createInput(index, value.label, qvalue));
          }
        });
        this.widget.append('<div><label>&nbsp;</label><select id="sourcedescriptioneditor_selectable">' + this.selectables + '</select></div>');
        this.widget.append(inputs);
        this.widget.append('<div><label>&nbsp;</label><button id="sourcedescriptioneditor_back">' + utils.tr('back') + '</button></div>');
        if (jQuery('body').selectBox) {
          jQuery('#sourcedescriptioneditor_selectable').selectBox();
        }
        jQuery('#sourcedescriptioneditor_selectable').bind('change', function(ev) {
          var input, new_input, sels;
          new_input = jQuery(ev.target).val();
          if (new_input === '') {
            return;
          }
          input = _this._createInput(new_input, sdi.description[new_input].label, '');
          inputs.append(input);
          input.find('input').focus();
          sels = jQuery('<select>' + _this.selectables + '</select>');
          sels.find('option[value="' + new_input + '"]').remove();
          _this.selectables = sels.html();
          jQuery('#sourcedescriptioneditor_selectable').selectBox('destroy');
          jQuery('#sourcedescriptioneditor_selectable').html(_this.selectables);
          return jQuery('#sourcedescriptioneditor_selectable').selectBox();
        });
        return jQuery('#sourcedescriptioneditor_back').bind('click', function() {
          _this.widget.focus();
          nugget.updateSourceDescriptionData(_this.options.element.closest('.nugget'));
          return _this.widget.remove();
        });
      },
      _createInput: function(identifier, label, value) {
        var input,
          _this = this;
        input = jQuery('<div><label for="' + identifier + '">' + label + '</label><input id="' + identifier + '" type="text" value="' + value + '"/></div>');
        input.find('input').bind('blur', function(event) {
          return _this._formChanged(event, _this.options);
        });
        return input;
      },
      _formChanged: function(event, options) {
        var data, path, target;
        target = jQuery(event.target);
        path = target.attr('id');
        data = target.val();
        if (omc && options.loid) {
          return omc.storePublicationDescriptionAttribute(options.loid, path, data);
        }
      },
      _create: function() {
        this.options.citehandler = root.citehandler.get();
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloreundo", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(cmd, label) {
          var buttonElement;
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: label,
            icon: cmd === 'undo' ? 'icon-undo' : 'icon-repeat',
            command: cmd,
            queryState: false,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        buttonize("undo", "Undo");
        buttonize("redo", "Redo");
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      },
      _init: function() {}
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloformat", {
      options: {
        editable: null,
        uuid: "",
        formattings: {
          bold: true,
          italic: true,
          strikeThrough: false,
          underline: false
        },
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset, enabled, format, widget, _ref,
          _this = this;
        widget = this;
        buttonset = jQuery("<span class=\"" + widget.widgetName + "\"></span>");
        buttonize = function(format) {
          var buttonHolder;
          buttonHolder = jQuery('<span></span>');
          buttonHolder.hallobutton({
            label: format,
            editable: _this.options.editable,
            command: format,
            uuid: _this.options.uuid,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonHolder);
        };
        _ref = this.options.formattings;
        for (format in _ref) {
          enabled = _ref[format];
          if (enabled) {
            buttonize(format);
          }
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function(jQuery) {
    jQuery.widget('IKS.hallobutton', {
      button: null,
      isChecked: false,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        queryState: true,
        cssClass: null
      },
      _create: function() {
        var hoverclass, id,
          _this = this;
        this.options.text = false;
        this.options.icons = {
          "primary": "ui-icon-" + this.options.command + "-p"
        };
        id = "" + this.options.uuid + "-" + this.options.label;
        this.button = this._createButton(id, this.options.command, this.options.label, this.options.icon);
        this.element.append(this.button);
        this.button.button({
          "icons": this.options.icons,
          "text": false
        });
        if (this.options.cssClass) {
          this.button.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          this.button.addClass('btn-large');
        }
        this.button.data('hallo-command', this.options.command);
        hoverclass = 'ui-state-hover';
        this.button.bind('mouseenter', function(event) {
          if (_this.isEnabled()) {
            return _this.button.addClass(hoverclass);
          }
        });
        return this.button.bind('mouseleave', function(event) {
          return _this.button.removeClass(hoverclass);
        });
      },
      _init: function() {
        var editableElement, queryState,
          _this = this;
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.element.append(this.button);
        queryState = function(event) {
          if (!_this.options.command) {
            return;
          }
          try {
            return _this.checked(document.queryCommandState(_this.options.command));
          } catch (e) {

          }
        };
        if (this.options.command) {
          this.button.bind('click', function(event) {
            _this.options.editable.execute(_this.options.command);
            queryState;

            return false;
          });
        }
        if (!this.options.queryState) {
          return;
        }
        editableElement = this.options.editable.element;
        editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        editableElement.bind('halloenabled', function() {
          return editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        });
        return editableElement.bind('hallodisabled', function() {
          return editableElement.unbind('keyup paste change mouseup hallomodified', queryState);
        });
      },
      enable: function() {
        return this.button.removeAttr('disabled');
      },
      disable: function() {
        return this.button.attr('disabled', 'true');
      },
      isEnabled: function() {
        return this.button.attr('disabled') !== 'true';
      },
      refresh: function() {
        if (this.isChecked) {
          return this.button.addClass('ui-state-active');
        } else {
          return this.button.removeClass('ui-state-active');
        }
      },
      checked: function(checked) {
        this.isChecked = checked;
        return this.refresh();
      },
      _createButton: function(id, command, label, icon) {
        var button_str;
        button_str = "<button for=\"" + id + "\"";
        button_str += " class=\"" + command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " title=\"" + label + "\"";
        button_str += " rel=\"" + command + "\"";
        button_str += ">" + label + "</button>";
        return jQuery(button_str);
      }
    });
    return jQuery.widget('IKS.hallobuttonset', {
      buttons: null,
      _create: function() {
        return this.element.addClass('ui-buttonset');
      },
      _init: function() {
        return this.refresh();
      },
      refresh: function() {
        var rtl;
        rtl = this.element.css('direction') === 'rtl';
        this.buttons = this.element.find('.ui-button');
        this.buttons.hallobutton('refresh');
        this.buttons.removeClass('ui-corner-all ui-corner-left ui-corner-right');
        this.buttons.filter(':first').addClass(rtl ? 'ui-corner-right' : 'ui-corner-left');
        return this.buttons.filter(':last').addClass(rtl ? 'ui-corner-left' : 'ui-corner-right');
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallodropdownbutton', {
      button: null,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        target: '',
        setup: null,
        cssClass: null
      },
      _create: function() {
        var _base, _ref;
        return (_ref = (_base = this.options).icon) != null ? _ref : _base.icon = "icon-" + (this.options.label.toLowerCase());
      },
      _init: function() {
        var target,
          _this = this;
        target = jQuery(this.options.target);
        target.css('position', 'absolute');
        target.addClass('dropdown-menu');
        target.hide();
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.button.bind('click', function() {
          if (target.hasClass('open')) {
            _this._hideTarget();
            return;
          }
          return _this._showTarget();
        });
        target.bind('click', function() {
          return _this._hideTarget();
        });
        this.options.editable.element.bind('hallodeactivated', function() {
          return _this._hideTarget();
        });
        return this.element.append(this.button);
      },
      _showTarget: function() {
        var target;
        target = jQuery(this.options.target);
        if (this.options.setup) {
          this.options.setup();
        }
        this._updateTargetPosition();
        target.addClass('open');
        return target.show();
      },
      _hideTarget: function() {
        var target;
        target = jQuery(this.options.target);
        target.removeClass('open');
        return target.hide();
      },
      _updateTargetPosition: function() {
        var left, target, top, _ref;
        target = jQuery(this.options.target);
        _ref = this.button.position(), top = _ref.top, left = _ref.left;
        top += this.button.outerHeight();
        target.css('top', top);
        return target.css('left', left - 20);
      },
      _prepareButton: function() {
        var button, buttonEl, button_str, id;
        id = "" + this.options.uuid + "-" + this.options.label;
        button_str = "<button id=\"" + id + "\" data-toggle=\"dropdown\"";
        button_str += " class=\"" + this.options.label + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " data-target=\"#" + (this.options.target.attr('id')) + "\"";
        button_str += " title=\"" + this.options.label + "\" rel=\"" + this.options.label + "\"";
        button_str += "></button>";
        buttonEl = jQuery(button_str);
        if (this.options.cssClass) {
          buttonEl.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          buttonEl.addClass('btn-large');
        }
        button = buttonEl.button({
          "icons": {
            "primary": "ui-icon-" + this.options.label + "-p"
          },
          "text": false
        });
        if (this.options.cssClass) {
          button.addClass(this.options.cssClass);
        }
        return button;
      }
    });
  })(jQuery);

}).call(this);

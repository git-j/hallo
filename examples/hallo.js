// Generated by CoffeeScript 1.6.2
(function() {
  var root, _Citehandler;

  (function(jQuery) {
    return jQuery.widget('IKS.halloactionbutton', {
      button: null,
      isChecked: false,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        queryState: true,
        cssClass: null
      },
      _create: function() {
        var hoverclass, id,
          _this = this;

        this.options.text = false;
        this.options.icons = {
          "primary": "ui-icon-" + this.options.command + "-p"
        };
        id = "" + this.options.uuid + "-" + this.options.label;
        this.button = this._createButton(id, this.options.command, this.options.label, this.options.icon);
        this.element.append(this.button);
        this.button.button({
          "icons": this.options.icons,
          "text": false
        });
        if (this.options.cssClass) {
          this.button.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          this.button.addClass('btn-large');
        }
        this.button.data('hallo-command', this.options.command);
        hoverclass = 'ui-state-hover';
        this.button.bind('mouseenter', function(event) {
          if (_this.isEnabled()) {
            return _this.button.addClass(hoverclass);
          }
        });
        return this.button.bind('mouseleave', function(event) {
          return _this.button.removeClass(hoverclass);
        });
      },
      _init: function() {
        var editableElement, queryState,
          _this = this;

        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.element.append(this.button);
        queryState = function(event) {
          var e;

          if (!_this.options.command) {
            return;
          }
          try {
            return _this.checked(document.queryCommandState(_this.options.command));
          } catch (_error) {
            e = _error;
          }
        };
        if (this.options.action) {
          this.button.bind('click', function(event) {
            jQuery('.misspelled').remove();
            _this.options.action(event);
            queryState;
            return false;
          });
        }
        if (!this.options.queryState) {
          return;
        }
        editableElement = this.options.editable.element;
        editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        editableElement.bind('halloenabled', function() {
          return editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        });
        return editableElement.bind('hallodisabled', function() {
          return editableElement.unbind('keyup paste change mouseup hallomodified', queryState);
        });
      },
      enable: function() {
        return this.button.removeAttr('disabled');
      },
      disable: function() {
        return this.button.attr('disabled', 'true');
      },
      isEnabled: function() {
        return this.button.attr('disabled') !== 'true';
      },
      refresh: function() {
        if (this.isChecked) {
          return this.button.addClass('ui-state-active');
        } else {
          return this.button.removeClass('ui-state-active');
        }
      },
      checked: function(checked) {
        this.isChecked = checked;
        return this.refresh();
      },
      _createButton: function(id, command, label, icon) {
        var button_str;

        button_str = "<button for=\"" + id + "\"";
        button_str += " class=\"" + command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " title=\"" + label + "\"";
        button_str += " rel=\"" + command + "\"";
        button_str += ">" + label + "</button>";
        return jQuery(button_str);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallodropdownform', {
      button: null,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        target: '',
        setup: null,
        cssClass: null
      },
      _create: function() {
        var _base, _ref;

        return (_ref = (_base = this.options).icon) != null ? _ref : _base.icon = "icon-" + (this.options.label.toLowerCase());
      },
      _init: function() {
        var target,
          _this = this;

        target = jQuery(this.options.target);
        target.css('position', 'absolute');
        target.addClass('dropdown-menu');
        target.addClass('dropdown-form');
        target.hide();
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.button.bind('click', function() {
          jQuery('.misspelled').remove();
          if (target.hasClass('open')) {
            _this._hideTarget();
            return;
          }
          return _this._showTarget();
        });
        this.options.editable.element.bind('hallodeactivated', function() {
          return _this._hideTarget();
        });
        return this.element.append(this.button);
      },
      _showTarget: function() {
        var setup_success, target,
          _this = this;

        jQuery(".dropdown-form:visible, .dropdown-menu:visible").each(function(index, item) {
          return jQuery(item).trigger('hide');
        });
        target = jQuery(this.options.target);
        if (this.options.setup) {
          setup_success = this.options.setup();
        }
        if (!setup_success) {
          this._hideTarget();
          return;
        }
        this._updateTargetPosition();
        target.addClass('open');
        target.show();
        target.find('input:first').focus();
        return target.bind('hide', function() {
          return _this._hideTarget();
        });
      },
      _hideTarget: function() {
        var target;

        target = jQuery(this.options.target);
        target.removeClass('open');
        target.hide();
        return this.restoreContentPosition;
      },
      hideForm: function() {
        jQuery(".dropdown-form:visible, .dropdown-menu:visible").each(function(index, item) {
          return jQuery(item).trigger('hide');
        });
        return this.restoreContentPosition;
      },
      _updateTargetPosition: function() {
        var last_button, last_button_pos, left, target, top, _ref;

        target = jQuery(this.options.target);
        _ref = this.button.position(), top = _ref.top, left = _ref.left;
        top += this.button.outerHeight();
        target.css('top', top);
        last_button = this.options.target.closest('.hallotoolbar').find('button:last');
        if (last_button.length) {
          last_button_pos = last_button.position().left;
          last_button_pos += last_button.width();
        }
        if (last_button.length && left + target.width() > last_button_pos) {
          return target.css('left', left - target.width() + last_button.width());
        } else {
          return target.css('left', left);
        }
      },
      _prepareButton: function() {
        var button, buttonEl, button_str, id;

        id = "" + this.options.uuid + "-" + this.options.command;
        button_str = "<button id=\"" + id + "\" data-toggle=\"dropdown\"";
        button_str += " class=\"" + this.options.command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " data-target=\"#" + (this.options.target.attr('id')) + "\"";
        button_str += " title=\"" + this.options.label + "\" rel=\"" + this.options.command + "\"";
        button_str += "></button>";
        buttonEl = jQuery(button_str);
        if (this.options.cssClass) {
          buttonEl.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          buttonEl.addClass('btn-large');
        }
        button = buttonEl.button({
          "icons": {
            "primary": "ui-icon-" + this.options.command + "-p"
          },
          "text": false
        });
        if (this.options.cssClass) {
          button.addClass(this.options.cssClass);
        }
        return button;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallodropdownbutton', {
      button: null,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        target: '',
        setup: null,
        cssClass: null
      },
      _create: function() {
        var _base, _ref;

        return (_ref = (_base = this.options).icon) != null ? _ref : _base.icon = "icon-" + (this.options.command.toLowerCase());
      },
      _init: function() {
        var target,
          _this = this;

        target = jQuery(this.options.target);
        target.css('position', 'absolute');
        target.addClass('dropdown-menu');
        target.hide();
        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.button.bind('click', function() {
          jQuery('.misspelled').remove();
          if (target.hasClass('open')) {
            _this._hideTarget();
            return;
          }
          return _this._showTarget();
        });
        target.bind('click', function() {
          return _this._hideTarget();
        });
        this.options.editable.element.bind('hallodeactivated', function() {
          return _this._hideTarget();
        });
        return this.element.append(this.button);
      },
      _showTarget: function() {
        var target,
          _this = this;

        jQuery(".dropdown-form:visible, .dropdown-menu:visible").each(function(index, item) {
          return jQuery(item).trigger('hide');
        });
        target = jQuery(this.options.target);
        if (this.options.setup) {
          this.options.setup();
        }
        this._updateTargetPosition();
        target.addClass('open');
        target.show();
        return target.bind('hide', function() {
          return _this._hideTarget();
        });
      },
      _hideTarget: function() {
        var target;

        target = jQuery(this.options.target);
        target.removeClass('open');
        return target.hide();
      },
      _updateTargetPosition: function() {
        var last_button, last_button_pos, left, target, top, _ref;

        target = jQuery(this.options.target);
        _ref = this.button.position(), top = _ref.top, left = _ref.left;
        top += this.button.outerHeight();
        target.css('top', top);
        last_button = target.closest('.hallotoolbar').find('button:last');
        last_button_pos = last_button.position().left;
        last_button_pos += last_button.width();
        if (left + target.width() > last_button_pos) {
          return target.css('left', left - target.width() + last_button.width());
        } else {
          return target.css('left', left);
        }
      },
      _prepareButton: function() {
        var button, buttonEl, button_str, id;

        id = "" + this.options.uuid + "-" + this.options.command;
        button_str = "<button id=\"" + id + "\" data-toggle=\"dropdown\"";
        button_str += " class=\"" + this.options.command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " data-target=\"#" + (this.options.target.attr('id')) + "\"";
        button_str += " title=\"" + this.options.label + "\" rel=\"" + this.options.command + "\"";
        button_str += "></button>";
        buttonEl = jQuery(button_str);
        if (this.options.cssClass) {
          buttonEl.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          buttonEl.addClass('btn-large');
        }
        button = buttonEl.button({
          "icons": {
            "primary": "ui-icon-" + this.options.command + "-p"
          },
          "text": false
        });
        if (this.options.cssClass) {
          button.addClass(this.options.cssClass);
        }
        return button;
      }
    });
  })(jQuery);

  (function(jQuery) {
    jQuery.widget('IKS.hallobutton', {
      button: null,
      isChecked: false,
      options: {
        uuid: '',
        label: null,
        icon: null,
        editable: null,
        command: null,
        queryState: true,
        cssClass: null
      },
      _create: function() {
        var hoverclass, id,
          _this = this;

        this.options.text = false;
        this.options.icons = {
          "primary": "ui-icon-" + this.options.command + "-p"
        };
        id = "" + this.options.uuid + "-" + this.options.label;
        this.button = this._createButton(id, this.options.command, this.options.label, this.options.icon);
        this.element.append(this.button);
        this.button.button({
          "icons": this.options.icons,
          "text": false
        });
        if (this.options.cssClass) {
          this.button.addClass(this.options.cssClass);
        }
        if (this.options.editable.options.touchScreen) {
          this.button.addClass('btn-large');
        }
        this.button.data('hallo-command', this.options.command);
        hoverclass = 'ui-state-hover';
        this.button.bind('mouseenter', function(event) {
          if (_this.isEnabled()) {
            return _this.button.addClass(hoverclass);
          }
        });
        return this.button.bind('mouseleave', function(event) {
          return _this.button.removeClass(hoverclass);
        });
      },
      _init: function() {
        var editableElement, queryState,
          _this = this;

        if (!this.button) {
          this.button = this._prepareButton();
        }
        this.element.append(this.button);
        queryState = function(event) {
          var e;

          if (!_this.options.command) {
            return;
          }
          try {
            return _this.checked(document.queryCommandState(_this.options.command));
          } catch (_error) {
            e = _error;
          }
        };
        if (this.options.command) {
          this.button.bind('click', function(event) {
            jQuery('.misspelled').remove();
            _this.options.editable.execute(_this.options.command);
            queryState;
            return false;
          });
        }
        if (!this.options.queryState) {
          return;
        }
        editableElement = this.options.editable.element;
        editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        editableElement.bind('halloenabled', function() {
          return editableElement.bind('keyup paste change mouseup hallomodified', queryState);
        });
        return editableElement.bind('hallodisabled', function() {
          return editableElement.unbind('keyup paste change mouseup hallomodified', queryState);
        });
      },
      enable: function() {
        return this.button.removeAttr('disabled');
      },
      disable: function() {
        return this.button.attr('disabled', 'true');
      },
      isEnabled: function() {
        return this.button.attr('disabled') !== 'true';
      },
      refresh: function() {
        if (this.isChecked) {
          return this.button.addClass('ui-state-active');
        } else {
          return this.button.removeClass('ui-state-active');
        }
      },
      checked: function(checked) {
        this.isChecked = checked;
        return this.refresh();
      },
      _createButton: function(id, command, label, icon) {
        var button_str;

        button_str = "<button for=\"" + id + "\"";
        button_str += " class=\"" + command + "_button ui-button ui-widget ui-state-default ui-corner-all\"";
        button_str += " title=\"" + label + "\"";
        button_str += " rel=\"" + command + "\"";
        button_str += ">" + label + "</button>";
        return jQuery(button_str);
      }
    });
    return jQuery.widget('IKS.hallobuttonset', {
      buttons: null,
      _create: function() {
        return this.element.addClass('ui-buttonset');
      },
      _init: function() {
        return this.refresh();
      },
      refresh: function() {
        var rtl;

        rtl = this.element.css('direction') === 'rtl';
        this.buttons = this.element.find('.ui-button');
        this.buttons.hallobutton('refresh');
        this.buttons.removeClass('ui-corner-all ui-corner-left ui-corner-right');
        this.buttons.filter(':first').addClass(rtl ? 'ui-corner-right' : 'ui-corner-left');
        return this.buttons.filter(':last').addClass(rtl ? 'ui-corner-left' : 'ui-corner-right');
      }
    });
  })(jQuery);

  /*
  Hallo 1.0.1dev - a rich text editing jQuery UI widget
  (c) 2011 Henri Bergius, IKS Consortium
  Hallo may be freely distributed under the MIT license
  http://hallojs.org
  */


  (function(jQuery) {
    return jQuery.widget('IKS.hallo', {
      toolbar: null,
      bound: false,
      originalContent: '',
      previousContent: '',
      uuid: '',
      selection: null,
      _keepActivated: false,
      originalHref: null,
      options: {
        editable: true,
        plugins: {},
        toolbar: 'halloToolbarContextual',
        parentElement: 'body',
        buttonCssClass: null,
        toolbarCssClass: null,
        toolbarPositionAbove: false,
        toolbarOptions: {},
        placeholder: '',
        forceStructured: true,
        checkTouch: true,
        touchScreen: null
      },
      _create: function() {
        var options, plugin, _ref,
          _this = this;

        this.id = this._generateUUID();
        if (this.options.checkTouch && this.options.touchScreen === null) {
          this.checkTouch();
        }
        _ref = this.options.plugins;
        for (plugin in _ref) {
          options = _ref[plugin];
          if (!jQuery.isPlainObject(options)) {
            options = {};
          }
          jQuery.extend(options, {
            editable: this,
            uuid: this.id,
            buttonCssClass: this.options.buttonCssClass
          });
          jQuery(this.element)[plugin](options);
        }
        this.element.bind('halloactivated', function() {
          return _this._prepareToolbar();
        });
        return this.originalContent = this.getContents();
      },
      _init: function() {
        if (this.options.editable) {
          return this.enable();
        } else {
          return this.disable();
        }
      },
      destroy: function() {
        var options, plugin, _ref;

        this.disable();
        if (this.toolbar) {
          this.toolbar.remove();
          this.element[this.options.toolbar]('destroy');
        }
        _ref = this.options.plugins;
        for (plugin in _ref) {
          options = _ref[plugin];
          jQuery(this.element)[plugin]('destroy');
        }
        return jQuery.Widget.prototype.destroy.call(this);
      },
      disable: function() {
        var _this = this;

        this.element.attr("contentEditable", false);
        this.element.unbind("focus", this._activated);
        this.element.unbind("blur", this._deactivated);
        this.element.unbind("keyup paste change", this._checkModified);
        this.element.unbind("keyup", this._keys);
        this.element.unbind("keydown", this._syskeys);
        this.element.unbind("keyup mouseup", this._checkSelection);
        this.bound = false;
        jQuery(this.element).removeClass('isModified');
        jQuery(this.element).removeClass('inEditMode');
        this.element.parents('a').andSelf().each(function(idx, elem) {
          var element;

          element = jQuery(elem);
          if (!element.is('a')) {
            return;
          }
          if (!_this.originalHref) {
            return;
          }
          return element.attr('href', _this.originalHref);
        });
        return this._trigger("disabled", null);
      },
      enable: function() {
        var _this = this;

        this.element.parents('a[href]').andSelf().each(function(idx, elem) {
          var element;

          element = jQuery(elem);
          if (!element.is('a[href]')) {
            return;
          }
          _this.originalHref = element.attr('href');
          return element.removeAttr('href');
        });
        this.element.attr("contentEditable", true);
        if (!this.element.html().trim()) {
          this.element.html(this.options.placeholder);
          this.element.css({
            'min-width': this.element.innerWidth(),
            'min-height': this.element.innerHeight()
          });
        }
        if (!this.bound) {
          this.element.bind("focus", this, this._activated);
          this.element.bind("blur", this, this._deactivated);
          this.element.bind("keyup paste change", this, this._checkModified);
          this.element.bind("keyup", this, this._keys);
          this.element.bind("keydown", this, this._syskeys);
          this.element.bind("keyup mouseup", this, this._checkSelection);
          this.bound = true;
        }
        if (this.options.forceStructured) {
          this._forceStructured();
        }
        return this._trigger("enabled", null);
      },
      activate: function() {
        return this.element.focus();
      },
      containsSelection: function() {
        var range;

        range = this.getSelection();
        return this.element.has(range.startContainer).length > 0;
      },
      getSelection: function() {
        var range, sel;

        sel = rangy.getSelection();
        range = null;
        if (sel.rangeCount > 0) {
          range = sel.getRangeAt(0);
        } else {
          range = rangy.createRange();
        }
        return range;
      },
      restoreSelection: function(range) {
        var sel;

        sel = rangy.getSelection();
        return sel.setSingleRange(range);
      },
      replaceSelection: function(cb) {
        var newTextNode, r, range, sel, t;

        if (navigator.appName === 'Microsoft Internet Explorer') {
          t = document.selection.createRange().text;
          r = document.selection.createRange();
          return r.pasteHTML(cb(t));
        } else {
          sel = window.getSelection();
          range = sel.getRangeAt(0);
          newTextNode = document.createTextNode(cb(range.extractContents()));
          range.insertNode(newTextNode);
          range.setStartAfter(newTextNode);
          sel.removeAllRanges();
          return sel.addRange(range);
        }
      },
      replaceSelectionHTML: function(cb) {
        var r, range, range_content, range_content_jq, range_parent, range_parent_jq, replacement, sel, t;

        if (navigator.appName === 'Microsoft Internet Explorer') {
          t = document.selection.createRange().text;
          r = document.selection.createRange();
          return r.pasteHTML(cb(t));
        } else {
          sel = window.getSelection();
          range = sel.getRangeAt(0);
          console.log(range);
          range_parent = range.commonAncestorContainer;
          if (range_parent.nodeType !== 1) {
            range_parent = range_parent.parentNode;
          }
          range_content = range.cloneContents();
          range_parent_jq = jQuery(range_parent);
          range_content_jq = jQuery("<div></div>");
          range_content_jq[0].appendChild(range_content);
          replacement = cb(range_parent_jq, range_content_jq);
          range.deleteContents();
          if (replacement) {
            range.insertNode($('<span>' + replacement + '</span>')[0]);
          }
          sel.removeAllRanges();
          return sel.addRange(range);
        }
      },
      removeAllSelections: function() {
        if (navigator.appName === 'Microsoft Internet Explorer') {
          return range.empty();
        } else {
          return window.getSelection().removeAllRanges();
        }
      },
      getContents: function() {
        var cleanup, contentClone, plugin;

        contentClone = this.element.clone();
        for (plugin in this.options.plugins) {
          cleanup = jQuery(this.element).data(plugin).cleanupContentClone;
          if (!jQuery.isFunction(cleanup)) {
            continue;
          }
          jQuery(this.element)[plugin]('cleanupContentClone', contentClone);
        }
        return contentClone.html();
      },
      setContents: function(contents) {
        return this.element.html(contents);
      },
      isModified: function() {
        if (!this.previousContent) {
          this.previousContent = this.originalContent;
        }
        return this.previousContent !== this.getContents();
      },
      setUnmodified: function() {
        jQuery(this.element).removeClass('isModified');
        return this.previousContent = this.getContents();
      },
      setModified: function() {
        jQuery(this.element).addClass('isModified');
        return this._trigger('modified', null, {
          editable: this,
          content: this.getContents()
        });
      },
      restoreOriginalContent: function() {
        return this.element.html(this.originalContent);
      },
      execute: function(command, value) {
        if (document.execCommand(command, false, value)) {
          return this.element.trigger("change");
        }
      },
      protectFocusFrom: function(el) {
        var _this = this;

        return el.bind("mousedown", function(event) {
          if ((jQuery('.dropdown-form:visible').length)) {
            return;
          }
          event.preventDefault();
          _this._protectToolbarFocus = true;
          return setTimeout(function() {
            return _this._protectToolbarFocus = false;
          }, 300);
        });
      },
      keepActivated: function(_keepActivated) {
        this._keepActivated = _keepActivated;
      },
      _generateUUID: function() {
        var S4;

        S4 = function() {
          return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
        };
        return "" + (S4()) + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + "-" + (S4()) + (S4()) + (S4());
      },
      _prepareToolbar: function() {
        var defaults, plugin, populate, toolbarOptions;

        this.toolbar = jQuery('<div class="hallotoolbar"></div>').hide();
        if (this.options.toolbarCssClass) {
          this.toolbar.addClass(this.options.toolbarCssClass);
        }
        defaults = {
          editable: this,
          parentElement: this.options.parentElement,
          toolbar: this.toolbar,
          positionAbove: this.options.toolbarPositionAbove
        };
        toolbarOptions = $.extend({}, defaults, this.options.toolbarOptions);
        this.element[this.options.toolbar](toolbarOptions);
        for (plugin in this.options.plugins) {
          populate = jQuery(this.element).data(plugin).populateToolbar;
          if (!jQuery.isFunction(populate)) {
            continue;
          }
          this.element[plugin]('populateToolbar', this.toolbar);
        }
        this.element[this.options.toolbar]('setPosition');
        return this.protectFocusFrom(this.toolbar);
      },
      changeToolbar: function(element, toolbar, hide) {
        var originalToolbar;

        if (hide == null) {
          hide = false;
        }
        originalToolbar = this.options.toolbar;
        this.options.parentElement = element;
        if (toolbar) {
          this.options.toolbar = toolbar;
        }
        if (!this.toolbar) {
          return;
        }
        this.element[originalToolbar]('destroy');
        this.toolbar.remove();
        this._prepareToolbar();
        if (hide) {
          return this.toolbar.hide();
        }
      },
      _checkModified: function(event) {
        var widget;

        widget = event.data;
        if (widget.isModified()) {
          return widget.setModified();
        }
      },
      _keys: function(event) {
        var widget;

        widget = event.data;
        if (event.keyCode === 66 && event.ctrlKey) {
          document.execCommand("bold", false);
        }
        if (event.keyCode === 73 && event.ctrlKey) {
          document.execCommand("italic", false);
        }
        if (event.keyCode === 85 && event.ctrlKey) {
          return document.execCommand("underline", false);
        }
      },
      _syskeys: function(event) {
        var li, range, widget;

        widget = event.data;
        if (event.keyCode === 9 && !event.shiftKey) {
          range = window.getSelection().getRangeAt();
          li = $(range.startContainer).closest('li');
          if (!li.length) {
            li = $(range.endContainer).closest('li');
          }
          if (li.length) {
            if (widget.element.closest('li').length && widget.element.closest('li')[0] === li[0]) {
              return;
            }
            document.execCommand("indent", false);
            event.preventDefault();
          }
        }
        if (event.keyCode === 9 && event.shiftKey) {
          range = window.getSelection().getRangeAt();
          li = $(range.startContainer).closest('li');
          if (!li.length) {
            li = $(range.endContainer).closest('li');
          }
          if (li.length) {
            if (widget.element.closest('li').length && widget.element.closest('li')[0] === li[0]) {
              return;
            }
            document.execCommand("outdent", false);
            return event.preventDefault();
          }
        }
      },
      _rangesEqual: function(r1, r2) {
        if (r1.startContainer !== r2.startContainer) {
          return false;
        }
        if (r1.startOffset !== r2.startOffset) {
          return false;
        }
        if (r1.endContainer !== r2.endContainer) {
          return false;
        }
        if (r1.endOffset !== r2.endOffset) {
          return false;
        }
        return true;
      },
      _checkSelection: function(event) {
        var widget;

        if (event.keyCode === 27) {
          return;
        }
        widget = event.data;
        return setTimeout(function() {
          var sel;

          sel = widget.getSelection();
          if (widget._isEmptySelection(sel) || widget._isEmptyRange(sel)) {
            if (widget.selection) {
              widget.selection = null;
              widget._trigger("unselected", null, {
                editable: widget,
                originalEvent: event
              });
            }
            return;
          }
          if (!widget.selection || !widget._rangesEqual(sel, widget.selection)) {
            widget.selection = sel.cloneRange();
            return widget._trigger("selected", null, {
              editable: widget,
              selection: widget.selection,
              ranges: [widget.selection],
              originalEvent: event
            });
          }
        }, 0);
      },
      _isEmptySelection: function(selection) {
        if (selection.type === "Caret") {
          return true;
        }
        return false;
      },
      _isEmptyRange: function(range) {
        if (range.collapsed) {
          return true;
        }
        if (range.isCollapsed) {
          if (typeof range.isCollapsed === 'function') {
            return range.isCollapsed();
          }
          return range.isCollapsed;
        }
        return false;
      },
      turnOn: function() {
        var force_focus,
          _this = this;

        if (this.getContents() === this.options.placeholder) {
          force_focus = function() {
            var content_node, new_range;

            if (!jQuery(_this.element).hasClass('inEditMode')) {
              return;
            }
            new_range = document.createRange();
            content_node = jQuery(_this.element)[0];
            new_range.selectNodeContents(content_node);
            window.getSelection().removeAllRanges();
            return window.getSelection().addRange(new_range);
          };
          window.setTimeout(force_focus, 1);
        }
        jQuery(this.element).addClass('inEditMode');
        return this._trigger("activated", null, this);
      },
      turnOff: function() {
        var contents;

        jQuery(this.element).removeClass('inEditMode');
        this._trigger("deactivated", this);
        jQuery('.misspelled').remove();
        contents = this.getContents();
        if (contents === '' || contents === ' ' || contents === '<br>' || contents === this.options.placeholder) {
          return this.setContents(this.options.placeholder);
        }
      },
      store: function() {
        var contents;

        if (this.options.store_callback) {
          contents = this.getContents();
          if (contents === '' || contents === ' ' || contents === '<br>' || contents === this.options.placeholder) {
            this.setContents('');
          }
          return this.options.store_callback(this.getContents());
        }
      },
      _activated: function(event) {
        var _this = this;

        if ((jQuery('.dropdown-form:visible').length)) {
          jQuery('.dropdown-form:visible').each(function(index, item) {
            return jQuery(item).trigger('hide');
          });
          event.data.turnOff();
        }
        return event.data.turnOn();
      },
      _deactivated: function(event) {
        var contents;

        if (window.debug_hallotoolbar) {
          return;
        }
        if (event.data.options.store_callback) {
          contents = event.data.getContents();
          if (contents === '' || contents === ' ' || contents === '<br>' || contents === event.data.options.placeholder) {
            event.data.setContents('');
          }
          event.data.options.store_callback(event.data.getContents());
        }
        if (event.data._keepActivated) {
          return;
        }
        if ((jQuery('.dropdown-form:visible').length)) {
          return;
        }
        if (event.data._protectToolbarFocus !== true) {
          return event.data.turnOff();
        } else {
          return setTimeout(function() {
            return jQuery(event.data.element).focus();
          }, 300);
        }
      },
      _forceStructured: function(event) {
        var e;

        try {
          return document.execCommand('styleWithCSS', 0, false);
        } catch (_error) {
          e = _error;
          try {
            return document.execCommand('useCSS', 0, true);
          } catch (_error) {
            e = _error;
            try {
              return document.execCommand('styleWithCSS', false, false);
            } catch (_error) {
              e = _error;
            }
          }
        }
      },
      checkTouch: function() {
        return this.options.touchScreen = !!('createTouch' in document);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloformat", {
      options: {
        editable: null,
        uuid: "",
        formattings: {
          bold: true,
          italic: true,
          strikeThrough: false,
          underline: false
        },
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset, enabled, format, widget, _ref,
          _this = this;

        widget = this;
        buttonset = jQuery("<span class=\"" + widget.widgetName + "\"></span>");
        buttonize = function(format) {
          var buttonHolder, format_label;

          format_label = format;
          if (window.action_list && window.action_list['hallojs_' + format] !== void 0) {
            format_label = window.action_list['hallojs_' + format].title;
          }
          buttonHolder = jQuery('<span></span>');
          buttonHolder.hallobutton({
            label: format_label,
            editable: _this.options.editable,
            command: format,
            uuid: _this.options.uuid,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonHolder);
        };
        _ref = this.options.formattings;
        for (format in _ref) {
          enabled = _ref[format];
          if (enabled) {
            buttonize(format);
          }
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallosourcedescription', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['__associate'],
        buttonCssClass: null
      },
      _create: function() {
        return this;
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        setup = function() {
          root.citehandler.get().setupSourceDescriptions(target, _this.options.editable, jQuery.proxy(_this._addElement, _this));
          return true;
        };
        buttonset.append(target);
        buttonset.append(this._prepareButton(setup, target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var containingElement, contentArea, el, element, in_document, _i, _len, _ref;

        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        containingElement = this.options.editable.element.get(0).tagName.toLowerCase();
        in_document = this.options.editable.element.closest('.Document').length > 0;
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!in_document && element === "__quote") {
            continue;
          }
          el = this._addElement(element, containingElement);
          if (el) {
            contentArea.append(el);
          }
        }
        return contentArea;
      },
      _keep_selection_replace_callback: function(parent, old) {
        var has_block_contents, nr, range, replacement;

        replacement = false;
        has_block_contents = utils.hasBlockElement(old);
        if (old.html() !== "" && !has_block_contents) {
          replacement = "<span class=\"selection\">" + old.html() + "</span>";
        } else {
          replacement = "<span class=\"selection\">&nbsp;</span>";
        }
        nr = $('<span>' + replacement + '</span>');
        if (has_block_contents) {
          range = window.getSelection().getRangeAt();
          range.setStartAfter(range.endContainer);
          range.insertNode(nr[0]);
        } else {
          range = window.getSelection().getRangeAt();
          range.deleteContents();
          range.insertNode(nr[0]);
        }
        replacement = false;
        return replacement;
      },
      _addElement: function(element, containing_element, publication_type, data) {
        var el, element_text, has_auto_citation, has_citation, this_editable,
          _this = this;

        if (element === '__quote') {
          element_text = utils.tr('quote');
          if (window.action_list && window.action_list['QuoteNugget'] !== void 0) {
            element_text = window.action_list['QuoteNugget'].title;
          }
        } else if (element === '__associate') {
          element_text = utils.tr('associate');
          if (window.action_list && window.action_list['hallojs_sourcedescription'] !== void 0) {
            element_text = window.action_list['hallojs_sourcedescription'].title;
          }
        } else {
          element_text = element;
        }
        if (element_text.length > 48) {
          element_text = element_text.substring(0, 48) + '...';
        }
        el = jQuery("<button class=\"publication-selector\">" + element_text + "</button>");
        if (publication_type) {
          el.addClass(publication_type);
        }
        if (containing_element === element) {
          el.addClass("selected");
        }
        if (data) {
          el.append("<span class=\"data\" style=\"display:none\">" + data + "</span>");
        }
        has_citation = jQuery(this.options.editable.element).find(".sourcedescription-" + data).length;
        if (has_citation) {
          has_auto_citation = jQuery(this.options.editable.element).find(".sourcedescription-" + data).hasClass('auto-cite');
          if (!has_auto_citation) {
            el.attr("disabled", "disabled");
            el.addClass('used');
          }
        }
        this_editable = this.options.editable;
        return el.bind("click", function(ev) {
          var nugget, scb;

          if (element === '__associate') {
            this_editable.replaceSelectionHTML(_this._keep_selection_replace_callback);
            window.__start_mini_activity = true;
            return $('body').hallopublicationselector({
              'editable': this_editable
            });
          } else if (element === '__quote') {
            this_editable.replaceSelectionHTML(_this._keep_selection_replace_callback);
            window.__start_mini_activity = true;
            return $('body').halloquoteselector({
              'editable': this_editable
            });
          } else {
            scb = function(parent, old) {
              var has_block_contents, replacement;

              replacement = false;
              has_block_contents = utils.hasBlockElement(old);
              if (old.html() !== "" && !has_block_contents) {
                replacement = "<span class=\"citation\">" + old.html() + "</span>";
              } else {
                replacement = "";
              }
              replacement += "<span class=\"cite sourcedescription-" + data + "\">" + element + "</span>";
              if (has_block_contents) {
                utils.info(utils.tr('warning selected block contents'));
                window.getSelection().removeAllRanges();
                parent.append(replacement);
                replacement = false;
              }
              return replacement;
            };
            this_editable.replaceSelectionHTML(scb);
            nugget = new DOMNugget();
            return nugget.updateSourceDescriptionData(this_editable.element).done(function() {
              return nugget.resetCitations(_this.options.editable.element);
            });
          }
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'sourcedescription';
        if (window.action_list && window.action_list['hallojs_sourcedescription'] !== void 0) {
          button_label = window.action_list['hallojs_sourcedescription'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'sourcedescription',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallolists", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        lists: {
          ordered: true,
          unordered: true
        },
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(type, label) {
          var butten_label, buttonElement, button_label;

          butten_label = label;
          if (window.action_list && window.action_list['hallojs_' + label] !== void 0) {
            button_label = window.action_list['hallojs_' + label].title;
          }
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: button_label,
            command: "insert" + type + "List",
            icon: "icon-list-" + (label.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        if (this.options.lists.ordered) {
          buttonize("Ordered", "OL");
        }
        if (this.options.lists.unordered) {
          buttonize("Unordered", "UL");
        }
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallotable', {
      dropdownform: null,
      tmpid: 0,
      selected_row: null,
      selected_cell: null,
      html: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['rows', 'cols', 'border'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function() {
          var range, recalc, table, table_placeholder, td, tr;

          _this.tmpid = 'mod_' + (new Date()).getTime();
          if (!window.getSelection().rangeCount) {
            return false;
          }
          range = window.getSelection().getRangeAt();
          table = $(range.startContainer).closest('table');
          if (!table.length) {
            table = $(range.endContainer).closest('table');
          }
          tr = $(range.startContainer).closest('tr');
          if (!tr.length) {
            tr = $(range.endContainer).closest('tr');
          }
          td = $(range.startContainer).closest('td');
          if (!td.length) {
            td = $(range.endContainer).closest('td');
          }
          if (!td.length) {
            td = $(range.startContainer).closest('th');
          }
          if (!td.length) {
            td = $(range.endContainer).closest('th');
          }
          if (table.length) {
            _this.options.editable.element.find('table').each(function(index, item) {
              var border, cols, heading, rows;

              if (table[0] === item) {
                $(item).attr('id', _this.tmpid);
                rows = 0;
                cols = 0;
                border = $(item).hasClass('table-border');
                heading = false;
                $(item).find('tr').each(function(rindx, row) {
                  if (tr[0] === row) {
                    _this.selected_row = $(row);
                  }
                  $(row).find('th').each(function(cindx, col) {
                    if (td[0] === col) {
                      _this.selected_cell = $(col);
                    }
                    if (cols < cindx) {
                      cols = cindx;
                    }
                    return heading = true;
                  });
                  $(row).find('td').each(function(cindx, col) {
                    if (td[0] === col) {
                      _this.selected_cell = $(col);
                    }
                    if (cols < cindx) {
                      return cols = cindx;
                    }
                  });
                  if (rows < rindx) {
                    return rows = rindx;
                  }
                });
                $('#' + contentId + 'cols').val(cols + 1);
                $('#' + contentId + 'rows').val(rows + 1);
                $('#' + contentId + 'border').attr('checked', border);
                return $('#' + contentId + 'heading').attr('checked', heading);
              }
            });
          } else {
            table_placeholder = '<table id="' + _this.tmpid + '" border="1" class="table-border"></table>';
            document.execCommand('insertHTML', false, table_placeholder);
          }
          recalc = function() {
            return _this.recalcHTML(target.attr('id'));
          };
          window.setTimeout(recalc, 300);
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        target.bind('hide', function() {
          return jQuery('table').each(function(index, item) {
            return jQuery(item).removeAttr('id');
          });
        });
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      updateTableHTML: function(contentId) {
        var border, c, cols, heading, irow, r, row, rows, table, _i, _j,
          _this = this;

        table = $('#' + this.tmpid);
        rows = $('#' + contentId + 'rows').val();
        cols = $('#' + contentId + 'cols').val();
        border = $('#' + contentId + 'border').is(':checked');
        heading = $('#' + contentId + 'heading').is(':checked');
        if (rows === '' || cols === '' || parseInt(rows) === NaN || parseInt(cols) === NaN || rows < 0 || cols < 0) {
          return false;
        }
        if (border) {
          table.attr('class', 'table-border');
          table.attr('border', '1');
        } else {
          table.attr('class', 'table-no-border');
          table.removeAttr('border');
        }
        irow = 0;
        table.find('tr').each(function(rindx, row) {
          var c, icol, _i, _results;

          irow = rindx + 1;
          if (irow > rows) {
            $(row).remove();
            return;
          }
          icol = 0;
          $(row).find('th').each(function(cindx, cell) {
            icol = cindx + 1;
            if (icol > cols) {
              $(cell).remove();
              return;
            }
            if (!heading) {
              return $(cell).replaceWith('<td>' + $(cell).html() + '</td>');
            }
          });
          $(row).find('td').each(function(cindx, cell) {
            icol = cindx + 1;
            if (icol > cols) {
              $(cell).remove();
              return;
            }
            if (heading && rindx === 0) {
              return $(cell).replaceWith('<th>' + $(cell).html() + '</th>');
            }
          });
          if (icol < cols) {
            icol = icol + 1;
            _results = [];
            for (c = _i = icol; _i <= cols; c = _i += 1) {
              if (heading && irow === 1) {
                _results.push($(row).append('<th>' + utils.tr('heading') + '</th>'));
              } else {
                _results.push($(row).append('<td>' + utils.tr('content') + '</td>'));
              }
            }
            return _results;
          }
        });
        if (irow < rows) {
          irow = irow + 1;
          for (r = _i = irow; _i <= rows; r = _i += 1) {
            row = '<tr>';
            for (c = _j = 1; _j <= cols; c = _j += 1) {
              if (heading && r === 1) {
                row += '<th>' + utils.tr('heading') + '</th>';
              } else {
                row += '<td>' + utils.tr('content') + '</td>';
              }
            }
            row += '</tr>';
            table.append(row);
          }
        }
        return table[0].outerHTML;
      },
      recalcHTML: function(contentId) {
        this.html = this.updateTableHTML(contentId);
        return this.options.editable.store();
      },
      _prepareDropdown: function(contentId) {
        var addButton, addInput, contentArea, contentAreaUL,
          _this = this;

        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        addInput = function(type, element, default_value) {
          var el, elid, recalc;

          elid = "" + contentId + element;
          el = jQuery(("<li><label for\"" + elid + "\">") + utils.tr(element) + ("</label><input type=\"" + type + "\" id=\"" + elid + "\"/></li>"));
          if (el.find('input').is('input[type="checkbox"]') && default_value === "true") {
            el.find('input').attr('checked', true);
          } else if (default_value) {
            el.find('input').val(default_value);
          }
          recalc = function() {
            return _this.recalcHTML(contentId);
          };
          el.find('input').bind('keyup change', recalc);
          return el;
        };
        addButton = function(element, event_handler) {
          var el;

          el = jQuery("<li><button class=\"action_button\" id=\"" + _this.tmpid + element + "\">" + utils.tr(element) + "</button></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        contentAreaUL.append(addInput("text", "rows", "3"));
        contentAreaUL.append(addInput("text", "cols", "3"));
        contentAreaUL.append(addInput("checkbox", "heading", "true"));
        contentAreaUL.append(addInput("checkbox", "border", "true"));
        contentAreaUL.append(addButton("apply", function() {
          var range;

          _this.recalcHTML(contentId);
          window.getSelection().removeAllRanges();
          range = document.createRange();
          range.selectNode($('#' + _this.tmpid)[0]);
          window.getSelection().addRange(range);
          document.execCommand('insertHTML', false, _this.html);
          $('#' + _this.tmpid).removeAttr('id');
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        contentAreaUL.append(addButton("remove", function() {
          var range;

          window.getSelection().removeAllRanges();
          range = document.createRange();
          range.selectNode($('#' + _this.tmpid)[0]);
          window.getSelection().addRange(range);
          document.execCommand('delete', false);
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        return contentArea;
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'table';
        if (window.action_list && window.action_list['hallojs_table'] !== void 0) {
          button_label = window.action_list['hallojs_table'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'table',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallotipoverlay', {
      options: {
        editable: null,
        toolbar: null,
        selector: '.cite',
        tip_id: '#__hallotipoverlay',
        can_edit: false,
        data_cb: null,
        timeout: 500,
        default_css: {
          'position': 'fixed',
          'margin-top': '1em',
          'min-height': '2em',
          'min-width': '200px',
          'z-index': '99998',
          'top': '0',
          'left': '0'
        }
      },
      can_hide: 0,
      node: null,
      timeout: 0,
      tip_node: null,
      _create: function() {
        return this.bindEvents();
      },
      bindEvents: function() {
        var can_edit, hide_fn, show_fn;

        show_fn = jQuery.proxy(this._show, this);
        hide_fn = jQuery.proxy(this._hide, this);
        jQuery(window).bind('scroll', function(ev) {
          return hide_fn();
        });
        can_edit = this.options.can_edit;
        return jQuery(this.options.selector).live('mouseover', function(ev) {
          jQuery(this).attr('contenteditable', can_edit);
          return show_fn(this);
        });
      },
      _restartCheckHide: function() {
        var check_hide_fn;

        window.clearTimeout(this.timeout);
        check_hide_fn = jQuery.proxy(this._checkHide, this);
        return this.timeout = window.setTimeout(check_hide_fn, this.options.timeout);
      },
      _hide: function(cb) {
        var _this = this;

        if (this.tip_node && this.tip_node.length) {
          this.tip_node.unbind();
          this.tip_node.fadeOut(100, function() {
            _this.tip_node.remove();
            _this.can_hide = 0;
            _this.node = null;
            if (cb && !cb.target) {
              return cb();
            }
          });
        } else {
          this.can_hide = 0;
          this.node = null;
          if (cb && !cb.target) {
            cb();
          }
        }
        return window.clearTimeout(this.timeout);
      },
      _checkHide: function() {
        if (this.can_hide === 1) {
          this._restartCheckHide();
        }
        if (this.can_hide === 2) {
          return this._hide();
        }
      },
      _show: function(target) {
        var b_width, data, element, newleft, node_unbind, node_unbind_ptr, ov_height, ov_top, ov_width, position, w_height,
          _this = this;

        element = jQuery(target);
        if (this.can_hide > 0 && this.node && this.node.length && element[0] !== this.node[0]) {
          this._hide(function() {
            return _this._show(target);
          });
        }
        if (this.can_hide === 0) {
          data = '[dev] no callback defined for tipoverlay.options.data_cb: ' + element.html();
          if ((jQuery('#' + this.options.tip_id).length)) {
            jQuery('#' + this.options.tip_id).remove;
          }
          this.tip_node = jQuery('<span id="' + this.options.tip_id + '"></span>');
          this.tip_node.css(this.options.default_css);
          if (this.options.data_cb) {
            this.options.data_cb(this.tip_node, element);
          }
          jQuery('body').append(this.tip_node);
          ov_width = this.tip_node.width();
          ov_height = this.tip_node.height();
          b_width = jQuery('body').width() - 15;
          w_height = jQuery(window).height();
          position = element.offset();
          this.tip_node.css({
            'left': position.left,
            'top': position.top
          });
          if (position.left + ov_width > b_width) {
            newleft = b_width - ov_width;
            this.tip_node.css('left', newleft);
          }
          ov_top = position.top - jQuery('body').scrollTop();
          if (ov_top + ov_height > w_height) {
            this.tip_node.css('top', ov_top - 20 - ov_height);
          } else {
            this.tip_node.css('top', ov_top);
          }
          this.tip_node.hide();
          this.tip_node.fadeIn(300);
          this.can_hide = 2;
          this.node = element;
          node_unbind_ptr = null;
          node_unbind = function() {
            element.unbind('mouseleave', node_unbind_ptr);
            if (_this.node && _this.node.length && element[0] === _this.node[0]) {
              _this.can_hide = 2;
              return _this._restartCheckHide();
            }
          };
          node_unbind_ptr = node_unbind;
          element.bind('mouseleave', node_unbind_ptr);
          this.tip_node.bind('mouseenter', function() {
            _this.can_hide = 1;
            _this._restartCheckHide();
            return _this.tip_node.animate({
              'opacity': '1'
            });
          });
          return this.tip_node.bind('mouseleave', function() {
            _this.can_hide = 2;
            _this._restartCheckHide();
            return _this.tip_node.animate({
              'opacity': '0.6'
            });
          });
        }
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallocleanup', {
      dropdownform: null,
      tmpid: 0,
      html: null,
      debug: false,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['rows', 'cols', 'border'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function() {
          if (_this.debug) {
            console.log('check nugget');
          }
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var addButton, contentArea, contentAreaUL,
          _this = this;

        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        addButton = function(element, event_handler) {
          var button_label, button_tooltip, el;

          button_label = element;
          button_tooltip = element;
          if (window.action_list && window.action_list['hallojs_cleanup_' + element] !== void 0) {
            button_label = window.action_list['hallojs_cleanup_' + element].title;
            button_tooltip = window.action_list['hallojs_cleanup_' + element].tooltip;
          }
          el = jQuery("<div><button class=\"action_button\" id=\"" + _this.tmpid + element + "\" title=\"" + button_tooltip + "\">" + button_label + "</button></div>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        contentAreaUL.append(addButton("clean_html", function() {
          var dom, nugget;

          if (_this.debug) {
            console.log('cleanhtml');
          }
          jQuery('.misspelled').remove();
          dom = new IDOM();
          if (dom) {
            dom.fixNesting(_this.options.editable.element);
            dom.fixDeprecated(_this.options.editable.element);
            dom.fixAttributes(_this.options.editable.element);
            _this.options.editable.element.html(_this.options.editable.element.html().replace(/&nbsp;/g, ' '));
          }
          _this.dropdownform.hallodropdownform('hideForm');
          _this.options.editable.store();
          nugget = new DOMNugget();
          return nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
            return nugget.resetCitations(_this.options.editable.element);
          });
        }));
        return contentAreaUL.append(addButton("clean_plain", function() {
          var dom, nugget;

          jQuery('.misspelled').remove();
          dom = new IDOM();
          dom.plainTextParagraphs(_this.options.editable.element);
          _this.dropdownform.hallodropdownform('hideForm');
          _this.options.editable.store();
          nugget = new DOMNugget();
          return nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
            return nugget.resetCitations(_this.options.editable.element);
          });
        }));
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'cleanup';
        if (window.action_list && window.action_list['hallojs_cleanup'] !== void 0) {
          button_label = window.action_list['hallojs_cleanup'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'cleanup',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloblock', {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['h1', 'h2', 'h3', 'p'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, target;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        buttonset.append(target);
        buttonset.append(this._prepareButton(target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var addElement, containingElement, contentArea, element, _i, _len, _ref,
          _this = this;

        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        containingElement = this.options.editable.element.get(0).tagName.toLowerCase();
        addElement = function(element) {
          var el, queryState;

          el = jQuery("<button class='blockselector'>" + element + "</button>");
          if (containingElement === element) {
            el.addClass('selected');
          }
          if (containingElement !== 'div') {
            el.addClass('disabled');
          }
          el.bind('click', function() {
            if (el.hasClass('disabled')) {
              return;
            }
            if (element === 'none') {
              _this.options.editable.execute('removeFormat');
              return;
            }
            if (navigator.appName === 'Microsoft Internet Explorer') {
              return _this.options.editable.execute('FormatBlock', '<' + element.toUpperCase() + '>');
            } else {
              return _this.options.editable.execute('formatBlock', element.toUpperCase());
            }
          });
          queryState = function(event) {
            var block;

            block = document.queryCommandValue('formatBlock');
            if (block.toLowerCase() === element) {
              el.addClass('selected');
              return;
            }
            return el.removeClass('selected');
          };
          _this.options.editable.element.bind('keyup paste change mouseup', queryState);
          _this.options.editable.element.bind('halloenabled', function() {
            return _this.options.editable.element.bind('keyup paste change mouseup', queryState);
          });
          _this.options.editable.element.bind('hallodisabled', function() {
            return _this.options.editable.element.unbind('keyup paste change mouseup', queryState);
          });
          return el;
        };
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          contentArea.append(addElement(element));
        }
        return contentArea;
      },
      _prepareButton: function(target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'block';
        if (window.action_list && window.action_list['hallojs_block'] !== void 0) {
          button_label = window.action_list['hallojs_block'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'block',
          icon: 'icon-text-height',
          target: target,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  jQuery.extend(jQuery.fn, {
    selectText: function() {
      var element, range, selection;

      element = this[0];
      if (document.body.createTextRange) {
        range = document.body.createTextRange();
        range.moveToElementText(element);
        return range.select();
      } else if (window.getSelection) {
        selection = window.getSelection();
        range = document.createRange();
        range.selectNodeContents(element);
        selection.removeAllRanges();
        return selection.addRange(range);
      }
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.citehandler = (function() {
    var _instance;

    function citehandler() {}

    _instance = void 0;

    citehandler.get = function(args) {
      return _instance != null ? _instance : _instance = new _Citehandler(args);
    };

    return citehandler;

  })();

  _Citehandler = (function() {
    _Citehandler.prototype.tips = null;

    _Citehandler.prototype.editable = null;

    function _Citehandler(args) {
      this.args = args;
      this.settings = {};
      this.citation_data = {};
      this.tips = jQuery('<span></span>');
      this.overlay_id = 'cite_overlay';
      this.sourcedescription_loid = 0;
      this.tips.hallotipoverlay({
        'selector': '.cite',
        'tip_id': this.overlay_id,
        'data_cb': jQuery.proxy(this._makeTip, this)
      });
    }

    _Citehandler.prototype.setupSourceDescriptions = function(target, editable, add_element_cb) {
      var domnugget,
        _this = this;

      target.find('.SourceDescription').remove();
      domnugget = new DOMNugget();
      return domnugget.getSourceDescriptions(editable.element.closest('.nugget')).done(function(sourcedescriptions) {
        return jQuery.each(sourcedescriptions, function(index, item) {
          return target.append(add_element_cb(item.title, null, item.type, item.loid).addClass('SourceDescription'));
        });
      });
    };

    _Citehandler.prototype._updateSettings = function() {
      var _this = this;

      if (omc_settings) {
        return omc_settings.getSettings().done(function(current_settings) {
          return _this.settings = current_settings;
        });
      }
    };

    _Citehandler.prototype._updateCitationDisplay = function(element) {
      var domnugget;

      this.footnote = '';
      this.bibliography = '';
      this.citation_data = {};
      this.sourcedescription_loid = 0;
      domnugget = new DOMNugget();
      return domnugget.getSourceDescriptionData(element);
    };

    _Citehandler.prototype._makeTip = function(target, element) {
      var ov_data,
        _this = this;

      this._updateSettings;
      ov_data = '';
      return this._updateCitationDisplay(element).done(function(current_citation_data) {
        var sourcedescriptioneditor;

        _this.citation_data = current_citation_data;
        ov_data += '<ul>';
        ov_data += '<li>' + utils.tr('citation in') + ' ' + _this.citation_data.citation_style + ': ' + _this.citation_data.cite + '</li>';
        ov_data += '<li>' + utils.tr('footnote') + ': ' + _this.citation_data.footnote + '</li>';
        ov_data += '<li>' + utils.tr('bibliography') + ': ' + _this.citation_data.bibliography + '</li>';
        ov_data += '</ul><ul>';
        ov_data += '<li><button class="edit view_button">' + utils.tr('edit') + '</button>';
        if (!_this.editable || _this.editable.nugget_only) {
          _this.editable = {};
          _this.editable.element = element.closest('.nugget');
          _this.editable.nugget_only = true;
        }
        if (_this.editable.element) {
          if (element.closest('.cite').hasClass('auto-cite')) {
            ov_data += '<button class="remove action_button">' + utils.tr('remove from nugget') + '</button></li>';
          } else {
            ov_data += '<button class="remove action_button">' + utils.tr('remove') + '</button></li>';
          }
        }
        ov_data += '</ul>';
        target.append(ov_data);
        sourcedescriptioneditor = function() {
          return jQuery('body').hallosourcedescriptioneditor({
            'loid': _this.citation_data.loid,
            'data': _this.citation_data,
            'element': element,
            'tip_element': target,
            'back': true
          });
        };
        target.find('.edit').bind('click', sourcedescriptioneditor);
        element.bind('click', sourcedescriptioneditor);
        target.find('.remove').bind('click', function(ev) {
          var citation, citation_html, cite, is_auto_cite, loid, nugget, range, selection;

          loid = element.closest('.cite').attr('class').replace(/^.*sourcedescription-(\d*).*$/, '$1');
          citation = element.closest('.cite').prev('.citation');
          is_auto_cite = element.closest('.cite').hasClass('auto-cite');
          citation_html = '';
          selection = window.getSelection();
          if (citation.length) {
            citation_html = citation.html();
            range = document.createRange();
            range.selectNodeContents(citation[0]);
            selection.removeAllRanges();
            selection.addRange(range);
            if (document.execCommand('delete', false)) {
              document.execCommand('insertHTML', false, citation_html);
            }
          }
          if ((element.closest('.cite').length)) {
            cite = element.closest('.cite');
            cite.attr('contenteditable', true);
            range = document.createRange();
            range.selectNodeContents(cite[0]);
            selection.removeAllRanges();
            selection.addRange(range);
            if (!document.execCommand('delete', false)) {
              $('.sourcedescription-' + loid).prev('.citation').replaceWith(citation_html);
              $('.sourcedescription-' + loid).remove();
            }
            $('.cite').attr('contenteditable', false);
          }
          jQuery('#' + _this.overlay_id).remove();
          nugget = new DOMNugget();
          if (is_auto_cite) {
            nugget.removeSourceDescription(_this.editable.element, _this.citation_data.loid);
          }
          if (_this.editable.element) {
            _this.editable.element.find('.auto-cite').remove();
            return nugget.updateSourceDescriptionData(_this.editable.element).done(function() {
              return nugget.resetCitations(_this.editable.element);
            });
          }
        });
        if (!_this.citation_data.processed) {
          target.find('.edit').remove();
          return target.find('.remove').closest('ul').prev('ul').remove();
        }
      });
    };

    return _Citehandler;

  })();

  (function(jQuery) {
    return jQuery.widget('IKS.hallonuggetselector', {
      widget: null,
      selectables: '',
      options: {
        editable: null,
        hyperlink_id: null,
        range: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        data: null,
        loid: null,
        has_changed: false,
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var _this = this;

        this.widget = jQuery('<div id="nugget_selector"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.append('<div id="nugget_list" style="background-color:white; margin-bottom: 4px"></div>');
        this.widget.append('<button class="nugget_selector_back view_button">' + utils.tr('back') + '</button>');
        this.widget.append('<button class="nugget_selector_apply action_button">' + utils.tr('apply') + '</button>');
        this.widget.css(this.options.default_css);
        this.widget.find('.nugget_selector_back').bind('click', function() {
          return _this.back();
        });
        this.widget.find('.nugget_selector_apply').bind('click', function() {
          return _this.apply();
        });
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery('body').width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        jQuery.when(utils.getJavaScript('lib/refeus/Utilities/List.js')).done(function() {
          _this.list = new List();
          _this.list.init($('#nugget_list'), omc.NuggetExtendList);
          return _this.list.setupItemActions($('#nugget_list'), {
            'node_dblclick': function(node) {
              _this.select(node);
              return _this.apply();
            },
            'node_select': function(node) {
              return _this.select(node);
            }
          });
        });
        return jQuery(window).resize();
      },
      apply: function() {
        var dfo, nugget_loid,
          _this = this;

        nugget_loid = this.current_node.replace(/node_/, '');
        dfo = omc.getInstance(nugget_loid);
        dfo.fail(function(error) {
          return _this.back();
        });
        return dfo.done(function(nugget) {
          var data, hyperlink, new_href;

          data = nugget.loid;
          new_href = 'refeus://localhost/database/self/Variation/' + nugget.guid;
          hyperlink = jQuery('#' + _this.options.hyperlink_id);
          hyperlink.attr('href', new_href);
          hyperlink.removeAttr('id');
          if (hyperlink.text() === utils.tr('no title provided')) {
            hyperlink.text(nugget.display_name);
          }
          _this.options.editable.store();
          return _this.back();
        });
      },
      back: function() {
        this.widget.remove();
        jQuery('#' + this.options.hyperlink_id).removeAttr('id');
        return jQuery('body').css({
          'overflow': 'auto'
        });
      },
      select: function(node) {
        this.current_node = jQuery(node).attr('id');
        return this.current_node_label = jQuery(node).text();
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallosourcedescriptioneditor', {
      widget: null,
      selectables: '',
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        back: true,
        data: null,
        loid: null,
        has_changed: false,
        publication: {},
        values: {},
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var inputs, nugget,
          _this = this;

        if (this.options.tip_element) {
          this.options.tip_element.hide();
        }
        if (jQuery('.selectBox-dropdown-menu').length) {
          jQuery('.selectBox-dropdown-menu').remove();
        }
        if (jQuery('#cite_editor').length) {
          jQuery('#cite_editor').remove();
        }
        inputs = jQuery('<div id="cite_editor_inputs"></div>');
        this.widget = jQuery('<div id="cite_editor"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.css(this.options.default_css);
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery(window).width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        nugget = new DOMNugget();
        nugget.getAllSourceDescriptionAttributes(this.options.loid).done(function(sdi) {
          var str_html_buttons;

          _this.options.publication = sdi.publication;
          _this.selectables = '<option value="">' + utils.tr('more') + '</option>';
          jQuery.each(sdi.description, function(index, value) {
            var qvalue;

            if (index === '__AUTOIDENT' || index === 'loid' || index === 'type' || index === 'tr_title') {
              return;
            }
            if (sdi.instance[index] === void 0) {
              return;
            }
            if (!value.label) {
              return;
            }
            qvalue = sdi.instance[index].replace(/"/g, '&#34;');
            if (qvalue === '') {
              return _this.selectables += '<option value="' + index + '">' + value.label + '</option>';
            } else {
              return inputs.append(_this._createInput(index, value.label, qvalue));
            }
          });
          _this.widget.append('<div><label>&nbsp;</label><div class="max_width"><select id="sourcedescriptioneditor_selectable">' + _this.selectables + '</select></div></div>');
          _this.widget.append(inputs);
          str_html_buttons = '';
          if (_this.options.back) {
            str_html_buttons = '<button id="sourcedescriptioneditor_back" class="view_button">' + utils.tr('back') + '</button>';
          }
          str_html_buttons += '<button id="sourcedescriptioneditor_apply" class="action_button">' + utils.tr('apply') + '</button>';
          _this.widget.append('<div>' + str_html_buttons + '</div>');
          if (jQuery('body').selectBox) {
            jQuery('#sourcedescriptioneditor_selectable').selectBox();
          }
          jQuery('#sourcedescriptioneditor_selectable').bind('change', function(ev) {
            var input, new_input, sels;

            new_input = jQuery(ev.target).val();
            if (new_input === '') {
              return;
            }
            input = _this._createInput(new_input, sdi.description[new_input].label, '');
            inputs.append(input);
            input.find('input').focus();
            sels = jQuery('<select>' + _this.selectables + '</select>');
            sels.find('option[value="' + new_input + '"]').remove();
            _this.selectables = sels.html();
            jQuery('#sourcedescriptioneditor_selectable').selectBox('destroy');
            jQuery('#sourcedescriptioneditor_selectable').html(_this.selectables);
            return jQuery('#sourcedescriptioneditor_selectable').selectBox();
          });
          jQuery('#sourcedescriptioneditor_apply').bind('click', function() {
            _this.widget.focus();
            jQuery.each(_this.options.values, function(key, value) {
              return omc.storePublicationDescriptionAttribute(_this.options.loid, key, value);
            });
            _this.options.values = {};
            nugget.updateSourceDescriptionData(_this.options.element.closest('.nugget')).done(function() {
              return nugget.resetCitations(_this.options.element.closest('.nugget'));
            });
            jQuery('#sourcedescriptioneditor_selectable').selectBox('destroy');
            _this.widget.remove();
            jQuery('body').css({
              'overflow': 'auto'
            });
            if (_this.options && _this.options.editable && _this.options.editable.element) {
              return occ.UpdateNuggetSourceDescriptions({
                loid: _this.options.editable.element.attr('id')
              });
            }
          });
          jQuery('#sourcedescriptioneditor_back').bind('click', function() {
            _this.options.values = {};
            jQuery('#sourcedescriptioneditor_selectable').selectBox('destroy');
            jQuery('.form_display').remove();
            return jQuery('body').css({
              'overflow': 'auto'
            });
          });
          return window.setTimeout(function() {
            return jQuery(window).resize();
          }, 100);
        });
        return jQuery(window).resize();
      },
      _createInput: function(identifier, label, value) {
        var dp, fn_dp_show, fn_update_select, input,
          _this = this;

        input = jQuery('<div><label for="' + identifier + '">' + label + '</label><input id="' + identifier + '" type="text" value="' + value + '"/></div>');
        if (jQuery.datepicker && (identifier === 'date' || 'identifier' === 'accessed')) {
          fn_dp_show = function() {
            $('.ui-datepicker-month').selectBox();
            return $('.ui-datepicker-year').selectBox();
          };
          fn_update_select = function() {
            return window.setTimeout(fn_dp_show, 100);
          };
          dp = input.find('input').datepicker({
            showOn: "button",
            onChangeMonthYear: fn_update_select,
            beforeShow: fn_update_select,
            buttonImage: "../icons/actions/datepicker-p.png",
            buttonImageOnly: true,
            dateFormat: "yy-mm-dd",
            changeMonth: false,
            changeYear: false,
            constrainInput: false
          });
        }
        input.find('input').bind('blur', function(event) {
          return _this._formChanged(event, _this.options);
        });
        return input;
      },
      _formChanged: function(event, options) {
        var data, error, path, target, user_number;

        target = jQuery(event.target);
        path = target.attr('id');
        data = target.val().replace(/&#34/g, '"');
        if (omc && options.loid) {
          options.values[path] = data;
        }
        if (path.indexOf("number_of_pages") === 0) {
          try {
            user_number = parseInt(data);
            if (user_number <= options.publication.number_of_pages) {
              return jQuery('#' + path).attr('class', 'valid');
            } else {
              utils.error(utils.tr('number_of_pages not in range'));
              return jQuery('#' + path).attr('class', 'invalid');
            }
          } catch (_error) {
            error = _error;
            return jQuery('#' + path).attr('class', 'unparseable');
          }
        }
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloquoteselector', {
      widget: null,
      selectables: '',
      activity: {
        step: 0,
        publication: 0,
        publication_label: '',
        nugget: 0,
        nugget_label: ''
      },
      options: {
        editable: null,
        range: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        data: null,
        loid: null,
        has_changed: false,
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var _this = this;

        this.widget = jQuery('<div id="quote_selector"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.append('<div id="informationcontainer"><div id="information"></div></div>');
        this.widget.append('<div id="publication_list"></div>');
        this.widget.append('<div id="nugget_list"></div>');
        this.widget.append('<div id="nugget_content"></div>');
        this.widget.append('<button class="quote_selector_back view_button">' + utils.tr('back') + '</button>');
        this.widget.append('<button class="quote_selector_next action_button">' + utils.tr('next') + '</button>');
        this.widget.append('<button class="quote_selector_apply action_button">' + utils.tr('apply') + '</button>');
        this.widget.css(this.options.default_css);
        this.widget.find('.quote_selector_back').bind('click', function() {
          return _this.back();
        });
        this.widget.find('.quote_selector_next').bind('click', function() {
          return _this.next();
        });
        this.widget.find('.quote_selector_apply').bind('click', function() {
          return _this.apply();
        });
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery('body').width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        jQuery.when(utils.getJavaScript('lib/refeus/Utilities/List.js')).done(function() {
          return _this.loadPublications();
        });
        jQuery(window).resize();
        this.activity.step = 0;
        this.updateButtons;
        return this.updateInformation();
      },
      updateButtons: function() {
        if (this.activity.step === 2) {
          this.widget.find('.quote_selector_next').hide();
          return this.widget.find('.quote_selector_apply').show();
        } else {
          this.widget.find('.quote_selector_next').show();
          return this.widget.find('.quote_selector_apply').hide();
        }
      },
      updateInformation: function() {
        if (this.activity.step === 0) {
          $('#information').html(utils.tr('activity quote select publication'));
        }
        if (this.activity.step === 1) {
          $('#information').html(utils.tr('activity quote select nugget'));
        }
        if (this.activity.step === 2) {
          return $('#information').html(utils.tr('activity quote select nugget text'));
        }
      },
      apply: function() {
        var nugget,
          _this = this;

        nugget = new DOMNugget();
        nugget.createNewVersion(this.activity.nugget, this.activity.selection).done(function(new_version) {
          return nugget.split(_this.options.editable.element, _this.options.editable.element.find('.selection'), new_version.loid).done(function(loids) {
            console.log(loids);
            return console.log('TODO: update document');
          });
        });
        this.widget.remove();
        return jQuery('body').css({
          'overflow': 'auto'
        });
      },
      back: function() {
        if (this.activity.step === 0) {
          this.widget.remove();
          jQuery('body').css({
            'overflow': 'auto'
          });
          return;
        } else if (this.activity.step === 1) {
          $('#nugget_list').hide();
          $('#publication_list').show();
          this.activity.step = 0;
        } else if (this.activity.step === 2) {
          $('#nugget_content').hide();
          $('#nugget_list').show();
          this.activity.step = 1;
        }
        this.updateButtons();
        return this.updateInformation();
      },
      next: function() {
        console.log(this);
        if (this.activity.step === 0) {
          if (!this.activity.publication) {
            return;
          }
          this.loadPublicationNuggets(this.activity.publication);
          $('#publication_list').hide();
          this.activity.step = 1;
        } else if (this.activity.step === 1) {
          if (!this.activity.nugget) {
            return;
          }
          this.loadNugget(this.activity.nugget);
          $('#nugget_list').hide();
          this.activity.step = 2;
        }
        this.updateButtons();
        return this.updateInformation();
      },
      selectPublication: function(node) {
        this.activity.publication = jQuery(node).attr('id').replace(/node_/, '');
        return this.activity.publication_label = jQuery(node).text();
      },
      selectNugget: function(node) {
        if (jQuery(node).closest('.context').length) {
          return;
        }
        this.activity.nugget = jQuery(node).attr('id').replace(/node_/, '');
        return this.activity.nugget_label = jQuery(node).text();
      },
      loadNugget: function(loid) {
        var content,
          _this = this;

        content = $('#nugget_content');
        content.show();
        return omc.NuggetContent(loid).done(function(node_data) {
          var text;

          if (node_data && node_data.indexOf('<![CDATA[') >= 0) {
            node_data = utils.replaceCDATA(node_data);
          }
          content.html(node_data);
          content.bind('keyup keydown', function(event) {
            event.preventDefault();
            return false;
          });
          content.find('.name').hide();
          text = content.find('.content');
          text.attr('contenteditable', 'true');
          text.focus();
          return document.execCommand('selectAll', false);
        });
      },
      loadPublications: function(loid) {
        var list,
          _this = this;

        list = new List();
        list.init($('#publication_list'), omc.PublicationList);
        list.setupItemActions($('#publication_list'), {
          'node_dblclick': function(node) {
            _this.selectPublication(node);
            return _this.next();
          },
          'node_select': function(node) {
            return _this.selectPublication(node);
          }
        });
        return $('#publication_list').show();
      },
      loadPublicationNuggets: function(loid) {
        var data_fn, list,
          _this = this;

        list = new List();
        data_fn = function() {
          return omc.SourceDescriptionNuggetList(loid);
        };
        list.init($('#nugget_list'), data_fn);
        list.setupItemActions($('#nugget_list'), {
          'node_dblclick': function(node) {
            _this.selectNugget(node);
            return _this.next();
          },
          'node_select': function(node) {
            _this.selectNugget(node);
            $('.context:visible').hide();
            return $(node).find('.context').show();
          }
        });
        return $('#nugget_list').show();
      },
      _createInput: function(identifier, label, value) {
        var input,
          _this = this;

        input = jQuery('<div><label for="' + identifier + '">' + label + '</label><input id="' + identifier + '" type="text" value="' + value + '"/></div>');
        input.find('input').bind('blur', function(event) {
          return _this._formChanged(event, _this.options);
        });
        return input;
      },
      _formChanged: function(event, options) {
        var data, path, target;

        target = jQuery(event.target);
        path = target.attr('id');
        data = target.val();
        if (omc && options.loid) {
          return omc.storePublicationDescriptionAttribute(options.loid, path, data);
        }
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallohyperlink', {
      dropdownform: null,
      tmpid: 0,
      selected_row: null,
      selected_cell: null,
      html: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null,
        edit_url: true,
        edit_title: true,
        use_form: false
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function() {
          var cur_selection, notes, range, recalc, sel, title, url;

          if (!window.getSelection().rangeCount) {
            return;
          }
          _this.tmpid = 'mod_' + (new Date()).getTime();
          sel = window.getSelection();
          range = sel.getRangeAt();
          _this.cur_hyperlink = null;
          _this.action = 'insert';
          _this.options.editable.element.find('a').each(function(index, item) {
            if (sel.containsNode(item, true)) {
              _this.cur_hyperlink = jQuery(item);
              _this.cur_hyperlink.attr('id', _this.tmpid);
              _this.action = 'modify';
              return false;
            }
          });
          if (_this.cur_hyperlink && _this.cur_hyperlink.length) {
            _this.action = 'modify';
            url = _this.cur_hyperlink.attr('href');
            notes = _this.cur_hyperlink.attr('title');
            title = _this.cur_hyperlink.text();
            $('#' + contentId + 'url').val(url);
            $('#' + contentId + 'notes').val(notes);
            $('#' + contentId + 'title').val(title);
            _this.cur_hyperlink.attr('id', _this.tmpid);
          } else {
            _this.action = 'insert';
            cur_selection = jQuery(range.extractContents()).text();
            if (cur_selection === '') {
              cur_selection = utils.tr('no title provided');
            }
            _this.cur_hyperlink = jQuery('<a href="https://refeus.de" id="' + _this.tmpid + '">' + cur_selection + '</a>');
            range.insertNode(_this.cur_hyperlink[0]);
            $('#' + contentId + 'url').val(_this.cur_hyperlink.attr('href'));
            $('#' + contentId + 'notes').val("");
            $('#' + contentId + 'title').val(cur_selection);
            _this.updateHyperlinkHTML(contentId);
          }
          if (!_this.options.use_form) {
            if (_this.action === 'modify') {
              _this._removeAction();
            } else {
              _this._selectAction();
            }
            return false;
          } else {
            recalc = function() {
              return _this.recalcHTML();
            };
            window.setTimeout(recalc, 300);
          }
          return true;
        };
        this.dropdownform = this._prepareButton(setup, target);
        target.bind('hide', function() {
          return jQuery('a').each(function(index, item) {
            if (!window.__start_mini_activity) {
              jQuery(item).removeAttr('id');
            }
            if (jQuery(item).attr('href') === '') {
              return jQuery(item).remove();
            }
          });
        });
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      updateHyperlinkHTML: function(contentId) {
        var hyperlink, notes, title, url;

        hyperlink = $('#' + this.tmpid);
        url = $('#' + contentId + 'url').val();
        notes = $('#' + contentId + 'notes').val();
        title = $('#' + contentId + 'title').val();
        hyperlink.attr('href', url);
        hyperlink.attr('title', notes);
        hyperlink.text(title);
        return hyperlink[0].outerHTML;
      },
      recalcHTML: function() {
        this.html = this.updateHyperlinkHTML(this._content_id);
        return this.options.editable.store();
      },
      _prepareDropdown: function(contentId) {
        var addButton, addInput, contentArea, contentAreaUL, this_editable,
          _this = this;

        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        this._content_id = contentId;
        addInput = function(type, element, default_value) {
          var el, elid, recalc;

          elid = "" + contentId + element;
          el = jQuery(("<li><label for\"" + elid + "\">") + utils.tr(element) + ("</label><input type=\"" + type + "\" id=\"" + elid + "\"/></li>"));
          if (el.find('input').is('input[type="checkbox"]') && default_value === "true") {
            el.find('input').attr('checked', true);
          } else if (default_value) {
            el.find('input').val(default_value);
          }
          recalc = function() {
            return _this.recalcHTML();
          };
          el.find('input').bind('keyup change', recalc);
          return el;
        };
        addButton = function(element, event_handler) {
          var el;

          el = jQuery("<li><button class=\"action_button\" id=\"" + _this.tmpid + element + "\">" + utils.tr(element) + "</button></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        if (this.options.edit_url) {
          contentAreaUL.append(addInput("text", "url", ""));
        } else {
          contentAreaUL.append(addInput("hidden", "url", ""));
        }
        contentAreaUL.append(addInput("text", "notes", ""));
        if (this.options.edit_title) {
          contentAreaUL.append(addInput("text", "title", ""));
        } else {
          contentAreaUL.append(addInput("hidden", "title", ""));
        }
        this_editable = this.options.editable;
        contentAreaUL.append(addButton("select nugget", function() {
          return _this._selectAction();
        }));
        contentAreaUL.append(addButton("apply", function() {
          return _this._applyAction();
        }));
        contentAreaUL.append(addButton("remove", function() {
          return _this._removeAction();
        }));
        return contentArea;
      },
      _applyAction: function() {
        this.recalcHTML();
        $('#' + this.tmpid).removeAttr('id');
        return this.dropdownform.hallodropdownform('hideForm');
      },
      _removeAction: function() {
        var modified, range, range_contents;

        window.getSelection().removeAllRanges();
        modified = false;
        if ($('#' + this.tmpid).text() !== utils.tr('no title provided')) {
          modified = true;
        }
        range = document.createRange();
        range.selectNode($('#' + this.tmpid)[0]);
        range_contents = jQuery(range.extractContents()).text();
        window.getSelection().addRange(range);
        range.deleteContents();
        if (modified) {
          range.insertNode($('<span>' + range_contents + '</span>')[0]);
        }
        return this.dropdownform.hallodropdownform('hideForm');
      },
      _selectAction: function() {
        window.__start_mini_activity = true;
        this.dropdownform.hallodropdownform('hideForm');
        return $('body').hallonuggetselector({
          'editable': this.options.editable,
          'hyperlink_id': this.tmpid
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'hyperlink';
        if (window.action_list && window.action_list['hallojs_hyperlink'] !== void 0) {
          button_label = window.action_list['hallojs_hyperlink'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'hyperlink',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallojustify", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(alignment) {
          var buttonElement, label;

          label = alignment;
          if (window.action_list && window.action_list['hallojs_' + alignment] !== void 0) {
            label = window.action_list['hallojs_' + alignment].title;
          }
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: label,
            command: "justify" + alignment,
            icon: "icon-align-" + (alignment.toLowerCase()),
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        buttonize("Left");
        buttonize("Center");
        buttonize("Right");
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      },
      _init: function() {}
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloplaintext', {
      name: "plaintext",
      html: null,
      editable_element: null,
      plain_editor: null,
      overlay: null,
      debug: false,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null,
        overlayCss: {
          'position': 'fixed',
          'z-index': 100000,
          'background': 'white',
          'border': '2px solid silver'
        }
      },
      cancel: function() {
        if (this.debug) {
          console.log('cancel');
        }
        return this.restore();
      },
      commit: function() {
        this.editable_element.html(this.textarea.val());
        this.options.editable.store();
        return this.restore();
      },
      execute: function() {
        jQuery('body').css({
          'overflow': 'hidden'
        });
        this.editable_element.css({
          'opacity': '0.5'
        });
        jQuery('.misspelled').remove();
        this.id = "" + this.options.uuid + "-" + this.widgetName + "-area";
        this.editable_element = this.options.editable.element;
        if (debug) {
          console.log(this.editable_element.html());
        }
        this.editable_element.parent().append(this._create_overlay(this.id));
        this.textarea.focus();
        return this._setup_syntax_highlight();
      },
      restore: function() {
        jQuery('body').css({
          'overflow': 'auto'
        });
        this.editable_element.css({
          'opacity': '1'
        });
        return this.overlay.remove();
      },
      setup: function() {
        if (!this.options.editable.element) {
          return;
        }
        return this.editable_element = this.options.editable.element;
      },
      _create_form_button: function(name, event_handler) {
        var btn, button_label, button_tooltip;

        button_label = name;
        button_tooltip = name;
        if (window.action_list && window.action_list['hallojs_plaintext_' + name] !== void 0) {
          button_label = window.action_list['hallojs_plaintext_' + name].title;
          button_tooltip = window.action_list['hallojs_plaintext_' + name].tooltip;
        }
        btn = jQuery("<button class=\"action_button\" title=\"" + button_tooltip + "\">" + button_label + "</button>");
        btn.bind('click', event_handler);
        btn.addClass('action_button');
        return btn;
      },
      _create_overlay: function(id) {
        var _this = this;

        this.overlay = jQuery("<div id=\"" + id + "\"></div>");
        this.overlay.append(this._create_form_button('Cancel', function() {
          return _this.cancel();
        }));
        this.overlay.append(this._create_form_button('Apply', function() {
          return _this.commit();
        }));
        this.overlay.append(this._create_plain(this.editable_element.html()));
        this._overlay_resize();
        jQuery(window).bind('resize', function() {
          _this._overlay_resize();
          return _this._plain_resize();
        });
        return this.overlay;
      },
      _create_plain: function(content) {
        var _this = this;

        this.textarea = jQuery("<textarea></textarea>");
        this.textarea.val(content);
        this._plain_resize();
        this.textarea.bind('blur', function() {
          return _this.textarea.focus();
        });
        return this.textarea;
      },
      _setup_syntax_highlight: function() {
        var editor_options;

        return editor_options = {
          'mode': 'application/xml',
          'lineNumbers': true,
          'lineWrapping': true
        };
      },
      _overlay_resize: function() {
        var dim;

        this.overlay.offset(this.toolbar.offset());
        dim = {
          width: this.editable_element.width(),
          height: this.editable_element.height()
        };
        dim.height = dim.height + (this.editable_element.offset().top - this.toolbar.offset().top);
        this.options.overlayCss.height = $(window).height();
        this.options.overlayCss.width = $(window).width();
        this.options.overlayCss.top = 0;
        this.options.overlayCss.left = 0;
        return this.overlay.css(this.options.overlayCss);
      },
      _plain_resize: function() {
        var height, text_dim;

        height = $(window).height() - this.toolbar.offset().top;
        text_dim = {
          'position': 'fixed',
          'top': '34px',
          'left': '8px',
          'width': $(window).width(),
          'height': ($(window).height() - 48) + 'px',
          'max-width': $(window).width(),
          'max-height': $(window).height()
        };
        this.textarea.css(text_dim);
        if (this.plain_editor) {
          return this.plain_editor.refresh();
        }
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId;

        this.editable_element = this.options.editable.element;
        this.toolbar = toolbar;
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        return toolbar.append(this._prepareButtons(contentId));
      },
      _prepareButtons: function(contentId) {
        var buttonset,
          _this = this;

        if (this.debug) {
          console.log(this.editable_element);
        }
        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonset.append(this._prepareButton(function() {
          if (_this.debug) {
            console.log(_this.editable_element);
          }
          return _this.execute();
        }));
        return buttonset.hallobuttonset();
      },
      _prepareButton: function(action) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = this.name;
        if (window.action_list && window.action_list['hallojs_' + this.name] !== void 0) {
          button_label = window.action_list['hallojs_' + this.name].title;
        }
        buttonElement.halloactionbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          icon: 'icon-text-height',
          command: this.name,
          target: this.name,
          setup: this.setup,
          cssClass: this.options.buttonCssClass,
          action: action
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloreundo", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonize, buttonset,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonize = function(cmd, label) {
          var buttonElement, button_label;

          button_label = label;
          if (window.action_list && window.action_list['hallojs_' + cmd] !== void 0) {
            button_label = window.action_list['hallojs_' + cmd].title;
          }
          buttonElement = jQuery('<span></span>');
          buttonElement.hallobutton({
            uuid: _this.options.uuid,
            editable: _this.options.editable,
            label: button_label,
            icon: cmd === 'undo' ? 'icon-undo' : 'icon-repeat',
            command: cmd,
            queryState: false,
            cssClass: _this.options.buttonCssClass
          });
          return buttonset.append(buttonElement);
        };
        buttonize("undo", "Undo");
        buttonize("redo", "Redo");
        buttonset.hallobuttonset();
        return toolbar.append(buttonset);
      },
      _init: function() {}
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallospellcheck', {
      name: 'spellcheck',
      spellcheck_interval: 0,
      spellcheck_timeout: 300,
      spellcheck_proxy: null,
      initialized: false,
      debug: false,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      _init: function() {
        var _this = this;

        return this.options.editable.element.bind('halloactivated', function() {
          return _this.enable();
        });
      },
      enable: function() {
        if (!this.spellcheck_proxy) {
          this.spellcheck_proxy = jQuery.proxy(this.checkSpelling, this);
        }
        this.options.editable.element.unbind('keydown click', this.spellcheck_proxy);
        this.options.editable.element.bind('keydown click', this.spellcheck_proxy);
        this.initialized = true;
        if (this.debug) {
          console.log(this.initialized);
        }
      },
      checkSpelling: function(event) {
        var interval_checker,
          _this = this;

        if (this.debug) {
          console.log(this.options.editable.element[0].spellcheck, window.spellcheck, event.keyCode);
        }
        if ((event.keyCode >= 37 && event.keyCode <= 40) || event.keyCode === 17 || event.keyCode === 18) {
          return;
        }
        if (event.keyCode === 13 || event.keyCode === 8 || event.keyCode === 46) {
          jQuery('.misspelled').remove();
        }
        if (!window.spellcheck) {
          return;
        }
        if (!this.options.editable.element[0].spellcheck) {
          return;
        }
        if (this.spellcheck_interval) {
          if (this.debug) {
            console.log('reset interval');
          }
          window.clearTimeout(this.spellcheck_interval);
        }
        interval_checker = function() {
          var check_node, clone, current_block, find_node, offset, over_css, range, underlay_id;

          if (_this.debug) {
            console.log('interval_checker');
          }
          over_css = _this.options.editable.element.getStyleObject();
          if ((_this.options.editable.element.find('pre').length)) {
            return;
          }
          clone = _this.options.editable.element.clone();
          offset = _this.options.editable.element.offset();
          check_node = clone;
          if ((window.getSelection().rangeCount)) {
            range = window.getSelection().getRangeAt();
            range.collapse();
            find_node = function(node) {
              var ret_node;

              ret_node = null;
              if (range.commonAncestorContainer.parentNode === node[0]) {
                return node;
              }
              if (node[0].nodeType === 1) {
                node.children().each(function(index, child_node) {
                  ret_node = find_node($(child_node));
                  if (ret_node && ret_node.length) {
                    return false;
                  }
                });
              }
              return ret_node;
            };
            current_block = find_node(_this.options.editable.element);
            if (current_block) {
              check_node = current_block;
              check_node.addClass('current_block');
              clone = _this.options.editable.element.clone();
              check_node.removeClass('current_block');
              check_node = clone.find('.current_block');
              if (!check_node.length) {
                check_node = clone;
              } else {
                while (check_node[0] !== clone[0] && check_node.parent()[0] !== clone[0]) {
                  check_node = check_node.parent();
                }
              }
            }
          }
          _this.options.editable.element.parent().find('.misspelled').remove();
          window.spellcheck.replaceDOM(check_node[0], function(word) {
            return '<span class="misspelled">' + word + '</span>';
          });
          underlay_id = 'spellcheck_underlay';
          clone = $('<div id="' + underlay_id + '">' + clone.html() + '</div>');
          over_css['position'] = 'absolute';
          over_css['z-index'] = '1000';
          over_css['top'] = offset.top + "px";
          over_css['left'] = offset.left + "px";
          over_css['bottom'] = 0 + "px";
          over_css['right'] = 0 + "px";
          over_css['margin'] = '0';
          _this.options.editable.element.css({
            'position': 'relative'
          });
          clone.css(over_css);
          clone.addClass('content');
          clone.insertBefore(_this.options.editable.element);
          clone.find('.misspelled').each(function(index, item) {
            var node, node_css, orig_css;

            node = $(item);
            offset = node.offset();
            node_css = {};
            orig_css = node.getStyleObject();
            node_css['position'] = 'absolute';
            node_css['top'] = (offset.top + node.height() - 2) + 'px';
            node_css['height'] = '2px';
            node_css['left'] = offset.left + 'px';
            node_css['padding'] = '0';
            node_css['margin'] = '0';
            node_css['color'] = 'transparent';
            node_css['font-size'] = node.css('font-size');
            node_css['line-height'] = node.css('line-height');
            node_css['pointer-events'] = 'none';
            return node.clone(true).insertAfter(_this.options.editable.element).css(node_css);
          });
          return clone.remove();
        };
        this.spellcheck_interval = setTimeout(interval_checker, this.spellcheck_timeout);
        if (this.debug) {
          return console.log(this.spellcheck_interval);
        }
      },
      execute: function() {
        if (debug) {
          console.log('toggle');
        }
        this.options.editable.element[0].spellcheck = !this.options.editable.element[0].spellcheck;
        this.options.editable.element.blur();
        this.options.editable.element.focus();
        if (this.options.editable.element[0].spellcheck) {
          if (debug) {
            console.log('check spelling');
          }
          return this.checkSpelling({
            'keycode': 0
          });
        } else {
          return jQuery('.misspelled').remove();
        }
      },
      setup: function() {
        if (debug) {
          console.log(this.initialized);
        }
        if (this.initialized) {
          return;
        }
        return this.enable();
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        return toolbar.append(this._prepareButtons(contentId));
      },
      _prepareButtons: function(contentId) {
        var buttonset,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonset.append(this._prepareButton(function() {
          return _this.execute();
        }));
        return buttonset.hallobuttonset();
      },
      _prepareButton: function(action) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = this.name;
        if (window.action_list && window.action_list['hallojs_' + this.name] !== void 0) {
          button_label = window.action_list['hallojs_' + this.name].title;
        }
        buttonElement.halloactionbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          icon: 'icon-text-height',
          command: this.name,
          target: this.name,
          setup: this.setup,
          cssClass: this.options.buttonCssClass,
          action: action
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.hallopublicationselector', {
      widget: null,
      selectables: '',
      options: {
        editable: null,
        range: null,
        toolbar: null,
        uuid: '',
        element: null,
        tip_element: null,
        data: null,
        loid: null,
        has_changed: false,
        default_css: {
          'width': '100%',
          'height': '100%',
          'top': 0,
          'left': 0,
          'position': 'fixed',
          'z-index': 999999
        }
      },
      _init: function() {
        var _this = this;

        this.widget = jQuery('<div id="publication_selector"></div>');
        this.widget.addClass('form_display');
        jQuery('body').css({
          'overflow': 'hidden'
        });
        jQuery('body').append(this.widget);
        this.widget.append('<div id="publication_list" style="background-color:white; margin-bottom: 4px"></div>');
        this.widget.append('<button class="publication_selector_back view_button">' + utils.tr('back') + '</button>');
        this.widget.append('<button class="publication_selector_apply action_button">' + utils.tr('apply') + '</button>');
        this.widget.css(this.options.default_css);
        this.widget.find('.publication_selector_back').bind('click', function() {
          return _this.back();
        });
        this.widget.find('.publication_selector_apply').bind('click', function() {
          return _this.apply();
        });
        if (!this.options.default_css.width) {
          this.wigtet.css('width', jQuery('body').width());
        }
        if (!this.options.default_css.height) {
          this.widget.css('height', jQuery(window).height());
        }
        jQuery.when(utils.getJavaScript('lib/refeus/Utilities/List.js')).done(function() {
          _this.list = new List();
          _this.list.init($('#publication_list'), omc.PublicationList);
          return _this.list.setupItemActions($('#publication_list'), {
            'node_dblclick': function(node) {
              _this.select(node);
              return _this.apply();
            },
            'node_select': function(node) {
              return _this.select(node);
            }
          });
        });
        return jQuery(window).resize();
      },
      apply: function() {
        var dfo, publication_loid, target_loid, tmp_id,
          _this = this;

        publication_loid = this.current_node.replace(/node_/, '');
        target_loid = this.options.editable.element.closest('.Text').attr('id').replace(/node/, '');
        dfo = omc.AssociatePublication(target_loid, publication_loid);
        dfo.fail(function(error) {
          _this.widget.remove();
          return jQuery('body').css({
            'overflow': 'auto'
          });
        });
        tmp_id = 'tmp_' + (new Date()).getTime();
        return dfo.done(function(result) {
          var data, element, new_sd_node, nugget, range, scb, selection;

          data = result.loid;
          element = _this.current_node_label;
          scb = function(parent, old) {
            var replacement;

            replacement = false;
            if (old.html() === "" || old.html() === "&nbsp;" || old.text() === " ") {
              replacement = "";
            } else {
              replacement = "<span class=\"citation\">" + old.html() + "</span>";
            }
            replacement += "<span class=\"cite sourcedescription-" + data + "\" contenteditable=\"false\" id=\"" + tmp_id + "\">" + element + "</span>";
            return replacement;
          };
          selection = _this.options.editable.element.find('.selection');
          if (selection.length) {
            range = document.createRange();
            range.selectNode(selection[0]);
            if (selection.hasClass('carret')) {
              range.setStartAfter(range.endContainer);
            }
            window.getSelection().removeAllRanges();
            window.getSelection().addRange(range);
            _this.options.editable.replaceSelectionHTML(scb);
            window.__start_mini_activity = false;
            _this.options.editable.element.find('.selection').each(function(index, item) {
              $(item).replaceWith($(item).html());
              if ($(item).text() === ' ') {
                return $(item).find('.citation').remove();
              }
            });
          }
          nugget = new DOMNugget();
          _this.options.editable.element.closest('.nugget').find('.auto-cite').remove();
          occ.UpdateNuggetSourceDescriptions({
            loid: target_loid
          });
          new_sd_node = $('#' + tmp_id);
          new_sd_node.removeAttr('id');
          nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
            var new_sd_class, sd_loid;

            nugget.resetCitations(_this.options.editable.element);
            new_sd_class = new_sd_node.attr('class');
            if (new_sd_class) {
              sd_loid = new_sd_class.replace(/.*sourcedescription-(\d*).*/, "$1");
              return nugget.getSourceDescriptionData(new_sd_node).done(function(citation_data) {
                return jQuery('body').hallosourcedescriptioneditor({
                  'loid': sd_loid,
                  'data': citation_data,
                  'element': new_sd_node,
                  'back': false
                });
              });
            }
          });
          _this.widget.remove();
          return jQuery('body').css({
            'overflow': 'auto'
          });
        });
      },
      back: function() {
        this.widget.remove();
        return jQuery('body').css({
          'overflow': 'auto'
        });
      },
      select: function(node) {
        this.current_node = jQuery(node).attr('id');
        return this.current_node_label = jQuery(node).text();
      },
      _createInput: function(identifier, label, value) {
        var input,
          _this = this;

        input = jQuery('<div><label for="' + identifier + '">' + label + '</label><input id="' + identifier + '" type="text" value="' + value + '"/></div>');
        input.find('input').bind('blur', function(event) {
          return _this._formChanged(event, _this.options);
        });
        return input;
      },
      _formChanged: function(event, options) {
        var data, path, target;

        target = jQuery(event.target);
        path = target.attr('id');
        data = target.val();
        if (omc && options.loid) {
          return omc.storePublicationDescriptionAttribute(options.loid, path, data);
        }
      },
      _create: function() {
        return this;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloplugin', {
      name: 'plugin',
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null
      },
      execute: function() {
        return console.log('execute');
      },
      setup: function() {
        return console.log('setup');
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        return toolbar.append(this._prepareButtons(contentId));
      },
      _prepareButtons: function(contentId) {
        var buttonset,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        buttonset.append(this._prepareButton(function() {
          return _this.execute();
        }));
        return buttonset.hallobuttonset();
      },
      _prepareButton: function(action) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = this.name;
        if (window.action_list && window.action_list['hallojs_' + this.name] !== void 0) {
          button_label = window.action_list['hallojs_' + this.name].title;
        }
        buttonElement.halloactionbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          icon: 'icon-text-height',
          command: this.name,
          target: this.name,
          setup: this.setup,
          cssClass: this.options.buttonCssClass,
          action: action
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloimage', {
      dropdownform: null,
      tmpid: 0,
      selected_row: null,
      selected_cell: null,
      html: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['rows', 'cols', 'border'],
        buttonCssClass: null
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        toolbar.append(target);
        setup = function() {
          var align, alt, border, height, range, recalc, sel, url, width;

          if (!window.getSelection().rangeCount) {
            return;
          }
          _this.tmpid = 'mod_' + (new Date()).getTime();
          sel = window.getSelection();
          range = sel.getRangeAt();
          _this.cur_image = null;
          _this.action = 'insert';
          _this.options.editable.element.find('img').each(function(index, item) {
            if (sel.containsNode(item, true)) {
              _this.cur_image = jQuery(item);
              _this.cur_image.attr('id', _this.tmpid);
              _this.action = 'update';
              return false;
            }
          });
          if (_this.cur_image && _this.cur_image.length) {
            url = _this.cur_image.attr('src');
            alt = _this.cur_image.attr('alt');
            width = _this.cur_image.attr('width');
            height = _this.cur_image.attr('height');
            if (!width || width === '') {
              width = 'auto';
            }
            if (!height || height === '') {
              height = 'auto';
            }
            align = _this.cur_image.attr('style');
            if (align) {
              align = align.replace(/.*align:([^;]*).*/, '$1');
            }
            if (!align || align === '') {
              align = "center";
            }
            border = _this.cur_image.attr('border');
            if (border) {
              if (border !== "1") {
                border = false;
              }
              if (border === "1") {
                border = true;
              }
            } else {
              border = false;
            }
            $('#' + contentId + 'url').val(url);
            $('#' + contentId + 'alt').val(alt);
            $('#' + contentId + 'width').val(width);
            $('#' + contentId + 'height').val(height);
            $('#' + contentId + 'align').val(align);
            $('#' + contentId + 'border').attr('checked', border);
          } else {
            _this.cur_image = jQuery('<img src="../icons/types/PubArtwork.png" id="' + _this.tmpid + '"/>');
            range.insertNode(_this.cur_image[0]);
            $('#' + contentId + 'url').val(_this.cur_image.attr('src'));
            $('#' + contentId + 'alt').val("");
            $('#' + contentId + 'width').val("auto");
            $('#' + contentId + 'height').val("auto");
            $('#' + contentId + 'align').val("center");
            $('#' + contentId + 'border').attr('checked', false);
            _this.updateImageHTML(contentId);
          }
          recalc = function() {
            return _this.recalcHTML(target.attr('id'));
          };
          return true;
          return window.setTimeout(recalc, 300);
        };
        this.dropdownform = this._prepareButton(setup, target);
        target.bind('hide', function() {
          return jQuery('img').each(function(index, item) {
            jQuery(item).removeAttr('id');
            if (jQuery(item).attr('src') === '') {
              return jQuery(item).remove();
            }
          });
        });
        buttonset.append(this.dropdownform);
        return toolbar.append(buttonset);
      },
      updateImageHTML: function(contentId) {
        var align, alt, border, height, image, url, width;

        image = $('#' + this.tmpid);
        url = $('#' + contentId + 'url').val();
        alt = $('#' + contentId + 'alt').val();
        width = $('#' + contentId + 'width').val();
        height = $('#' + contentId + 'height').val();
        align = $('#' + contentId + 'align').val();
        border = $('#' + contentId + 'border').is(':checked');
        if (width === '') {
          width = "auto";
        }
        if (height === '') {
          height = "auto";
        }
        if (align === '') {
          align = "center";
        }
        image.attr('src', url);
        image.attr('alt', alt);
        if (width === 'auto') {
          image.removeAttr('width');
        } else {
          image.attr('width', width);
        }
        if (height === 'auto') {
          image.removeAttr('height');
        } else {
          image.attr('height', height);
        }
        image.attr('style', 'align:' + align);
        if (border) {
          image.attr('border', '1');
        } else {
          image.removeAttr('border');
        }
        return image[0].outerHTML;
      },
      recalcHTML: function(contentId) {
        this.html = this.updateImageHTML(contentId);
        return this.options.editable.store();
      },
      _prepareDropdown: function(contentId) {
        var addButton, addInput, contentArea, contentAreaUL,
          _this = this;

        contentArea = jQuery("<div id=\"" + contentId + "\"><ul></ul></div>");
        contentAreaUL = contentArea.find('ul');
        addInput = function(type, element, default_value) {
          var el, elid, recalc;

          elid = "" + contentId + element;
          el = jQuery(("<li><label for\"" + elid + "\">") + utils.tr(element) + ("</label><input type=\"" + type + "\" id=\"" + elid + "\"/></li>"));
          if (el.find('input').is('input[type="checkbox"]') && default_value === "true") {
            el.find('input').attr('checked', true);
          } else if (default_value) {
            el.find('input').val(default_value);
          }
          recalc = function() {
            return _this.recalcHTML(contentId);
          };
          el.find('input').bind('keyup change', recalc);
          return el;
        };
        addButton = function(element, event_handler) {
          var el;

          el = jQuery("<li><button class=\"action_button\" id=\"" + _this.tmpid + element + "\">" + utils.tr(element) + "</button></li>");
          el.find('button').bind('click', event_handler);
          return el;
        };
        contentAreaUL.append(addInput("text", "url", ""));
        contentAreaUL.append(addInput("text", "alt", ""));
        contentAreaUL.append(addInput("text", "width", "auto"));
        contentAreaUL.append(addInput("text", "height", "auto"));
        contentAreaUL.append(addInput("text", "align", "center"));
        contentAreaUL.append(addInput("checkbox", "border", false));
        contentAreaUL.append(addButton("apply", function() {
          var range;

          _this.recalcHTML(contentId);
          window.getSelection().removeAllRanges();
          range = document.createRange();
          range.selectNode($('#' + _this.tmpid)[0]);
          window.getSelection().addRange(range);
          document.execCommand('insertHTML', false, _this.html);
          $('#' + _this.tmpid).removeAttr('id');
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        contentAreaUL.append(addButton("remove", function() {
          var range;

          window.getSelection().removeAllRanges();
          range = document.createRange();
          range.selectNode($('#' + _this.tmpid)[0]);
          window.getSelection().addRange(range);
          document.execCommand('delete', false);
          return _this.dropdownform.hallodropdownform('hideForm');
        }));
        return contentArea;
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'image';
        if (window.action_list && window.action_list['hallojs_image'] !== void 0) {
          button_label = window.action_list['hallojs_image'].title;
        }
        buttonElement.hallodropdownform({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'image',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.hallotextselection", {
      _start_container: null,
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        buttonCssClass: null,
        current_version: null,
        in_document: false,
        is_nugget: true
      },
      _create: function() {
        return this;
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        setup = function() {
          var has_selection, is_citation, is_direct_citation, is_indirect_citation, range, range_ca, range_jq, selection;

          target.find('.element-selector').remove();
          selection = window.getSelection();
          if (!selection.rangeCount) {
            return false;
          }
          range = selection.getRangeAt();
          range_jq = $(range.cloneContents());
          range_ca = null;
          _this.start_container = null;
          _this._find_start_container(_this.options.editable.element[0], range.startContainer);
          if (_this.start_container) {
            range_ca = $(_this.start_container).closest('.citation');
            is_citation = range_ca.hasClass('citation');
            is_direct_citation = range_ca.hasClass('direct_citation');
            is_indirect_citation = range_ca.hasClass('indirect_citation');
          } else {
            is_citation = false;
            is_direct_citation = false;
            is_indirect_citation = false;
          }
          has_selection = range_jq.text() !== '';
          if (has_selection) {
            target.append(_this._addElement('copy'));
          }
          if (has_selection) {
            target.append(_this._addElement('cut'));
          }
          target.append(_this._addElement('paste'));
          if (has_selection && _this.options.is_nugget) {
            target.append(_this._addElement('as_name'));
          }
          if (has_selection && _this.options.is_nugget) {
            target.append(_this._addElement('as_tag'));
          }
          if (has_selection && is_direct_citation) {
            target.append(_this._addElement('indirect_citation'));
          }
          if (has_selection && is_indirect_citation) {
            target.append(_this._addElement('direct_citation'));
          }
          if (has_selection && is_citation) {
            target.append(_this._addElement('remove_citation'));
          }
          return true;
        };
        buttonset.append(target);
        buttonset.append(this._prepareButton(setup, target));
        return toolbar.append(buttonset);
      },
      _find_start_container: function(node, search_node) {
        var child_node, _i, _len, _ref, _results;

        if (this.start_container) {
          return;
        }
        if (node === search_node) {
          this.start_container = node;
        }
        if (node.childNodes) {
          _ref = node.childNodes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child_node = _ref[_i];
            _results.push(this._find_start_container(child_node, search_node));
          }
          return _results;
        }
      },
      _prepareDropdown: function(contentId) {
        var contentArea;

        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        return contentArea;
      },
      _elementText: function(element) {
        var element_text;

        if (window.action_list && window.action_list['hallojs_textselection_' + element] !== void 0) {
          return element_text = window.action_list['hallojs_textselection_' + element].title;
        }
      },
      _addElement: function(element) {
        var el, element_text, this_editable,
          _this = this;

        element_text = this._elementText(element);
        el = jQuery("<button class=\"element-selector\">" + element_text + "</button>");
        this_editable = this.options.editable;
        return el.bind("click", function(ev) {
          var nugget, range, range_jq, selection;

          selection = window.getSelection();
          if (!selection.rangeCount) {
            return;
          }
          range = selection.getRangeAt();
          range_jq = $(range.cloneContents());
          nugget = new DOMNugget();
          if (element === 'copy') {
            document.execCommand('copy');
          } else if (element === 'cut') {
            document.execCommand('cut');
          } else if (element === 'paste') {
            document.execCommand('paste');
          } else if (element === 'as_name') {
            if (range_jq.text() !== '') {
              nugget.rename(_this.options.editable.element, range_jq.text());
            }
          } else if (element === 'as_tag') {
            if (range_jq.text() !== '') {
              nugget.createTag(_this.options.editable.element, range_jq.text());
            }
          } else if (element === 'direct_citation') {
            console.log('NOT IMPLEMENTED:', element);
          } else if (element === 'indirect_citation') {
            console.log('NOT IMPLEMENTED:', element);
          } else if (element === 'remove_citation') {
            _this.start_container = null;
            _this._find_start_container(_this.options.editable.element[0], range.startContainer);
            $(_this.start_container).closest('.citation').removeClass('citation');
          }
          _this.options.editable.element.blur();
          return _this.options.editable.element.focus();
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'textselection';
        if (window.action_list && window.action_list['hallojs_textselection'] !== void 0) {
          button_label = window.action_list['hallojs_textselection'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'textselection',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget("IKS.halloversion", {
      options: {
        editable: null,
        toolbar: null,
        uuid: '',
        elements: ['new version', 'update from manage', 'update to manage'],
        buttonCssClass: null,
        current_version: null,
        in_document: false
      },
      _create: function() {
        return this;
      },
      populateToolbar: function(toolbar) {
        var buttonset, contentId, setup, target,
          _this = this;

        buttonset = jQuery("<span class=\"" + this.widgetName + "\"></span>");
        this.options.in_document = this.options.editable.element.closest('.Document').length > 0;
        contentId = "" + this.options.uuid + "-" + this.widgetName + "-data";
        target = this._prepareDropdown(contentId);
        setup = function() {
          var display_name, nugget, setupSubVersions, versions;

          nugget = new DOMNugget();
          target.find('.version').remove();
          if (_this.options.in_document) {
            return;
          }
          _this.options.current_version = _this.options.editable.element.closest('.nugget').attr('id');
          versions = nugget.getNuggetVersions(_this.options.editable.element);
          if (versions.version) {
            display_name = versions.version.display_name;
            target.append(_this._addElement(display_name, versions.version));
          }
          setupSubVersions = function(versions) {
            var subversion, _i, _len, _ref, _results;

            if (versions.subversions && versions.subversions.length) {
              versions.subversions.reverse();
              _ref = versions.subversions;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                subversion = _ref[_i];
                display_name = subversion.version.display_name;
                target.append(_this._addElement(display_name, subversion.version));
                _results.push(setupSubVersions(subversion));
              }
              return _results;
            }
          };
          setupSubVersions(versions);
          return true;
        };
        buttonset.append(target);
        buttonset.append(this._prepareButton(setup, target));
        return toolbar.append(buttonset);
      },
      _prepareDropdown: function(contentId) {
        var contentArea, el, element, _i, _len, _ref;

        contentArea = jQuery("<div id=\"" + contentId + "\"></div>");
        _ref = this.options.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          if (!this.options.in_document) {
            if (element === 'update to manage') {
              continue;
            }
            if (element === 'update from manage') {
              continue;
            }
          }
          el = this._addElement(element);
          if (el) {
            contentArea.append(el);
          }
        }
        return contentArea;
      },
      _addElement: function(element, version) {
        var el, element_text, this_editable,
          _this = this;

        element_text = element;
        if (element_text === 'new version') {
          if (window.action_list && window.action_list['hallojs_version_new_version'] !== void 0) {
            element_text = window.action_list['hallojs_version_new_version'].title;
          }
        }
        if (element_text === 'current version') {
          if (window.action_list && window.action_list['hallojs_version_current_version'] !== void 0) {
            element_text = window.action_list['hallojs_version_current_version'].title;
          }
        }
        if (element_text === 'update to manage') {
          if (window.action_list && window.action_list['hallojs_version_update_to_manage'] !== void 0) {
            element_text = window.action_list['hallojs_version_update_to_manage'].title;
          }
        }
        if (element_text === 'update from manage') {
          if (window.action_list && window.action_list['hallojs_version_update_from_manage'] !== void 0) {
            element_text = window.action_list['hallojs_version_update_from_manage'].title;
          }
        }
        if (element_text.length > 40) {
          element_text = element_text.substr(0, 20) + '...' + element_text.substr(element_text.length - 20, 20);
        }
        el = jQuery("<button class=\"version-selector\">" + element_text + "</button>");
        if (version && this.options.current_version === version.variant_loid) {
          el.addClass("selected");
        }
        if (version) {
          el.addClass("version");
        }
        this_editable = this.options.editable;
        return el.bind("click", function(ev) {
          var make_current, nugget;

          nugget = new DOMNugget();
          if (element === 'new version') {
            _this.options.editable.element.blur();
            make_current = true;
            if (_this.options.in_document) {
              _this.options.editable.element.blur();
              return nugget.updateVersionReferenceNewVersion(_this.options.editable.element);
            } else {
              return nugget.createNewVersion(_this.options.editable.element);
            }
          } else if (element === 'update from manage') {
            _this.options.editable.element.blur();
            return nugget.updateVersionReferenceFromVariation(_this.options.editable.element);
          } else if (element === 'update to manage') {
            _this.options.editable.element.blur();
            return nugget.updateVariationFromVersionReference(_this.options.editable.element).done(function() {
              return _this.options.editable.element.focus();
            });
          } else {
            _this.options.editable.element.blur();
            return nugget.loadVersion(_this.options.editable.element, version.variant_loid).done(function() {
              return nugget.updateSourceDescriptionData(_this.options.editable.element).done(function() {
                nugget.resetCitations(_this.options.editable.element);
                return _this.options.editable.element.focus();
              });
            });
          }
        });
      },
      _prepareButton: function(setup, target) {
        var buttonElement, button_label;

        buttonElement = jQuery('<span></span>');
        button_label = 'version';
        if (window.action_list && window.action_list['hallojs_version'] !== void 0) {
          button_label = window.action_list['hallojs_version'].title;
        }
        buttonElement.hallodropdownbutton({
          uuid: this.options.uuid,
          editable: this.options.editable,
          label: button_label,
          command: 'version',
          icon: 'icon-text-height',
          target: target,
          setup: setup,
          cssClass: this.options.buttonCssClass
        });
        return buttonElement;
      }
    });
  })(jQuery);

  (function(jQuery) {
    return jQuery.widget('IKS.halloToolbarAbsolute', {
      toolbar: null,
      options: {
        parentElement: 'body',
        editable: null,
        toolbar: null
      },
      _create: function() {
        var el, widthToAdd,
          _this = this;

        this.toolbar = this.options.toolbar;
        this.toolbar.show();
        jQuery(this.options.parentElement).append(this.toolbar);
        this._bindEvents();
        jQuery(window).resize(function(event) {
          return _this._updatePosition(_this._getPosition(event));
        });
        if (this.options.parentElement === 'body' && !this.options.floating) {
          el = jQuery(this.element);
          widthToAdd = parseFloat(el.css('padding-left'));
          widthToAdd += parseFloat(el.css('padding-right'));
          widthToAdd += parseFloat(el.css('border-left-width'));
          widthToAdd += parseFloat(el.css('border-right-width'));
          widthToAdd += (parseFloat(el.css('outline-width'))) * 2;
          widthToAdd += (parseFloat(el.css('outline-offset'))) * 2;
          return jQuery(this.toolbar).css("min-width", el.width() + widthToAdd);
        }
      },
      _getPosition: function(event, selection) {
        var offset, position;

        if (!event) {
          return;
        }
        offset = parseFloat(this.element.css('outline-width')) + parseFloat(this.element.css('outline-offset'));
        return position = {
          top: this.element.offset().top - this.toolbar.outerHeight() - offset,
          left: this.element.offset().left - offset
        };
      },
      _getCaretPosition: function(range) {
        var newRange, position, tmpSpan;

        tmpSpan = jQuery("<span/>");
        newRange = rangy.createRange();
        newRange.setStart(range.endContainer, range.endOffset);
        newRange.insertNode(tmpSpan.get(0));
        position = {
          top: tmpSpan.offset().top,
          left: tmpSpan.offset().left
        };
        tmpSpan.remove();
        return position;
      },
      setPosition: function() {
        this.toolbar.css('position', 'fixed');
        this.toolbar.css('z-index', '99999');
        if (this.options.parentElement !== 'body') {

        }
      },
      _updatePosition: function(position) {},
      _bindEvents: function() {
        var _this = this;

        return this.element.bind('hallodeactivated', function(event, data) {
          _this.toolbar.remove();
          return _this.destroy();
        });
      }
    });
  })(jQuery);

}).call(this);
